
Controller1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004146  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  00004146  000041da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  0080017e  0080017e  000042f8  2**0
                  ALLOC
  3 .stab         00002f40  00000000  00000000  000042f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000165d  00000000  00000000  00007238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00008895  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00008a75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  00008ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000b538  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000cb60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000df40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000e140  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0000e44f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eea5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7e 12 	call	0x24fc	; 0x24fc <main>
      8a:	0c 94 a1 20 	jmp	0x4142	; 0x4142 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a3 1d 	jmp	0x3b46	; 0x3b46 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e6       	ldi	r26, 0x6A	; 106
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 af 1d 	jmp	0x3b5e	; 0x3b5e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 af 1d 	jmp	0x3b5e	; 0x3b5e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a3 1d 	jmp	0x3b46	; 0x3b46 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e6       	ldi	r24, 0x6A	; 106
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ab 1d 	jmp	0x3b56	; 0x3b56 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e6       	ldi	r22, 0x6A	; 106
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 af 1d 	jmp	0x3b5e	; 0x3b5e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 af 1d 	jmp	0x3b5e	; 0x3b5e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 af 1d 	jmp	0x3b5e	; 0x3b5e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 af 1d 	jmp	0x3b5e	; 0x3b5e <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 ac 1d 	jmp	0x3b58	; 0x3b58 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 c8 1d 	jmp	0x3b90	; 0x3b90 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 ab 1d 	jmp	0x3b56	; 0x3b56 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	ee 58       	subi	r30, 0x8E	; 142
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <ADC_int>:



/*initialization*/

void ADC_int(void){
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	/*Voltage Reference Selections for ADC*/
	SET_BIT(ADMUX,ADMUX_REFS0);
     f52:	a7 e2       	ldi	r26, 0x27	; 39
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e7 e2       	ldi	r30, 0x27	; 39
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 64       	ori	r24, 0x40	; 64
     f5e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     f60:	a7 e2       	ldi	r26, 0x27	; 39
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e7 e2       	ldi	r30, 0x27	; 39
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	8f 77       	andi	r24, 0x7F	; 127
     f6c:	8c 93       	st	X, r24

	/*The ADC Data Register*/
	SET_BIT(ADMUX,ADMUX_ADLAR);
     f6e:	a7 e2       	ldi	r26, 0x27	; 39
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e7 e2       	ldi	r30, 0x27	; 39
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	80 62       	ori	r24, 0x20	; 32
     f7a:	8c 93       	st	X, r24

	/*ADC Prescaler Selections*/
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
     f7c:	a6 e2       	ldi	r26, 0x26	; 38
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e6 e2       	ldi	r30, 0x26	; 38
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	81 60       	ori	r24, 0x01	; 1
     f88:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
     f8a:	a6 e2       	ldi	r26, 0x26	; 38
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e6 e2       	ldi	r30, 0x26	; 38
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	82 60       	ori	r24, 0x02	; 2
     f96:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
     f98:	a6 e2       	ldi	r26, 0x26	; 38
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e6 e2       	ldi	r30, 0x26	; 38
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	84 60       	ori	r24, 0x04	; 4
     fa4:	8c 93       	st	X, r24

	/*ADC Enable*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     fa6:	a6 e2       	ldi	r26, 0x26	; 38
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e6 e2       	ldi	r30, 0x26	; 38
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 68       	ori	r24, 0x80	; 128
     fb2:	8c 93       	st	X, r24

}
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <ADC_Read>:


/*ADC read*/

u8 ADC_Read(u8 channel){
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	0f 92       	push	r0
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	89 83       	std	Y+1, r24	; 0x01

	/*set channel value in  ADMUX*/
	ADMUX &= 0b11100000 ;
     fc6:	a7 e2       	ldi	r26, 0x27	; 39
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e7 e2       	ldi	r30, 0x27	; 39
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	80 7e       	andi	r24, 0xE0	; 224
     fd2:	8c 93       	st	X, r24
	ADMUX |= (channel<<ADMUX_MUX0);
     fd4:	a7 e2       	ldi	r26, 0x27	; 39
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e7 e2       	ldi	r30, 0x27	; 39
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	90 81       	ld	r25, Z
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	89 2b       	or	r24, r25
     fe2:	8c 93       	st	X, r24

	/*ADC Start Conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
     fe4:	a6 e2       	ldi	r26, 0x26	; 38
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e6 e2       	ldi	r30, 0x26	; 38
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	80 64       	ori	r24, 0x40	; 64
     ff0:	8c 93       	st	X, r24

	/*wait for Conversion flag*/
	while(GET_BIT(ADCSRA,ADCSRA_ADIF) == 0);
     ff2:	e6 e2       	ldi	r30, 0x26	; 38
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	82 95       	swap	r24
     ffa:	8f 70       	andi	r24, 0x0F	; 15
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	81 70       	andi	r24, 0x01	; 1
    1002:	90 70       	andi	r25, 0x00	; 0
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	a9 f3       	breq	.-22     	; 0xff2 <ADC_Read+0x38>

	/*clear flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    1008:	a6 e2       	ldi	r26, 0x26	; 38
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e6 e2       	ldi	r30, 0x26	; 38
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	80 61       	ori	r24, 0x10	; 16
    1014:	8c 93       	st	X, r24

	/*return result*/
	return ADCH;
    1016:	e5 e2       	ldi	r30, 0x25	; 37
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
}
    101c:	0f 90       	pop	r0
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <DIO_VidSetPinValue>:
#include"DIO_private.h"
#include"DIO_interface.h"


/*set_Pin*/
void DIO_VidSetPinValue(u8 Copy_u8Port,u8 Copy_u8PinNumber,u8 Copy_u8Value){
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	27 97       	sbiw	r28, 0x07	; 7
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	89 83       	std	Y+1, r24	; 0x01
    103a:	6a 83       	std	Y+2, r22	; 0x02
    103c:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value == High){
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	09 f0       	breq	.+2      	; 0x1046 <DIO_VidSetPinValue+0x22>
    1044:	70 c0       	rjmp	.+224    	; 0x1126 <DIO_VidSetPinValue+0x102>
		switch(Copy_u8Port){
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	3f 83       	std	Y+7, r19	; 0x07
    104e:	2e 83       	std	Y+6, r18	; 0x06
    1050:	8e 81       	ldd	r24, Y+6	; 0x06
    1052:	9f 81       	ldd	r25, Y+7	; 0x07
    1054:	83 30       	cpi	r24, 0x03	; 3
    1056:	91 05       	cpc	r25, r1
    1058:	51 f1       	breq	.+84     	; 0x10ae <DIO_VidSetPinValue+0x8a>
    105a:	2e 81       	ldd	r18, Y+6	; 0x06
    105c:	3f 81       	ldd	r19, Y+7	; 0x07
    105e:	24 30       	cpi	r18, 0x04	; 4
    1060:	31 05       	cpc	r19, r1
    1062:	34 f4       	brge	.+12     	; 0x1070 <DIO_VidSetPinValue+0x4c>
    1064:	8e 81       	ldd	r24, Y+6	; 0x06
    1066:	9f 81       	ldd	r25, Y+7	; 0x07
    1068:	82 30       	cpi	r24, 0x02	; 2
    106a:	91 05       	cpc	r25, r1
    106c:	61 f0       	breq	.+24     	; 0x1086 <DIO_VidSetPinValue+0x62>
    106e:	d3 c0       	rjmp	.+422    	; 0x1216 <DIO_VidSetPinValue+0x1f2>
    1070:	2e 81       	ldd	r18, Y+6	; 0x06
    1072:	3f 81       	ldd	r19, Y+7	; 0x07
    1074:	24 30       	cpi	r18, 0x04	; 4
    1076:	31 05       	cpc	r19, r1
    1078:	71 f1       	breq	.+92     	; 0x10d6 <DIO_VidSetPinValue+0xb2>
    107a:	8e 81       	ldd	r24, Y+6	; 0x06
    107c:	9f 81       	ldd	r25, Y+7	; 0x07
    107e:	85 30       	cpi	r24, 0x05	; 5
    1080:	91 05       	cpc	r25, r1
    1082:	e9 f1       	breq	.+122    	; 0x10fe <DIO_VidSetPinValue+0xda>
    1084:	c8 c0       	rjmp	.+400    	; 0x1216 <DIO_VidSetPinValue+0x1f2>
			case(Port_A) : SET_BIT( PORTA , Copy_u8PinNumber);break;
    1086:	ab e3       	ldi	r26, 0x3B	; 59
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	eb e3       	ldi	r30, 0x3B	; 59
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <DIO_VidSetPinValue+0x80>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <DIO_VidSetPinValue+0x7c>
    10a8:	84 2b       	or	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	b4 c0       	rjmp	.+360    	; 0x1216 <DIO_VidSetPinValue+0x1f2>
			case(Port_B) : SET_BIT( PORTB , Copy_u8PinNumber);break;
    10ae:	a8 e3       	ldi	r26, 0x38	; 56
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e8 e3       	ldi	r30, 0x38	; 56
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_VidSetPinValue+0xa8>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_VidSetPinValue+0xa4>
    10d0:	84 2b       	or	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	a0 c0       	rjmp	.+320    	; 0x1216 <DIO_VidSetPinValue+0x1f2>
			case(Port_C) : SET_BIT( PORTC , Copy_u8PinNumber);break;
    10d6:	a5 e3       	ldi	r26, 0x35	; 53
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e5 e3       	ldi	r30, 0x35	; 53
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_VidSetPinValue+0xd0>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_VidSetPinValue+0xcc>
    10f8:	84 2b       	or	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	8c c0       	rjmp	.+280    	; 0x1216 <DIO_VidSetPinValue+0x1f2>
			case(Port_D) : SET_BIT( PORTD , Copy_u8PinNumber);break;
    10fe:	a2 e3       	ldi	r26, 0x32	; 50
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e2 e3       	ldi	r30, 0x32	; 50
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_VidSetPinValue+0xf8>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_VidSetPinValue+0xf4>
    1120:	84 2b       	or	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	78 c0       	rjmp	.+240    	; 0x1216 <DIO_VidSetPinValue+0x1f2>
		}
	}
	else if(Copy_u8Value== Low){
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	88 23       	and	r24, r24
    112a:	09 f0       	breq	.+2      	; 0x112e <DIO_VidSetPinValue+0x10a>
    112c:	74 c0       	rjmp	.+232    	; 0x1216 <DIO_VidSetPinValue+0x1f2>
		switch(Copy_u8Port){
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	3d 83       	std	Y+5, r19	; 0x05
    1136:	2c 83       	std	Y+4, r18	; 0x04
    1138:	8c 81       	ldd	r24, Y+4	; 0x04
    113a:	9d 81       	ldd	r25, Y+5	; 0x05
    113c:	83 30       	cpi	r24, 0x03	; 3
    113e:	91 05       	cpc	r25, r1
    1140:	61 f1       	breq	.+88     	; 0x119a <DIO_VidSetPinValue+0x176>
    1142:	2c 81       	ldd	r18, Y+4	; 0x04
    1144:	3d 81       	ldd	r19, Y+5	; 0x05
    1146:	24 30       	cpi	r18, 0x04	; 4
    1148:	31 05       	cpc	r19, r1
    114a:	34 f4       	brge	.+12     	; 0x1158 <DIO_VidSetPinValue+0x134>
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	9d 81       	ldd	r25, Y+5	; 0x05
    1150:	82 30       	cpi	r24, 0x02	; 2
    1152:	91 05       	cpc	r25, r1
    1154:	69 f0       	breq	.+26     	; 0x1170 <DIO_VidSetPinValue+0x14c>
    1156:	5f c0       	rjmp	.+190    	; 0x1216 <DIO_VidSetPinValue+0x1f2>
    1158:	2c 81       	ldd	r18, Y+4	; 0x04
    115a:	3d 81       	ldd	r19, Y+5	; 0x05
    115c:	24 30       	cpi	r18, 0x04	; 4
    115e:	31 05       	cpc	r19, r1
    1160:	89 f1       	breq	.+98     	; 0x11c4 <DIO_VidSetPinValue+0x1a0>
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	9d 81       	ldd	r25, Y+5	; 0x05
    1166:	85 30       	cpi	r24, 0x05	; 5
    1168:	91 05       	cpc	r25, r1
    116a:	09 f4       	brne	.+2      	; 0x116e <DIO_VidSetPinValue+0x14a>
    116c:	40 c0       	rjmp	.+128    	; 0x11ee <DIO_VidSetPinValue+0x1ca>
    116e:	53 c0       	rjmp	.+166    	; 0x1216 <DIO_VidSetPinValue+0x1f2>
			case(Port_A) : CLR_BIT( PORTA , Copy_u8PinNumber);break;
    1170:	ab e3       	ldi	r26, 0x3B	; 59
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	eb e3       	ldi	r30, 0x3B	; 59
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	48 2f       	mov	r20, r24
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_VidSetPinValue+0x16a>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_VidSetPinValue+0x166>
    1192:	80 95       	com	r24
    1194:	84 23       	and	r24, r20
    1196:	8c 93       	st	X, r24
    1198:	3e c0       	rjmp	.+124    	; 0x1216 <DIO_VidSetPinValue+0x1f2>
			case(Port_B) : CLR_BIT( PORTB , Copy_u8PinNumber);break;
    119a:	a8 e3       	ldi	r26, 0x38	; 56
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e8 e3       	ldi	r30, 0x38	; 56
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_VidSetPinValue+0x194>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_VidSetPinValue+0x190>
    11bc:	80 95       	com	r24
    11be:	84 23       	and	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	29 c0       	rjmp	.+82     	; 0x1216 <DIO_VidSetPinValue+0x1f2>
			case(Port_C) : CLR_BIT( PORTC , Copy_u8PinNumber);break;
    11c4:	a5 e3       	ldi	r26, 0x35	; 53
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e5 e3       	ldi	r30, 0x35	; 53
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <DIO_VidSetPinValue+0x1be>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <DIO_VidSetPinValue+0x1ba>
    11e6:	80 95       	com	r24
    11e8:	84 23       	and	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	14 c0       	rjmp	.+40     	; 0x1216 <DIO_VidSetPinValue+0x1f2>
			case(Port_D) : CLR_BIT( PORTD , Copy_u8PinNumber);break;
    11ee:	a2 e3       	ldi	r26, 0x32	; 50
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e2 e3       	ldi	r30, 0x32	; 50
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_VidSetPinValue+0x1e8>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_VidSetPinValue+0x1e4>
    1210:	80 95       	com	r24
    1212:	84 23       	and	r24, r20
    1214:	8c 93       	st	X, r24
		}
	}
}
    1216:	27 96       	adiw	r28, 0x07	; 7
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <DIO_VidSetPinDirection>:
void DIO_VidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8PinNumber,u8 Copy_u8PinDirection){
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	27 97       	sbiw	r28, 0x07	; 7
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	6a 83       	std	Y+2, r22	; 0x02
    1240:	4b 83       	std	Y+3, r20	; 0x03
	/*check for input direction*/
	if(Copy_u8PinDirection == input){
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	88 23       	and	r24, r24
    1246:	09 f0       	breq	.+2      	; 0x124a <DIO_VidSetPinDirection+0x22>
    1248:	75 c0       	rjmp	.+234    	; 0x1334 <DIO_VidSetPinDirection+0x10c>
		switch(Copy_u8Port){
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	3f 83       	std	Y+7, r19	; 0x07
    1252:	2e 83       	std	Y+6, r18	; 0x06
    1254:	8e 81       	ldd	r24, Y+6	; 0x06
    1256:	9f 81       	ldd	r25, Y+7	; 0x07
    1258:	83 30       	cpi	r24, 0x03	; 3
    125a:	91 05       	cpc	r25, r1
    125c:	61 f1       	breq	.+88     	; 0x12b6 <DIO_VidSetPinDirection+0x8e>
    125e:	2e 81       	ldd	r18, Y+6	; 0x06
    1260:	3f 81       	ldd	r19, Y+7	; 0x07
    1262:	24 30       	cpi	r18, 0x04	; 4
    1264:	31 05       	cpc	r19, r1
    1266:	34 f4       	brge	.+12     	; 0x1274 <DIO_VidSetPinDirection+0x4c>
    1268:	8e 81       	ldd	r24, Y+6	; 0x06
    126a:	9f 81       	ldd	r25, Y+7	; 0x07
    126c:	82 30       	cpi	r24, 0x02	; 2
    126e:	91 05       	cpc	r25, r1
    1270:	69 f0       	breq	.+26     	; 0x128c <DIO_VidSetPinDirection+0x64>
    1272:	d3 c0       	rjmp	.+422    	; 0x141a <DIO_VidSetPinDirection+0x1f2>
    1274:	2e 81       	ldd	r18, Y+6	; 0x06
    1276:	3f 81       	ldd	r19, Y+7	; 0x07
    1278:	24 30       	cpi	r18, 0x04	; 4
    127a:	31 05       	cpc	r19, r1
    127c:	89 f1       	breq	.+98     	; 0x12e0 <DIO_VidSetPinDirection+0xb8>
    127e:	8e 81       	ldd	r24, Y+6	; 0x06
    1280:	9f 81       	ldd	r25, Y+7	; 0x07
    1282:	85 30       	cpi	r24, 0x05	; 5
    1284:	91 05       	cpc	r25, r1
    1286:	09 f4       	brne	.+2      	; 0x128a <DIO_VidSetPinDirection+0x62>
    1288:	40 c0       	rjmp	.+128    	; 0x130a <DIO_VidSetPinDirection+0xe2>
    128a:	c7 c0       	rjmp	.+398    	; 0x141a <DIO_VidSetPinDirection+0x1f2>
			case(Port_A) : CLR_BIT( DDRA , Copy_u8PinNumber);break;
    128c:	aa e3       	ldi	r26, 0x3A	; 58
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	ea e3       	ldi	r30, 0x3A	; 58
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_VidSetPinDirection+0x82>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_VidSetPinDirection+0x7e>
    12ae:	80 95       	com	r24
    12b0:	84 23       	and	r24, r20
    12b2:	8c 93       	st	X, r24
    12b4:	b2 c0       	rjmp	.+356    	; 0x141a <DIO_VidSetPinDirection+0x1f2>
			case(Port_B) : CLR_BIT( DDRB , Copy_u8PinNumber);break;
    12b6:	a7 e3       	ldi	r26, 0x37	; 55
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e7 e3       	ldi	r30, 0x37	; 55
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	48 2f       	mov	r20, r24
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 2e       	mov	r0, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO_VidSetPinDirection+0xac>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO_VidSetPinDirection+0xa8>
    12d8:	80 95       	com	r24
    12da:	84 23       	and	r24, r20
    12dc:	8c 93       	st	X, r24
    12de:	9d c0       	rjmp	.+314    	; 0x141a <DIO_VidSetPinDirection+0x1f2>
			case(Port_C) : CLR_BIT( DDRC , Copy_u8PinNumber);break;
    12e0:	a4 e3       	ldi	r26, 0x34	; 52
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e4 e3       	ldi	r30, 0x34	; 52
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	02 2e       	mov	r0, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <DIO_VidSetPinDirection+0xd6>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <DIO_VidSetPinDirection+0xd2>
    1302:	80 95       	com	r24
    1304:	84 23       	and	r24, r20
    1306:	8c 93       	st	X, r24
    1308:	88 c0       	rjmp	.+272    	; 0x141a <DIO_VidSetPinDirection+0x1f2>
			case(Port_D) : CLR_BIT( DDRD , Copy_u8PinNumber);break;
    130a:	a1 e3       	ldi	r26, 0x31	; 49
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e1 e3       	ldi	r30, 0x31	; 49
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <DIO_VidSetPinDirection+0x100>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <DIO_VidSetPinDirection+0xfc>
    132c:	80 95       	com	r24
    132e:	84 23       	and	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	73 c0       	rjmp	.+230    	; 0x141a <DIO_VidSetPinDirection+0x1f2>
		}
	}
	/*check for output direction*/
	else if(Copy_u8PinDirection == output){
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	09 f0       	breq	.+2      	; 0x133c <DIO_VidSetPinDirection+0x114>
    133a:	6f c0       	rjmp	.+222    	; 0x141a <DIO_VidSetPinDirection+0x1f2>
		switch(Copy_u8Port){
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	3d 83       	std	Y+5, r19	; 0x05
    1344:	2c 83       	std	Y+4, r18	; 0x04
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	83 30       	cpi	r24, 0x03	; 3
    134c:	91 05       	cpc	r25, r1
    134e:	51 f1       	breq	.+84     	; 0x13a4 <DIO_VidSetPinDirection+0x17c>
    1350:	2c 81       	ldd	r18, Y+4	; 0x04
    1352:	3d 81       	ldd	r19, Y+5	; 0x05
    1354:	24 30       	cpi	r18, 0x04	; 4
    1356:	31 05       	cpc	r19, r1
    1358:	34 f4       	brge	.+12     	; 0x1366 <DIO_VidSetPinDirection+0x13e>
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	9d 81       	ldd	r25, Y+5	; 0x05
    135e:	82 30       	cpi	r24, 0x02	; 2
    1360:	91 05       	cpc	r25, r1
    1362:	61 f0       	breq	.+24     	; 0x137c <DIO_VidSetPinDirection+0x154>
    1364:	5a c0       	rjmp	.+180    	; 0x141a <DIO_VidSetPinDirection+0x1f2>
    1366:	2c 81       	ldd	r18, Y+4	; 0x04
    1368:	3d 81       	ldd	r19, Y+5	; 0x05
    136a:	24 30       	cpi	r18, 0x04	; 4
    136c:	31 05       	cpc	r19, r1
    136e:	71 f1       	breq	.+92     	; 0x13cc <DIO_VidSetPinDirection+0x1a4>
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	9d 81       	ldd	r25, Y+5	; 0x05
    1374:	85 30       	cpi	r24, 0x05	; 5
    1376:	91 05       	cpc	r25, r1
    1378:	e9 f1       	breq	.+122    	; 0x13f4 <DIO_VidSetPinDirection+0x1cc>
    137a:	4f c0       	rjmp	.+158    	; 0x141a <DIO_VidSetPinDirection+0x1f2>
			case(Port_A) : SET_BIT( DDRA , Copy_u8PinNumber);break;
    137c:	aa e3       	ldi	r26, 0x3A	; 58
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	ea e3       	ldi	r30, 0x3A	; 58
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_VidSetPinDirection+0x172>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <DIO_VidSetPinDirection+0x16e>
    139e:	84 2b       	or	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	3b c0       	rjmp	.+118    	; 0x141a <DIO_VidSetPinDirection+0x1f2>
			case(Port_B) : SET_BIT( DDRB , Copy_u8PinNumber);break;
    13a4:	a7 e3       	ldi	r26, 0x37	; 55
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e7 e3       	ldi	r30, 0x37	; 55
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <DIO_VidSetPinDirection+0x19a>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <DIO_VidSetPinDirection+0x196>
    13c6:	84 2b       	or	r24, r20
    13c8:	8c 93       	st	X, r24
    13ca:	27 c0       	rjmp	.+78     	; 0x141a <DIO_VidSetPinDirection+0x1f2>
			case(Port_C) : SET_BIT( DDRC , Copy_u8PinNumber);break;
    13cc:	a4 e3       	ldi	r26, 0x34	; 52
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e4 e3       	ldi	r30, 0x34	; 52
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	48 2f       	mov	r20, r24
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 2e       	mov	r0, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_VidSetPinDirection+0x1c2>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	0a 94       	dec	r0
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_VidSetPinDirection+0x1be>
    13ee:	84 2b       	or	r24, r20
    13f0:	8c 93       	st	X, r24
    13f2:	13 c0       	rjmp	.+38     	; 0x141a <DIO_VidSetPinDirection+0x1f2>
			case(Port_D) : SET_BIT( DDRD , Copy_u8PinNumber);break;
    13f4:	a1 e3       	ldi	r26, 0x31	; 49
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e1 e3       	ldi	r30, 0x31	; 49
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 2e       	mov	r0, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <DIO_VidSetPinDirection+0x1ea>
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	0a 94       	dec	r0
    1414:	e2 f7       	brpl	.-8      	; 0x140e <DIO_VidSetPinDirection+0x1e6>
    1416:	84 2b       	or	r24, r20
    1418:	8c 93       	st	X, r24
		}
	}
}
    141a:	27 96       	adiw	r28, 0x07	; 7
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <DIO_VidGetPinValue>:
void DIO_VidGetPinValue(u8 Copy_u8Port,u8 Copy_u8PinNumber,u8 *Copy_Pu8PinValue){
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	00 d0       	rcall	.+0      	; 0x1432 <DIO_VidGetPinValue+0x6>
    1432:	00 d0       	rcall	.+0      	; 0x1434 <DIO_VidGetPinValue+0x8>
    1434:	00 d0       	rcall	.+0      	; 0x1436 <DIO_VidGetPinValue+0xa>
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	6a 83       	std	Y+2, r22	; 0x02
    143e:	5c 83       	std	Y+4, r21	; 0x04
    1440:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8Port){
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	3e 83       	std	Y+6, r19	; 0x06
    144a:	2d 83       	std	Y+5, r18	; 0x05
    144c:	4d 81       	ldd	r20, Y+5	; 0x05
    144e:	5e 81       	ldd	r21, Y+6	; 0x06
    1450:	43 30       	cpi	r20, 0x03	; 3
    1452:	51 05       	cpc	r21, r1
    1454:	59 f1       	breq	.+86     	; 0x14ac <DIO_VidGetPinValue+0x80>
    1456:	8d 81       	ldd	r24, Y+5	; 0x05
    1458:	9e 81       	ldd	r25, Y+6	; 0x06
    145a:	84 30       	cpi	r24, 0x04	; 4
    145c:	91 05       	cpc	r25, r1
    145e:	34 f4       	brge	.+12     	; 0x146c <DIO_VidGetPinValue+0x40>
    1460:	2d 81       	ldd	r18, Y+5	; 0x05
    1462:	3e 81       	ldd	r19, Y+6	; 0x06
    1464:	22 30       	cpi	r18, 0x02	; 2
    1466:	31 05       	cpc	r19, r1
    1468:	69 f0       	breq	.+26     	; 0x1484 <DIO_VidGetPinValue+0x58>
    146a:	5b c0       	rjmp	.+182    	; 0x1522 <DIO_VidGetPinValue+0xf6>
    146c:	4d 81       	ldd	r20, Y+5	; 0x05
    146e:	5e 81       	ldd	r21, Y+6	; 0x06
    1470:	44 30       	cpi	r20, 0x04	; 4
    1472:	51 05       	cpc	r21, r1
    1474:	79 f1       	breq	.+94     	; 0x14d4 <DIO_VidGetPinValue+0xa8>
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	9e 81       	ldd	r25, Y+6	; 0x06
    147a:	85 30       	cpi	r24, 0x05	; 5
    147c:	91 05       	cpc	r25, r1
    147e:	09 f4       	brne	.+2      	; 0x1482 <DIO_VidGetPinValue+0x56>
    1480:	3d c0       	rjmp	.+122    	; 0x14fc <DIO_VidGetPinValue+0xd0>
    1482:	4f c0       	rjmp	.+158    	; 0x1522 <DIO_VidGetPinValue+0xf6>
		case(Port_A) : *Copy_Pu8PinValue = GET_BIT( PINA  , Copy_u8PinNumber);break;
    1484:	e9 e3       	ldi	r30, 0x39	; 57
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	88 2f       	mov	r24, r24
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	a9 01       	movw	r20, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_VidGetPinValue+0x70>
    1498:	55 95       	asr	r21
    149a:	47 95       	ror	r20
    149c:	8a 95       	dec	r24
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <DIO_VidGetPinValue+0x6c>
    14a0:	ca 01       	movw	r24, r20
    14a2:	81 70       	andi	r24, 0x01	; 1
    14a4:	eb 81       	ldd	r30, Y+3	; 0x03
    14a6:	fc 81       	ldd	r31, Y+4	; 0x04
    14a8:	80 83       	st	Z, r24
    14aa:	3b c0       	rjmp	.+118    	; 0x1522 <DIO_VidGetPinValue+0xf6>
		case(Port_B) : *Copy_Pu8PinValue = GET_BIT( PINB  , Copy_u8PinNumber);break;
    14ac:	e6 e3       	ldi	r30, 0x36	; 54
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	88 2f       	mov	r24, r24
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a9 01       	movw	r20, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_VidGetPinValue+0x98>
    14c0:	55 95       	asr	r21
    14c2:	47 95       	ror	r20
    14c4:	8a 95       	dec	r24
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_VidGetPinValue+0x94>
    14c8:	ca 01       	movw	r24, r20
    14ca:	81 70       	andi	r24, 0x01	; 1
    14cc:	eb 81       	ldd	r30, Y+3	; 0x03
    14ce:	fc 81       	ldd	r31, Y+4	; 0x04
    14d0:	80 83       	st	Z, r24
    14d2:	27 c0       	rjmp	.+78     	; 0x1522 <DIO_VidGetPinValue+0xf6>
		case(Port_C) : *Copy_Pu8PinValue = GET_BIT( PINC  , Copy_u8PinNumber);break;
    14d4:	e3 e3       	ldi	r30, 0x33	; 51
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a9 01       	movw	r20, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_VidGetPinValue+0xc0>
    14e8:	55 95       	asr	r21
    14ea:	47 95       	ror	r20
    14ec:	8a 95       	dec	r24
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO_VidGetPinValue+0xbc>
    14f0:	ca 01       	movw	r24, r20
    14f2:	81 70       	andi	r24, 0x01	; 1
    14f4:	eb 81       	ldd	r30, Y+3	; 0x03
    14f6:	fc 81       	ldd	r31, Y+4	; 0x04
    14f8:	80 83       	st	Z, r24
    14fa:	13 c0       	rjmp	.+38     	; 0x1522 <DIO_VidGetPinValue+0xf6>
		case(Port_D) : *Copy_Pu8PinValue = GET_BIT( PIND  , Copy_u8PinNumber);break;
    14fc:	e0 e3       	ldi	r30, 0x30	; 48
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	a9 01       	movw	r20, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO_VidGetPinValue+0xe8>
    1510:	55 95       	asr	r21
    1512:	47 95       	ror	r20
    1514:	8a 95       	dec	r24
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <DIO_VidGetPinValue+0xe4>
    1518:	ca 01       	movw	r24, r20
    151a:	81 70       	andi	r24, 0x01	; 1
    151c:	eb 81       	ldd	r30, Y+3	; 0x03
    151e:	fc 81       	ldd	r31, Y+4	; 0x04
    1520:	80 83       	st	Z, r24
	}
}
    1522:	26 96       	adiw	r28, 0x06	; 6
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <DIO_VidSetPortValue>:
/*set_Port*/
void DIO_VidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	00 d0       	rcall	.+0      	; 0x153a <DIO_VidSetPortValue+0x6>
    153a:	00 d0       	rcall	.+0      	; 0x153c <DIO_VidSetPortValue+0x8>
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	3c 83       	std	Y+4, r19	; 0x04
    154c:	2b 83       	std	Y+3, r18	; 0x03
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	9c 81       	ldd	r25, Y+4	; 0x04
    1552:	83 30       	cpi	r24, 0x03	; 3
    1554:	91 05       	cpc	r25, r1
    1556:	d9 f0       	breq	.+54     	; 0x158e <DIO_VidSetPortValue+0x5a>
    1558:	2b 81       	ldd	r18, Y+3	; 0x03
    155a:	3c 81       	ldd	r19, Y+4	; 0x04
    155c:	24 30       	cpi	r18, 0x04	; 4
    155e:	31 05       	cpc	r19, r1
    1560:	34 f4       	brge	.+12     	; 0x156e <DIO_VidSetPortValue+0x3a>
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	9c 81       	ldd	r25, Y+4	; 0x04
    1566:	82 30       	cpi	r24, 0x02	; 2
    1568:	91 05       	cpc	r25, r1
    156a:	61 f0       	breq	.+24     	; 0x1584 <DIO_VidSetPortValue+0x50>
    156c:	1e c0       	rjmp	.+60     	; 0x15aa <DIO_VidSetPortValue+0x76>
    156e:	2b 81       	ldd	r18, Y+3	; 0x03
    1570:	3c 81       	ldd	r19, Y+4	; 0x04
    1572:	24 30       	cpi	r18, 0x04	; 4
    1574:	31 05       	cpc	r19, r1
    1576:	81 f0       	breq	.+32     	; 0x1598 <DIO_VidSetPortValue+0x64>
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	85 30       	cpi	r24, 0x05	; 5
    157e:	91 05       	cpc	r25, r1
    1580:	81 f0       	breq	.+32     	; 0x15a2 <DIO_VidSetPortValue+0x6e>
    1582:	13 c0       	rjmp	.+38     	; 0x15aa <DIO_VidSetPortValue+0x76>
	case(Port_A) : PORTA = Copy_u8Value ;break;
    1584:	eb e3       	ldi	r30, 0x3B	; 59
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	80 83       	st	Z, r24
    158c:	0e c0       	rjmp	.+28     	; 0x15aa <DIO_VidSetPortValue+0x76>
	case(Port_B) : PORTB = Copy_u8Value ;break;
    158e:	e8 e3       	ldi	r30, 0x38	; 56
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	80 83       	st	Z, r24
    1596:	09 c0       	rjmp	.+18     	; 0x15aa <DIO_VidSetPortValue+0x76>
	case(Port_C) : PORTC = Copy_u8Value ;break;
    1598:	e5 e3       	ldi	r30, 0x35	; 53
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	80 83       	st	Z, r24
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <DIO_VidSetPortValue+0x76>
	case(Port_D) : PORTD = Copy_u8Value ;break;
    15a2:	e2 e3       	ldi	r30, 0x32	; 50
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	80 83       	st	Z, r24
	}
}
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8PortDirection){
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	00 d0       	rcall	.+0      	; 0x15be <DIO_VidSetPortDirection+0x6>
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <DIO_VidSetPortDirection+0x8>
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	89 83       	std	Y+1, r24	; 0x01
    15c6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	3c 83       	std	Y+4, r19	; 0x04
    15d0:	2b 83       	std	Y+3, r18	; 0x03
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	83 30       	cpi	r24, 0x03	; 3
    15d8:	91 05       	cpc	r25, r1
    15da:	d9 f0       	breq	.+54     	; 0x1612 <DIO_VidSetPortDirection+0x5a>
    15dc:	2b 81       	ldd	r18, Y+3	; 0x03
    15de:	3c 81       	ldd	r19, Y+4	; 0x04
    15e0:	24 30       	cpi	r18, 0x04	; 4
    15e2:	31 05       	cpc	r19, r1
    15e4:	34 f4       	brge	.+12     	; 0x15f2 <DIO_VidSetPortDirection+0x3a>
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	82 30       	cpi	r24, 0x02	; 2
    15ec:	91 05       	cpc	r25, r1
    15ee:	61 f0       	breq	.+24     	; 0x1608 <DIO_VidSetPortDirection+0x50>
    15f0:	1e c0       	rjmp	.+60     	; 0x162e <DIO_VidSetPortDirection+0x76>
    15f2:	2b 81       	ldd	r18, Y+3	; 0x03
    15f4:	3c 81       	ldd	r19, Y+4	; 0x04
    15f6:	24 30       	cpi	r18, 0x04	; 4
    15f8:	31 05       	cpc	r19, r1
    15fa:	81 f0       	breq	.+32     	; 0x161c <DIO_VidSetPortDirection+0x64>
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1600:	85 30       	cpi	r24, 0x05	; 5
    1602:	91 05       	cpc	r25, r1
    1604:	81 f0       	breq	.+32     	; 0x1626 <DIO_VidSetPortDirection+0x6e>
    1606:	13 c0       	rjmp	.+38     	; 0x162e <DIO_VidSetPortDirection+0x76>
	case(Port_A) : DDRA = Copy_u8PortDirection ;break;
    1608:	ea e3       	ldi	r30, 0x3A	; 58
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	80 83       	st	Z, r24
    1610:	0e c0       	rjmp	.+28     	; 0x162e <DIO_VidSetPortDirection+0x76>
	case(Port_B) : DDRB = Copy_u8PortDirection ;break;
    1612:	e7 e3       	ldi	r30, 0x37	; 55
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	80 83       	st	Z, r24
    161a:	09 c0       	rjmp	.+18     	; 0x162e <DIO_VidSetPortDirection+0x76>
	case(Port_C) : DDRC = Copy_u8PortDirection ;break;
    161c:	e4 e3       	ldi	r30, 0x34	; 52
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	80 83       	st	Z, r24
    1624:	04 c0       	rjmp	.+8      	; 0x162e <DIO_VidSetPortDirection+0x76>
	case(Port_D) : DDRD = Copy_u8PortDirection ;break;
    1626:	e1 e3       	ldi	r30, 0x31	; 49
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	80 83       	st	Z, r24
	}
}
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	08 95       	ret

0000163c <DIO_VidGetPortValue>:
void DIO_VidGetPortValue(u8 Copy_u8Port,u8 *Copy_Pu8PortValue){
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	00 d0       	rcall	.+0      	; 0x1642 <DIO_VidGetPortValue+0x6>
    1642:	00 d0       	rcall	.+0      	; 0x1644 <DIO_VidGetPortValue+0x8>
    1644:	0f 92       	push	r0
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	7b 83       	std	Y+3, r23	; 0x03
    164e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	3d 83       	std	Y+5, r19	; 0x05
    1658:	2c 83       	std	Y+4, r18	; 0x04
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	9d 81       	ldd	r25, Y+5	; 0x05
    165e:	83 30       	cpi	r24, 0x03	; 3
    1660:	91 05       	cpc	r25, r1
    1662:	e9 f0       	breq	.+58     	; 0x169e <DIO_VidGetPortValue+0x62>
    1664:	2c 81       	ldd	r18, Y+4	; 0x04
    1666:	3d 81       	ldd	r19, Y+5	; 0x05
    1668:	24 30       	cpi	r18, 0x04	; 4
    166a:	31 05       	cpc	r19, r1
    166c:	34 f4       	brge	.+12     	; 0x167a <DIO_VidGetPortValue+0x3e>
    166e:	8c 81       	ldd	r24, Y+4	; 0x04
    1670:	9d 81       	ldd	r25, Y+5	; 0x05
    1672:	82 30       	cpi	r24, 0x02	; 2
    1674:	91 05       	cpc	r25, r1
    1676:	61 f0       	breq	.+24     	; 0x1690 <DIO_VidGetPortValue+0x54>
    1678:	26 c0       	rjmp	.+76     	; 0x16c6 <DIO_VidGetPortValue+0x8a>
    167a:	2c 81       	ldd	r18, Y+4	; 0x04
    167c:	3d 81       	ldd	r19, Y+5	; 0x05
    167e:	24 30       	cpi	r18, 0x04	; 4
    1680:	31 05       	cpc	r19, r1
    1682:	a1 f0       	breq	.+40     	; 0x16ac <DIO_VidGetPortValue+0x70>
    1684:	8c 81       	ldd	r24, Y+4	; 0x04
    1686:	9d 81       	ldd	r25, Y+5	; 0x05
    1688:	85 30       	cpi	r24, 0x05	; 5
    168a:	91 05       	cpc	r25, r1
    168c:	b1 f0       	breq	.+44     	; 0x16ba <DIO_VidGetPortValue+0x7e>
    168e:	1b c0       	rjmp	.+54     	; 0x16c6 <DIO_VidGetPortValue+0x8a>
	case(Port_A) : *Copy_Pu8PortValue =PINA ;break;
    1690:	e9 e3       	ldi	r30, 0x39	; 57
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	ea 81       	ldd	r30, Y+2	; 0x02
    1698:	fb 81       	ldd	r31, Y+3	; 0x03
    169a:	80 83       	st	Z, r24
    169c:	14 c0       	rjmp	.+40     	; 0x16c6 <DIO_VidGetPortValue+0x8a>
	case(Port_B) : *Copy_Pu8PortValue =PINB  ;break;
    169e:	e6 e3       	ldi	r30, 0x36	; 54
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	ea 81       	ldd	r30, Y+2	; 0x02
    16a6:	fb 81       	ldd	r31, Y+3	; 0x03
    16a8:	80 83       	st	Z, r24
    16aa:	0d c0       	rjmp	.+26     	; 0x16c6 <DIO_VidGetPortValue+0x8a>
	case(Port_C) : *Copy_Pu8PortValue =PINC  ;break;
    16ac:	e3 e3       	ldi	r30, 0x33	; 51
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	ea 81       	ldd	r30, Y+2	; 0x02
    16b4:	fb 81       	ldd	r31, Y+3	; 0x03
    16b6:	80 83       	st	Z, r24
    16b8:	06 c0       	rjmp	.+12     	; 0x16c6 <DIO_VidGetPortValue+0x8a>
	case(Port_D) : *Copy_Pu8PortValue =PIND  ;break;
    16ba:	e0 e3       	ldi	r30, 0x30	; 48
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	ea 81       	ldd	r30, Y+2	; 0x02
    16c2:	fb 81       	ldd	r31, Y+3	; 0x03
    16c4:	80 83       	st	Z, r24
	}
}
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <EEPROM_VidWrite>:
#include "TWI_config.h"
#include "util/delay.h"


/*write*/
void EEPROM_VidWrite(u8 cpy_u8EepromAddress , u8 cpy_u8ByteAddress , u8 cpy_u8Data){
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	00 d0       	rcall	.+0      	; 0x16dc <EEPROM_VidWrite+0x6>
    16dc:	0f 92       	push	r0
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	6a 83       	std	Y+2, r22	; 0x02
    16e6:	4b 83       	std	Y+3, r20	; 0x03

	TWI_SendStartCondition();
    16e8:	0e 94 34 10 	call	0x2068	; 0x2068 <TWI_SendStartCondition>

	TWI_MasterSendAddress(cpy_u8EepromAddress , TWI_WRITE);
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	0e 94 4e 10 	call	0x209c	; 0x209c <TWI_MasterSendAddress>

	TWI_MasterSendData(cpy_u8ByteAddress);
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <TWI_MasterSendData>

	TWI_MasterSendData(cpy_u8Data);
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <TWI_MasterSendData>

	TWI_SendStopCondition();
    1700:	0e 94 ac 10 	call	0x2158	; 0x2158 <TWI_SendStopCondition>

}
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <EEPROM_VidRead>:


/*read*/
u8 EEPROM_VidRead(u8 cpy_u8EepromAddress , u8 cpy_u8ByteAddress){
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	00 d0       	rcall	.+0      	; 0x1716 <EEPROM_VidRead+0x6>
    1716:	0f 92       	push	r0
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	8a 83       	std	Y+2, r24	; 0x02
    171e:	6b 83       	std	Y+3, r22	; 0x03

	TWI_SendStartCondition();
    1720:	0e 94 34 10 	call	0x2068	; 0x2068 <TWI_SendStartCondition>

	TWI_MasterSendAddress(cpy_u8EepromAddress , TWI_WRITE);
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	0e 94 4e 10 	call	0x209c	; 0x209c <TWI_MasterSendAddress>

	TWI_MasterSendData(cpy_u8ByteAddress);
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <TWI_MasterSendData>

	TWI_SendStartCondition();
    1732:	0e 94 34 10 	call	0x2068	; 0x2068 <TWI_SendStartCondition>

	TWI_MasterSendAddress(cpy_u8EepromAddress , TWI_Read);
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	61 e0       	ldi	r22, 0x01	; 1
    173a:	0e 94 4e 10 	call	0x209c	; 0x209c <TWI_MasterSendAddress>

	u8 read = TWI_MasterReadData();
    173e:	0e 94 96 10 	call	0x212c	; 0x212c <TWI_MasterReadData>
    1742:	89 83       	std	Y+1, r24	; 0x01

	TWI_SendStopCondition();
    1744:	0e 94 ac 10 	call	0x2158	; 0x2158 <TWI_SendStopCondition>

	return read;
    1748:	89 81       	ldd	r24, Y+1	; 0x01

}
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <EEPROM_VidWriteBlock>:

/*write block of data*/
void EEPROM_VidWriteBlock(u8 cpy_u8EepromAddress , u8 cpy_u8StartAddress , u8 *cpy_u8Data){
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	64 97       	sbiw	r28, 0x14	; 20
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	89 8b       	std	Y+17, r24	; 0x11
    176c:	6a 8b       	std	Y+18, r22	; 0x12
    176e:	5c 8b       	std	Y+20, r21	; 0x14
    1770:	4b 8b       	std	Y+19, r20	; 0x13
	for(u16 i = 0 ; cpy_u8Data[i] != '\0' ; i++){
    1772:	18 8a       	std	Y+16, r1	; 0x10
    1774:	1f 86       	std	Y+15, r1	; 0x0f
    1776:	88 c0       	rjmp	.+272    	; 0x1888 <EEPROM_VidWriteBlock+0x132>
		EEPROM_VidWrite( cpy_u8EepromAddress , cpy_u8StartAddress + i , cpy_u8Data[i]);
    1778:	9f 85       	ldd	r25, Y+15	; 0x0f
    177a:	8a 89       	ldd	r24, Y+18	; 0x12
    177c:	49 2f       	mov	r20, r25
    177e:	48 0f       	add	r20, r24
    1780:	2b 89       	ldd	r18, Y+19	; 0x13
    1782:	3c 89       	ldd	r19, Y+20	; 0x14
    1784:	8f 85       	ldd	r24, Y+15	; 0x0f
    1786:	98 89       	ldd	r25, Y+16	; 0x10
    1788:	f9 01       	movw	r30, r18
    178a:	e8 0f       	add	r30, r24
    178c:	f9 1f       	adc	r31, r25
    178e:	90 81       	ld	r25, Z
    1790:	89 89       	ldd	r24, Y+17	; 0x11
    1792:	64 2f       	mov	r22, r20
    1794:	49 2f       	mov	r20, r25
    1796:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <EEPROM_VidWrite>
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	a0 e8       	ldi	r26, 0x80	; 128
    17a0:	bf e3       	ldi	r27, 0x3F	; 63
    17a2:	8b 87       	std	Y+11, r24	; 0x0b
    17a4:	9c 87       	std	Y+12, r25	; 0x0c
    17a6:	ad 87       	std	Y+13, r26	; 0x0d
    17a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	4a ef       	ldi	r20, 0xFA	; 250
    17b8:	54 e4       	ldi	r21, 0x44	; 68
    17ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	8f 83       	std	Y+7, r24	; 0x07
    17c4:	98 87       	std	Y+8, r25	; 0x08
    17c6:	a9 87       	std	Y+9, r26	; 0x09
    17c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17ca:	6f 81       	ldd	r22, Y+7	; 0x07
    17cc:	78 85       	ldd	r23, Y+8	; 0x08
    17ce:	89 85       	ldd	r24, Y+9	; 0x09
    17d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e8       	ldi	r20, 0x80	; 128
    17d8:	5f e3       	ldi	r21, 0x3F	; 63
    17da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    17de:	88 23       	and	r24, r24
    17e0:	2c f4       	brge	.+10     	; 0x17ec <EEPROM_VidWriteBlock+0x96>
		__ticks = 1;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	9e 83       	std	Y+6, r25	; 0x06
    17e8:	8d 83       	std	Y+5, r24	; 0x05
    17ea:	3f c0       	rjmp	.+126    	; 0x186a <EEPROM_VidWriteBlock+0x114>
	else if (__tmp > 65535)
    17ec:	6f 81       	ldd	r22, Y+7	; 0x07
    17ee:	78 85       	ldd	r23, Y+8	; 0x08
    17f0:	89 85       	ldd	r24, Y+9	; 0x09
    17f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	3f ef       	ldi	r19, 0xFF	; 255
    17f8:	4f e7       	ldi	r20, 0x7F	; 127
    17fa:	57 e4       	ldi	r21, 0x47	; 71
    17fc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1800:	18 16       	cp	r1, r24
    1802:	4c f5       	brge	.+82     	; 0x1856 <EEPROM_VidWriteBlock+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1804:	6b 85       	ldd	r22, Y+11	; 0x0b
    1806:	7c 85       	ldd	r23, Y+12	; 0x0c
    1808:	8d 85       	ldd	r24, Y+13	; 0x0d
    180a:	9e 85       	ldd	r25, Y+14	; 0x0e
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e2       	ldi	r20, 0x20	; 32
    1812:	51 e4       	ldi	r21, 0x41	; 65
    1814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	bc 01       	movw	r22, r24
    181e:	cd 01       	movw	r24, r26
    1820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	9e 83       	std	Y+6, r25	; 0x06
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	0f c0       	rjmp	.+30     	; 0x184c <EEPROM_VidWriteBlock+0xf6>
    182e:	88 ec       	ldi	r24, 0xC8	; 200
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	9c 83       	std	Y+4, r25	; 0x04
    1834:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	f1 f7       	brne	.-4      	; 0x183a <EEPROM_VidWriteBlock+0xe4>
    183e:	9c 83       	std	Y+4, r25	; 0x04
    1840:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
    1844:	9e 81       	ldd	r25, Y+6	; 0x06
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	9e 83       	std	Y+6, r25	; 0x06
    184a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184c:	8d 81       	ldd	r24, Y+5	; 0x05
    184e:	9e 81       	ldd	r25, Y+6	; 0x06
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	69 f7       	brne	.-38     	; 0x182e <EEPROM_VidWriteBlock+0xd8>
    1854:	14 c0       	rjmp	.+40     	; 0x187e <EEPROM_VidWriteBlock+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1856:	6f 81       	ldd	r22, Y+7	; 0x07
    1858:	78 85       	ldd	r23, Y+8	; 0x08
    185a:	89 85       	ldd	r24, Y+9	; 0x09
    185c:	9a 85       	ldd	r25, Y+10	; 0x0a
    185e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	9e 83       	std	Y+6, r25	; 0x06
    1868:	8d 83       	std	Y+5, r24	; 0x05
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	9e 81       	ldd	r25, Y+6	; 0x06
    186e:	9a 83       	std	Y+2, r25	; 0x02
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	9a 81       	ldd	r25, Y+2	; 0x02
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <EEPROM_VidWriteBlock+0x120>
    187a:	9a 83       	std	Y+2, r25	; 0x02
    187c:	89 83       	std	Y+1, r24	; 0x01

}

/*write block of data*/
void EEPROM_VidWriteBlock(u8 cpy_u8EepromAddress , u8 cpy_u8StartAddress , u8 *cpy_u8Data){
	for(u16 i = 0 ; cpy_u8Data[i] != '\0' ; i++){
    187e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1880:	98 89       	ldd	r25, Y+16	; 0x10
    1882:	01 96       	adiw	r24, 0x01	; 1
    1884:	98 8b       	std	Y+16, r25	; 0x10
    1886:	8f 87       	std	Y+15, r24	; 0x0f
    1888:	2b 89       	ldd	r18, Y+19	; 0x13
    188a:	3c 89       	ldd	r19, Y+20	; 0x14
    188c:	8f 85       	ldd	r24, Y+15	; 0x0f
    188e:	98 89       	ldd	r25, Y+16	; 0x10
    1890:	f9 01       	movw	r30, r18
    1892:	e8 0f       	add	r30, r24
    1894:	f9 1f       	adc	r31, r25
    1896:	80 81       	ld	r24, Z
    1898:	88 23       	and	r24, r24
    189a:	09 f0       	breq	.+2      	; 0x189e <EEPROM_VidWriteBlock+0x148>
    189c:	6d cf       	rjmp	.-294    	; 0x1778 <EEPROM_VidWriteBlock+0x22>
		EEPROM_VidWrite( cpy_u8EepromAddress , cpy_u8StartAddress + i , cpy_u8Data[i]);

		_delay_ms(1);
	}
}
    189e:	64 96       	adiw	r28, 0x14	; 20
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <EEPROM_VidReadBlock>:




/*read block of data*/
void EEPROM_VidReadBlock(u8 cpy_u8EepromAddress , u8 cpy_u8ByteAddress , u8 *GlobCpy_u8ReadData){
    18b0:	0f 93       	push	r16
    18b2:	1f 93       	push	r17
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	67 97       	sbiw	r28, 0x17	; 23
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	f8 94       	cli
    18c2:	de bf       	out	0x3e, r29	; 62
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	cd bf       	out	0x3d, r28	; 61
    18c8:	8c 8b       	std	Y+20, r24	; 0x14
    18ca:	6d 8b       	std	Y+21, r22	; 0x15
    18cc:	5f 8b       	std	Y+23, r21	; 0x17
    18ce:	4e 8b       	std	Y+22, r20	; 0x16
	u8 x ;

	for (int i = 0 ; GlobCpy_u8ReadData[i]!='\0' ; i++){
    18d0:	1a 8a       	std	Y+18, r1	; 0x12
    18d2:	19 8a       	std	Y+17, r1	; 0x11
    18d4:	0d c0       	rjmp	.+26     	; 0x18f0 <EEPROM_VidReadBlock+0x40>
		GlobCpy_u8ReadData[i] = 0 ;
    18d6:	29 89       	ldd	r18, Y+17	; 0x11
    18d8:	3a 89       	ldd	r19, Y+18	; 0x12
    18da:	8e 89       	ldd	r24, Y+22	; 0x16
    18dc:	9f 89       	ldd	r25, Y+23	; 0x17
    18de:	fc 01       	movw	r30, r24
    18e0:	e2 0f       	add	r30, r18
    18e2:	f3 1f       	adc	r31, r19
    18e4:	10 82       	st	Z, r1

/*read block of data*/
void EEPROM_VidReadBlock(u8 cpy_u8EepromAddress , u8 cpy_u8ByteAddress , u8 *GlobCpy_u8ReadData){
	u8 x ;

	for (int i = 0 ; GlobCpy_u8ReadData[i]!='\0' ; i++){
    18e6:	89 89       	ldd	r24, Y+17	; 0x11
    18e8:	9a 89       	ldd	r25, Y+18	; 0x12
    18ea:	01 96       	adiw	r24, 0x01	; 1
    18ec:	9a 8b       	std	Y+18, r25	; 0x12
    18ee:	89 8b       	std	Y+17, r24	; 0x11
    18f0:	29 89       	ldd	r18, Y+17	; 0x11
    18f2:	3a 89       	ldd	r19, Y+18	; 0x12
    18f4:	8e 89       	ldd	r24, Y+22	; 0x16
    18f6:	9f 89       	ldd	r25, Y+23	; 0x17
    18f8:	fc 01       	movw	r30, r24
    18fa:	e2 0f       	add	r30, r18
    18fc:	f3 1f       	adc	r31, r19
    18fe:	80 81       	ld	r24, Z
    1900:	88 23       	and	r24, r24
    1902:	49 f7       	brne	.-46     	; 0x18d6 <EEPROM_VidReadBlock+0x26>
		GlobCpy_u8ReadData[i] = 0 ;
	}

	for(u16 i = cpy_u8ByteAddress ; x != 0xff ; i++){
    1904:	8d 89       	ldd	r24, Y+21	; 0x15
    1906:	88 2f       	mov	r24, r24
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	98 8b       	std	Y+16, r25	; 0x10
    190c:	8f 87       	std	Y+15, r24	; 0x0f
    190e:	8e c0       	rjmp	.+284    	; 0x1a2c <EEPROM_VidReadBlock+0x17c>
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	a0 e8       	ldi	r26, 0x80	; 128
    1916:	bf e3       	ldi	r27, 0x3F	; 63
    1918:	8b 87       	std	Y+11, r24	; 0x0b
    191a:	9c 87       	std	Y+12, r25	; 0x0c
    191c:	ad 87       	std	Y+13, r26	; 0x0d
    191e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1920:	6b 85       	ldd	r22, Y+11	; 0x0b
    1922:	7c 85       	ldd	r23, Y+12	; 0x0c
    1924:	8d 85       	ldd	r24, Y+13	; 0x0d
    1926:	9e 85       	ldd	r25, Y+14	; 0x0e
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	4a ef       	ldi	r20, 0xFA	; 250
    192e:	54 e4       	ldi	r21, 0x44	; 68
    1930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	8f 83       	std	Y+7, r24	; 0x07
    193a:	98 87       	std	Y+8, r25	; 0x08
    193c:	a9 87       	std	Y+9, r26	; 0x09
    193e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1940:	6f 81       	ldd	r22, Y+7	; 0x07
    1942:	78 85       	ldd	r23, Y+8	; 0x08
    1944:	89 85       	ldd	r24, Y+9	; 0x09
    1946:	9a 85       	ldd	r25, Y+10	; 0x0a
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e8       	ldi	r20, 0x80	; 128
    194e:	5f e3       	ldi	r21, 0x3F	; 63
    1950:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1954:	88 23       	and	r24, r24
    1956:	2c f4       	brge	.+10     	; 0x1962 <EEPROM_VidReadBlock+0xb2>
		__ticks = 1;
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	9e 83       	std	Y+6, r25	; 0x06
    195e:	8d 83       	std	Y+5, r24	; 0x05
    1960:	3f c0       	rjmp	.+126    	; 0x19e0 <EEPROM_VidReadBlock+0x130>
	else if (__tmp > 65535)
    1962:	6f 81       	ldd	r22, Y+7	; 0x07
    1964:	78 85       	ldd	r23, Y+8	; 0x08
    1966:	89 85       	ldd	r24, Y+9	; 0x09
    1968:	9a 85       	ldd	r25, Y+10	; 0x0a
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	3f ef       	ldi	r19, 0xFF	; 255
    196e:	4f e7       	ldi	r20, 0x7F	; 127
    1970:	57 e4       	ldi	r21, 0x47	; 71
    1972:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1976:	18 16       	cp	r1, r24
    1978:	4c f5       	brge	.+82     	; 0x19cc <EEPROM_VidReadBlock+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197a:	6b 85       	ldd	r22, Y+11	; 0x0b
    197c:	7c 85       	ldd	r23, Y+12	; 0x0c
    197e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1980:	9e 85       	ldd	r25, Y+14	; 0x0e
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e2       	ldi	r20, 0x20	; 32
    1988:	51 e4       	ldi	r21, 0x41	; 65
    198a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	bc 01       	movw	r22, r24
    1994:	cd 01       	movw	r24, r26
    1996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	9e 83       	std	Y+6, r25	; 0x06
    19a0:	8d 83       	std	Y+5, r24	; 0x05
    19a2:	0f c0       	rjmp	.+30     	; 0x19c2 <EEPROM_VidReadBlock+0x112>
    19a4:	88 ec       	ldi	r24, 0xC8	; 200
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	9c 83       	std	Y+4, r25	; 0x04
    19aa:	8b 83       	std	Y+3, r24	; 0x03
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	9c 81       	ldd	r25, Y+4	; 0x04
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <EEPROM_VidReadBlock+0x100>
    19b4:	9c 83       	std	Y+4, r25	; 0x04
    19b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ba:	9e 81       	ldd	r25, Y+6	; 0x06
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	9e 83       	std	Y+6, r25	; 0x06
    19c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c2:	8d 81       	ldd	r24, Y+5	; 0x05
    19c4:	9e 81       	ldd	r25, Y+6	; 0x06
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	69 f7       	brne	.-38     	; 0x19a4 <EEPROM_VidReadBlock+0xf4>
    19ca:	14 c0       	rjmp	.+40     	; 0x19f4 <EEPROM_VidReadBlock+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19cc:	6f 81       	ldd	r22, Y+7	; 0x07
    19ce:	78 85       	ldd	r23, Y+8	; 0x08
    19d0:	89 85       	ldd	r24, Y+9	; 0x09
    19d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	9e 83       	std	Y+6, r25	; 0x06
    19de:	8d 83       	std	Y+5, r24	; 0x05
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	9e 81       	ldd	r25, Y+6	; 0x06
    19e4:	9a 83       	std	Y+2, r25	; 0x02
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	9a 81       	ldd	r25, Y+2	; 0x02
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <EEPROM_VidReadBlock+0x13c>
    19f0:	9a 83       	std	Y+2, r25	; 0x02
    19f2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

		GlobCpy_u8ReadData[i] = EEPROM_VidRead(cpy_u8EepromAddress , i);
    19f4:	2e 89       	ldd	r18, Y+22	; 0x16
    19f6:	3f 89       	ldd	r19, Y+23	; 0x17
    19f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fa:	98 89       	ldd	r25, Y+16	; 0x10
    19fc:	89 01       	movw	r16, r18
    19fe:	08 0f       	add	r16, r24
    1a00:	19 1f       	adc	r17, r25
    1a02:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a04:	8c 89       	ldd	r24, Y+20	; 0x14
    1a06:	69 2f       	mov	r22, r25
    1a08:	0e 94 88 0b 	call	0x1710	; 0x1710 <EEPROM_VidRead>
    1a0c:	f8 01       	movw	r30, r16
    1a0e:	80 83       	st	Z, r24
		x = GlobCpy_u8ReadData[i];
    1a10:	2e 89       	ldd	r18, Y+22	; 0x16
    1a12:	3f 89       	ldd	r19, Y+23	; 0x17
    1a14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a16:	98 89       	ldd	r25, Y+16	; 0x10
    1a18:	f9 01       	movw	r30, r18
    1a1a:	e8 0f       	add	r30, r24
    1a1c:	f9 1f       	adc	r31, r25
    1a1e:	80 81       	ld	r24, Z
    1a20:	8b 8b       	std	Y+19, r24	; 0x13

	for (int i = 0 ; GlobCpy_u8ReadData[i]!='\0' ; i++){
		GlobCpy_u8ReadData[i] = 0 ;
	}

	for(u16 i = cpy_u8ByteAddress ; x != 0xff ; i++){
    1a22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a24:	98 89       	ldd	r25, Y+16	; 0x10
    1a26:	01 96       	adiw	r24, 0x01	; 1
    1a28:	98 8b       	std	Y+16, r25	; 0x10
    1a2a:	8f 87       	std	Y+15, r24	; 0x0f
    1a2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <EEPROM_VidReadBlock+0x184>
    1a32:	6e cf       	rjmp	.-292    	; 0x1910 <EEPROM_VidReadBlock+0x60>
		_delay_ms(1);

		GlobCpy_u8ReadData[i] = EEPROM_VidRead(cpy_u8EepromAddress , i);
		x = GlobCpy_u8ReadData[i];
	}
}
    1a34:	67 96       	adiw	r28, 0x17	; 23
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	08 95       	ret

00001a4a <EEPROM_VidDelete>:

/*delete memory*/
void EEPROM_VidDelete(u8 cpy_u8EepromAddress ){
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	61 97       	sbiw	r28, 0x11	; 17
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	89 8b       	std	Y+17, r24	; 0x11

	for(u16 i = 0 ; i <255 ; i++){
    1a60:	18 8a       	std	Y+16, r1	; 0x10
    1a62:	1f 86       	std	Y+15, r1	; 0x0f
    1a64:	7d c0       	rjmp	.+250    	; 0x1b60 <EEPROM_VidDelete+0x116>
		EEPROM_VidWrite( cpy_u8EepromAddress , 0x00 + i , 0xff);
    1a66:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a68:	89 89       	ldd	r24, Y+17	; 0x11
    1a6a:	69 2f       	mov	r22, r25
    1a6c:	4f ef       	ldi	r20, 0xFF	; 255
    1a6e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <EEPROM_VidWrite>
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	a0 e8       	ldi	r26, 0x80	; 128
    1a78:	bf e3       	ldi	r27, 0x3F	; 63
    1a7a:	8b 87       	std	Y+11, r24	; 0x0b
    1a7c:	9c 87       	std	Y+12, r25	; 0x0c
    1a7e:	ad 87       	std	Y+13, r26	; 0x0d
    1a80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	4a ef       	ldi	r20, 0xFA	; 250
    1a90:	54 e4       	ldi	r21, 0x44	; 68
    1a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	8f 83       	std	Y+7, r24	; 0x07
    1a9c:	98 87       	std	Y+8, r25	; 0x08
    1a9e:	a9 87       	std	Y+9, r26	; 0x09
    1aa0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa4:	78 85       	ldd	r23, Y+8	; 0x08
    1aa6:	89 85       	ldd	r24, Y+9	; 0x09
    1aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e8       	ldi	r20, 0x80	; 128
    1ab0:	5f e3       	ldi	r21, 0x3F	; 63
    1ab2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1ab6:	88 23       	and	r24, r24
    1ab8:	2c f4       	brge	.+10     	; 0x1ac4 <EEPROM_VidDelete+0x7a>
		__ticks = 1;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	9e 83       	std	Y+6, r25	; 0x06
    1ac0:	8d 83       	std	Y+5, r24	; 0x05
    1ac2:	3f c0       	rjmp	.+126    	; 0x1b42 <EEPROM_VidDelete+0xf8>
	else if (__tmp > 65535)
    1ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac6:	78 85       	ldd	r23, Y+8	; 0x08
    1ac8:	89 85       	ldd	r24, Y+9	; 0x09
    1aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	3f ef       	ldi	r19, 0xFF	; 255
    1ad0:	4f e7       	ldi	r20, 0x7F	; 127
    1ad2:	57 e4       	ldi	r21, 0x47	; 71
    1ad4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1ad8:	18 16       	cp	r1, r24
    1ada:	4c f5       	brge	.+82     	; 0x1b2e <EEPROM_VidDelete+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1adc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ade:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e2       	ldi	r20, 0x20	; 32
    1aea:	51 e4       	ldi	r21, 0x41	; 65
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	9e 83       	std	Y+6, r25	; 0x06
    1b02:	8d 83       	std	Y+5, r24	; 0x05
    1b04:	0f c0       	rjmp	.+30     	; 0x1b24 <EEPROM_VidDelete+0xda>
    1b06:	88 ec       	ldi	r24, 0xC8	; 200
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	9c 83       	std	Y+4, r25	; 0x04
    1b0c:	8b 83       	std	Y+3, r24	; 0x03
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	9c 81       	ldd	r25, Y+4	; 0x04
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <EEPROM_VidDelete+0xc8>
    1b16:	9c 83       	std	Y+4, r25	; 0x04
    1b18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	9e 83       	std	Y+6, r25	; 0x06
    1b22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b24:	8d 81       	ldd	r24, Y+5	; 0x05
    1b26:	9e 81       	ldd	r25, Y+6	; 0x06
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	69 f7       	brne	.-38     	; 0x1b06 <EEPROM_VidDelete+0xbc>
    1b2c:	14 c0       	rjmp	.+40     	; 0x1b56 <EEPROM_VidDelete+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b30:	78 85       	ldd	r23, Y+8	; 0x08
    1b32:	89 85       	ldd	r24, Y+9	; 0x09
    1b34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9e 83       	std	Y+6, r25	; 0x06
    1b40:	8d 83       	std	Y+5, r24	; 0x05
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	9e 81       	ldd	r25, Y+6	; 0x06
    1b46:	9a 83       	std	Y+2, r25	; 0x02
    1b48:	89 83       	std	Y+1, r24	; 0x01
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <EEPROM_VidDelete+0x104>
    1b52:	9a 83       	std	Y+2, r25	; 0x02
    1b54:	89 83       	std	Y+1, r24	; 0x01
}

/*delete memory*/
void EEPROM_VidDelete(u8 cpy_u8EepromAddress ){

	for(u16 i = 0 ; i <255 ; i++){
    1b56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b58:	98 89       	ldd	r25, Y+16	; 0x10
    1b5a:	01 96       	adiw	r24, 0x01	; 1
    1b5c:	98 8b       	std	Y+16, r25	; 0x10
    1b5e:	8f 87       	std	Y+15, r24	; 0x0f
    1b60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b62:	98 89       	ldd	r25, Y+16	; 0x10
    1b64:	8f 3f       	cpi	r24, 0xFF	; 255
    1b66:	91 05       	cpc	r25, r1
    1b68:	08 f4       	brcc	.+2      	; 0x1b6c <EEPROM_VidDelete+0x122>
    1b6a:	7d cf       	rjmp	.-262    	; 0x1a66 <EEPROM_VidDelete+0x1c>
		EEPROM_VidWrite( cpy_u8EepromAddress , 0x00 + i , 0xff);

		_delay_ms(1);
	}
}
    1b6c:	61 96       	adiw	r28, 0x11	; 17
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <EEPROM_VidDeleteBlock>:



void EEPROM_VidDeleteBlock(u8 cpy_u8EepromAddress , u8 cpy_u8StartAddress , u8 cpy_u8blockLength){
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	63 97       	sbiw	r28, 0x13	; 19
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	89 8b       	std	Y+17, r24	; 0x11
    1b94:	6a 8b       	std	Y+18, r22	; 0x12
    1b96:	4b 8b       	std	Y+19, r20	; 0x13

	for(u16 i = 0 ; i <cpy_u8blockLength ; i++){
    1b98:	18 8a       	std	Y+16, r1	; 0x10
    1b9a:	1f 86       	std	Y+15, r1	; 0x0f
    1b9c:	7f c0       	rjmp	.+254    	; 0x1c9c <EEPROM_VidDeleteBlock+0x11e>
		EEPROM_VidWrite( cpy_u8EepromAddress , cpy_u8StartAddress + i , 0xff);
    1b9e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ba0:	8a 89       	ldd	r24, Y+18	; 0x12
    1ba2:	98 0f       	add	r25, r24
    1ba4:	89 89       	ldd	r24, Y+17	; 0x11
    1ba6:	69 2f       	mov	r22, r25
    1ba8:	4f ef       	ldi	r20, 0xFF	; 255
    1baa:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <EEPROM_VidWrite>
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	a0 e8       	ldi	r26, 0x80	; 128
    1bb4:	bf e3       	ldi	r27, 0x3F	; 63
    1bb6:	8b 87       	std	Y+11, r24	; 0x0b
    1bb8:	9c 87       	std	Y+12, r25	; 0x0c
    1bba:	ad 87       	std	Y+13, r26	; 0x0d
    1bbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	4a ef       	ldi	r20, 0xFA	; 250
    1bcc:	54 e4       	ldi	r21, 0x44	; 68
    1bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	8f 83       	std	Y+7, r24	; 0x07
    1bd8:	98 87       	std	Y+8, r25	; 0x08
    1bda:	a9 87       	std	Y+9, r26	; 0x09
    1bdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bde:	6f 81       	ldd	r22, Y+7	; 0x07
    1be0:	78 85       	ldd	r23, Y+8	; 0x08
    1be2:	89 85       	ldd	r24, Y+9	; 0x09
    1be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e8       	ldi	r20, 0x80	; 128
    1bec:	5f e3       	ldi	r21, 0x3F	; 63
    1bee:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1bf2:	88 23       	and	r24, r24
    1bf4:	2c f4       	brge	.+10     	; 0x1c00 <EEPROM_VidDeleteBlock+0x82>
		__ticks = 1;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	9e 83       	std	Y+6, r25	; 0x06
    1bfc:	8d 83       	std	Y+5, r24	; 0x05
    1bfe:	3f c0       	rjmp	.+126    	; 0x1c7e <EEPROM_VidDeleteBlock+0x100>
	else if (__tmp > 65535)
    1c00:	6f 81       	ldd	r22, Y+7	; 0x07
    1c02:	78 85       	ldd	r23, Y+8	; 0x08
    1c04:	89 85       	ldd	r24, Y+9	; 0x09
    1c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	3f ef       	ldi	r19, 0xFF	; 255
    1c0c:	4f e7       	ldi	r20, 0x7F	; 127
    1c0e:	57 e4       	ldi	r21, 0x47	; 71
    1c10:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1c14:	18 16       	cp	r1, r24
    1c16:	4c f5       	brge	.+82     	; 0x1c6a <EEPROM_VidDeleteBlock+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e2       	ldi	r20, 0x20	; 32
    1c26:	51 e4       	ldi	r21, 0x41	; 65
    1c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	9e 83       	std	Y+6, r25	; 0x06
    1c3e:	8d 83       	std	Y+5, r24	; 0x05
    1c40:	0f c0       	rjmp	.+30     	; 0x1c60 <EEPROM_VidDeleteBlock+0xe2>
    1c42:	88 ec       	ldi	r24, 0xC8	; 200
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	9c 83       	std	Y+4, r25	; 0x04
    1c48:	8b 83       	std	Y+3, r24	; 0x03
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <EEPROM_VidDeleteBlock+0xd0>
    1c52:	9c 83       	std	Y+4, r25	; 0x04
    1c54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	9e 83       	std	Y+6, r25	; 0x06
    1c5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c60:	8d 81       	ldd	r24, Y+5	; 0x05
    1c62:	9e 81       	ldd	r25, Y+6	; 0x06
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	69 f7       	brne	.-38     	; 0x1c42 <EEPROM_VidDeleteBlock+0xc4>
    1c68:	14 c0       	rjmp	.+40     	; 0x1c92 <EEPROM_VidDeleteBlock+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6c:	78 85       	ldd	r23, Y+8	; 0x08
    1c6e:	89 85       	ldd	r24, Y+9	; 0x09
    1c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	9e 83       	std	Y+6, r25	; 0x06
    1c7c:	8d 83       	std	Y+5, r24	; 0x05
    1c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c80:	9e 81       	ldd	r25, Y+6	; 0x06
    1c82:	9a 83       	std	Y+2, r25	; 0x02
    1c84:	89 83       	std	Y+1, r24	; 0x01
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <EEPROM_VidDeleteBlock+0x10c>
    1c8e:	9a 83       	std	Y+2, r25	; 0x02
    1c90:	89 83       	std	Y+1, r24	; 0x01



void EEPROM_VidDeleteBlock(u8 cpy_u8EepromAddress , u8 cpy_u8StartAddress , u8 cpy_u8blockLength){

	for(u16 i = 0 ; i <cpy_u8blockLength ; i++){
    1c92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c94:	98 89       	ldd	r25, Y+16	; 0x10
    1c96:	01 96       	adiw	r24, 0x01	; 1
    1c98:	98 8b       	std	Y+16, r25	; 0x10
    1c9a:	8f 87       	std	Y+15, r24	; 0x0f
    1c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca4:	98 89       	ldd	r25, Y+16	; 0x10
    1ca6:	82 17       	cp	r24, r18
    1ca8:	93 07       	cpc	r25, r19
    1caa:	08 f4       	brcc	.+2      	; 0x1cae <EEPROM_VidDeleteBlock+0x130>
    1cac:	78 cf       	rjmp	.-272    	; 0x1b9e <EEPROM_VidDeleteBlock+0x20>
		EEPROM_VidWrite( cpy_u8EepromAddress , cpy_u8StartAddress + i , 0xff);

		_delay_ms(1);
	}
}
    1cae:	63 96       	adiw	r28, 0x13	; 19
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	08 95       	ret

00001cc0 <GIE_vidEnable>:
#include "GIE_Interface.h"
#include "GIE_Private.h"
#include "GIE_config.h"

void GIE_vidEnable(void)
{
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , SREG_I);
    1cc8:	af e5       	ldi	r26, 0x5F	; 95
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	ef e5       	ldi	r30, 0x5F	; 95
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	80 68       	ori	r24, 0x80	; 128
    1cd4:	8c 93       	st	X, r24
}
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <GIE_vidDisable>:

void GIE_vidDisable(void)
{
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , SREG_I);
    1ce4:	af e5       	ldi	r26, 0x5F	; 95
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	ef e5       	ldi	r30, 0x5F	; 95
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	8f 77       	andi	r24, 0x7F	; 127
    1cf0:	8c 93       	st	X, r24
}
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <TIMR_VidInit>:


                           /*************************************************************************/
                                                   /*Initial for CTC mode*/
void TIMR_VidInit(void)
{
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
	//select mode(CTC)

	CLR_BIT(TCCR0 ,TCCR0_WGM00_PIN);
    1d00:	a3 e5       	ldi	r26, 0x53	; 83
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e3 e5       	ldi	r30, 0x53	; 83
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	8f 7b       	andi	r24, 0xBF	; 191
    1d0c:	8c 93       	st	X, r24
	SET_BIT(TCCR0 ,TCCR0_WGM01_PIN)  ;
    1d0e:	a3 e5       	ldi	r26, 0x53	; 83
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e3 e5       	ldi	r30, 0x53	; 83
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	88 60       	ori	r24, 0x08	; 8
    1d1a:	8c 93       	st	X, r24

	//timer interrupt enable

	SET_BIT(TIMSK , TIMSK_OCIE0_PIN) ;
    1d1c:	a9 e5       	ldi	r26, 0x59	; 89
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e9 e5       	ldi	r30, 0x59	; 89
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	82 60       	ori	r24, 0x02	; 2
    1d28:	8c 93       	st	X, r24


	//OCR
	OCR0 =250;    	//32 count for 1 second
    1d2a:	ec e5       	ldi	r30, 0x5C	; 92
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	8a ef       	ldi	r24, 0xFA	; 250
    1d30:	80 83       	st	Z, r24


	//Set timer prescaller 1024

	SET_BIT(TCCR0 , TCCR0_CS00_PIN);
    1d32:	a3 e5       	ldi	r26, 0x53	; 83
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e3 e5       	ldi	r30, 0x53	; 83
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	81 60       	ori	r24, 0x01	; 1
    1d3e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , TCCR0_CS01_PIN)  ;
    1d40:	a3 e5       	ldi	r26, 0x53	; 83
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e3 e5       	ldi	r30, 0x53	; 83
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	8d 7f       	andi	r24, 0xFD	; 253
    1d4c:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_CS02_PIN);
    1d4e:	a3 e5       	ldi	r26, 0x53	; 83
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e3 e5       	ldi	r30, 0x53	; 83
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	84 60       	ori	r24, 0x04	; 4
    1d5a:	8c 93       	st	X, r24
}
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <TIMR0_SetCallBack>:


static void (*TIMR0_SetCallbackFunc)(void) =NULL;

void TIMR0_SetCallBack(void(*copy_Pcallback)(void))
{
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <TIMR0_SetCallBack+0x6>
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	9a 83       	std	Y+2, r25	; 0x02
    1d6e:	89 83       	std	Y+1, r24	; 0x01

	if(copy_Pcallback !=NULL)
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	9a 81       	ldd	r25, Y+2	; 0x02
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	31 f0       	breq	.+12     	; 0x1d84 <TIMR0_SetCallBack+0x22>
	{
		TIMR0_SetCallbackFunc=copy_Pcallback;
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7c:	90 93 7f 01 	sts	0x017F, r25
    1d80:	80 93 7e 01 	sts	0x017E, r24
	}
}
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <__vector_10>:


void __vector_10(void)__attribute__((signal));

void __vector_10(void)
{
    1d8e:	1f 92       	push	r1
    1d90:	0f 92       	push	r0
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	0f 92       	push	r0
    1d96:	11 24       	eor	r1, r1
    1d98:	2f 93       	push	r18
    1d9a:	3f 93       	push	r19
    1d9c:	4f 93       	push	r20
    1d9e:	5f 93       	push	r21
    1da0:	6f 93       	push	r22
    1da2:	7f 93       	push	r23
    1da4:	8f 93       	push	r24
    1da6:	9f 93       	push	r25
    1da8:	af 93       	push	r26
    1daa:	bf 93       	push	r27
    1dac:	ef 93       	push	r30
    1dae:	ff 93       	push	r31
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62

if(TIMR0_SetCallbackFunc != NULL)
    1db8:	80 91 7e 01 	lds	r24, 0x017E
    1dbc:	90 91 7f 01 	lds	r25, 0x017F
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	29 f0       	breq	.+10     	; 0x1dce <__vector_10+0x40>
	{
		TIMR0_SetCallbackFunc();
    1dc4:	e0 91 7e 01 	lds	r30, 0x017E
    1dc8:	f0 91 7f 01 	lds	r31, 0x017F
    1dcc:	09 95       	icall
	}

}
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	ff 91       	pop	r31
    1dd4:	ef 91       	pop	r30
    1dd6:	bf 91       	pop	r27
    1dd8:	af 91       	pop	r26
    1dda:	9f 91       	pop	r25
    1ddc:	8f 91       	pop	r24
    1dde:	7f 91       	pop	r23
    1de0:	6f 91       	pop	r22
    1de2:	5f 91       	pop	r21
    1de4:	4f 91       	pop	r20
    1de6:	3f 91       	pop	r19
    1de8:	2f 91       	pop	r18
    1dea:	0f 90       	pop	r0
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	0f 90       	pop	r0
    1df0:	1f 90       	pop	r1
    1df2:	18 95       	reti

00001df4 <TIMR_VidInit_FastPWM>:


                              /*************************************************************************/
                                                   /*Initial for Fast PMW mode*/

void TIMR_VidInit_FastPWM(){
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
	/* Select Fast PWM mode  */
	SET_BIT(TCCR0 ,TCCR0_WGM00_PIN);
    1dfc:	a3 e5       	ldi	r26, 0x53	; 83
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e3 e5       	ldi	r30, 0x53	; 83
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	80 64       	ori	r24, 0x40	; 64
    1e08:	8c 93       	st	X, r24
	SET_BIT(TCCR0 ,TCCR0_WGM01_PIN);
    1e0a:	a3 e5       	ldi	r26, 0x53	; 83
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e3 e5       	ldi	r30, 0x53	; 83
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	88 60       	ori	r24, 0x08	; 8
    1e16:	8c 93       	st	X, r24

	/* Interrupt Disable */
	CLR_BIT(TIMSK , TIMSK_OCIE0_PIN);
    1e18:	a9 e5       	ldi	r26, 0x59	; 89
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e9 e5       	ldi	r30, 0x59	; 89
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	8d 7f       	andi	r24, 0xFD	; 253
    1e24:	8c 93       	st	X, r24

	/* Select inverted or non_inverted mode */
	SET_BIT(TCCR0 , TCCR0_COM01_PIN);
    1e26:	a3 e5       	ldi	r26, 0x53	; 83
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e3 e5       	ldi	r30, 0x53	; 83
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	80 62       	ori	r24, 0x20	; 32
    1e32:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , TCCR0_COM00_PIN);						/*Set in Top , Clear in Compare*/
    1e34:	a3 e5       	ldi	r26, 0x53	; 83
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e3 e5       	ldi	r30, 0x53	; 83
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	8f 7e       	andi	r24, 0xEF	; 239
    1e40:	8c 93       	st	X, r24

	/*Select the Prescaller*/
	SET_BIT(TCCR0 , TCCR0_CS00_PIN);
    1e42:	a3 e5       	ldi	r26, 0x53	; 83
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e3 e5       	ldi	r30, 0x53	; 83
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	81 60       	ori	r24, 0x01	; 1
    1e4e:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_CS01_PIN);               			 /*The prescaller is CK/64*/
    1e50:	a3 e5       	ldi	r26, 0x53	; 83
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e3 e5       	ldi	r30, 0x53	; 83
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	82 60       	ori	r24, 0x02	; 2
    1e5c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , TCCR0_CS02_PIN);
    1e5e:	a3 e5       	ldi	r26, 0x53	; 83
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e3 e5       	ldi	r30, 0x53	; 83
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	8b 7f       	andi	r24, 0xFB	; 251
    1e6a:	8c 93       	st	X, r24


}
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <TIMR_VidSetCompareMatch>:

void TIMR_VidSetCompareMatch(u8 Copy_vidDuty){
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	0f 92       	push	r0
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = Copy_vidDuty;
    1e7e:	ec e5       	ldi	r30, 0x5C	; 92
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	80 83       	st	Z, r24

}
    1e86:	0f 90       	pop	r0
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <TIMR_VidInit_PhaseCorrectPWM>:

                                           /*************************************************************************/
                                                              /*Initial for Phase Correct PMW mode*/

void TIMR_VidInit_PhaseCorrectPWM(){
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
	/* Select Phase Correct pwm mode  */
	SET_BIT(TCCR0 ,TCCR0_WGM00_PIN);
    1e96:	a3 e5       	ldi	r26, 0x53	; 83
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e3 e5       	ldi	r30, 0x53	; 83
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	80 64       	ori	r24, 0x40	; 64
    1ea2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 ,TCCR0_WGM01_PIN);
    1ea4:	a3 e5       	ldi	r26, 0x53	; 83
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e3 e5       	ldi	r30, 0x53	; 83
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	87 7f       	andi	r24, 0xF7	; 247
    1eb0:	8c 93       	st	X, r24

	/* Interrupt Disable */
	CLR_BIT(TIMSK , TIMSK_OCIE0_PIN);
    1eb2:	a9 e5       	ldi	r26, 0x59	; 89
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e9 e5       	ldi	r30, 0x59	; 89
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	8d 7f       	andi	r24, 0xFD	; 253
    1ebe:	8c 93       	st	X, r24

	/* Select Compare Output Mode */
	SET_BIT(TCCR0 , TCCR0_COM01_PIN);
    1ec0:	a3 e5       	ldi	r26, 0x53	; 83
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e3 e5       	ldi	r30, 0x53	; 83
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	80 62       	ori	r24, 0x20	; 32
    1ecc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , TCCR0_COM00_PIN);							/*Set in downcounting , Clear in up-counting*/
    1ece:	a3 e5       	ldi	r26, 0x53	; 83
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e3 e5       	ldi	r30, 0x53	; 83
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	8f 7e       	andi	r24, 0xEF	; 239
    1eda:	8c 93       	st	X, r24

	/*Select the Prescaller*/
	SET_BIT(TCCR0 , TCCR0_CS00_PIN);
    1edc:	a3 e5       	ldi	r26, 0x53	; 83
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e3 e5       	ldi	r30, 0x53	; 83
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	81 60       	ori	r24, 0x01	; 1
    1ee8:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_CS01_PIN);                			/*The prescaller is CK/64*/
    1eea:	a3 e5       	ldi	r26, 0x53	; 83
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e3 e5       	ldi	r30, 0x53	; 83
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	82 60       	ori	r24, 0x02	; 2
    1ef6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , TCCR0_CS02_PIN);
    1ef8:	a3 e5       	ldi	r26, 0x53	; 83
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e3 e5       	ldi	r30, 0x53	; 83
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	8b 7f       	andi	r24, 0xFB	; 251
    1f04:	8c 93       	st	X, r24


}
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <TIMR1_VidInit>:


                                            /*************************************************************************/
																		/*Initial for Timer 1*/
void TIMR1_VidInit(){
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62

		//set fast PWM non _inverting
	SET_BIT(TCCR1A ,TCCR0_COM1A1_PIN);
    1f14:	af e4       	ldi	r26, 0x4F	; 79
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	ef e4       	ldi	r30, 0x4F	; 79
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	80 68       	ori	r24, 0x80	; 128
    1f20:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A ,TCCR0_COM1A0_PIN);
    1f22:	af e4       	ldi	r26, 0x4F	; 79
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	ef e4       	ldi	r30, 0x4F	; 79
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	8f 7b       	andi	r24, 0xBF	; 191
    1f2e:	8c 93       	st	X, r24

	//select wave generation mode
	CLR_BIT(TCCR1A ,TCCR0_WGM10_PIN);
    1f30:	af e4       	ldi	r26, 0x4F	; 79
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	ef e4       	ldi	r30, 0x4F	; 79
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	8e 7f       	andi	r24, 0xFE	; 254
    1f3c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A ,TCCR0_WGM11_PIN);
    1f3e:	af e4       	ldi	r26, 0x4F	; 79
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	ef e4       	ldi	r30, 0x4F	; 79
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	82 60       	ori	r24, 0x02	; 2
    1f4a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B ,TCCR0_WGM12_PIN);
    1f4c:	ae e4       	ldi	r26, 0x4E	; 78
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	ee e4       	ldi	r30, 0x4E	; 78
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	88 60       	ori	r24, 0x08	; 8
    1f58:	8c 93       	st	X, r24
	SET_BIT(TCCR1B ,TCCR0_WGM13_PIN);
    1f5a:	ae e4       	ldi	r26, 0x4E	; 78
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	ee e4       	ldi	r30, 0x4E	; 78
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	80 61       	ori	r24, 0x10	; 16
    1f66:	8c 93       	st	X, r24

	//Select Prescaller  8
	CLR_BIT(TCCR1B ,TCCR0_CS10_PIN);
    1f68:	ae e4       	ldi	r26, 0x4E	; 78
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	ee e4       	ldi	r30, 0x4E	; 78
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	8e 7f       	andi	r24, 0xFE	; 254
    1f74:	8c 93       	st	X, r24
	SET_BIT(TCCR1B ,TCCR0_CS11_PIN);
    1f76:	ae e4       	ldi	r26, 0x4E	; 78
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	ee e4       	ldi	r30, 0x4E	; 78
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	82 60       	ori	r24, 0x02	; 2
    1f82:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B ,TCCR0_CS12_PIN);
    1f84:	ae e4       	ldi	r26, 0x4E	; 78
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	ee e4       	ldi	r30, 0x4E	; 78
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	8b 7f       	andi	r24, 0xFB	; 251
    1f90:	8c 93       	st	X, r24

}
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <TIMR_VidSetICR>:

void TIMR_VidSetICR(u16 Copy_u16TOP){
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <TIMR_VidSetICR+0x6>
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	9a 83       	std	Y+2, r25	; 0x02
    1fa4:	89 83       	std	Y+1, r24	; 0x01
	ICR1L = Copy_u16TOP;
    1fa6:	e6 e4       	ldi	r30, 0x46	; 70
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	9a 81       	ldd	r25, Y+2	; 0x02
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	80 83       	st	Z, r24
}
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	08 95       	ret

00001fbc <TIMR_VidSetOCR>:

void TIMR_VidSetOCR(u16 Copy_u16OCR){
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <TIMR_VidSetOCR+0x6>
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	9a 83       	std	Y+2, r25	; 0x02
    1fc8:	89 83       	std	Y+1, r24	; 0x01

	OCR1AL = Copy_u16OCR;
    1fca:	ea e4       	ldi	r30, 0x4A	; 74
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	91 83       	std	Z+1, r25	; 0x01
    1fd4:	80 83       	st	Z, r24

}
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	08 95       	ret

00001fe0 <TWI_VidInitMaster>:
#include "Lib/STD_TYPES.h"
#include "Lib/BIT_MATH.h"
#include "TWI_private.h"


void TWI_VidInitMaster(u8 cpy_u8Address){
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	0f 92       	push	r0
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	89 83       	std	Y+1, r24	; 0x01

	/*freq = 400 kbps*/
	TWBR = 2 ;
    1fec:	e0 e2       	ldi	r30, 0x20	; 32
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	82 e0       	ldi	r24, 0x02	; 2
    1ff2:	80 83       	st	Z, r24
	CLR_BIT(TWSR , TWSR_TWPS0);
    1ff4:	a1 e2       	ldi	r26, 0x21	; 33
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e1 e2       	ldi	r30, 0x21	; 33
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	8e 7f       	andi	r24, 0xFE	; 254
    2000:	8c 93       	st	X, r24
	CLR_BIT(TWSR , TWSR_TWPS1);
    2002:	a1 e2       	ldi	r26, 0x21	; 33
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e1 e2       	ldi	r30, 0x21	; 33
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	8d 7f       	andi	r24, 0xFD	; 253
    200e:	8c 93       	st	X, r24

	/*Assign address*/
	if(cpy_u8Address > 0){
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	88 23       	and	r24, r24
    2014:	29 f0       	breq	.+10     	; 0x2020 <TWI_VidInitMaster+0x40>
		TWAR = (cpy_u8Address<<1);
    2016:	e2 e2       	ldi	r30, 0x22	; 34
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	88 0f       	add	r24, r24
    201e:	80 83       	st	Z, r24
	}

	/*enable TWI*/
	SET_BIT(TWCR , TWCR_TWEN);
    2020:	a6 e5       	ldi	r26, 0x56	; 86
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e6 e5       	ldi	r30, 0x56	; 86
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	84 60       	ori	r24, 0x04	; 4
    202c:	8c 93       	st	X, r24
}
    202e:	0f 90       	pop	r0
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <TWI_VidInitSlave>:

void TWI_VidInitSlave(u8 cpy_u8Address){
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	0f 92       	push	r0
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	89 83       	std	Y+1, r24	; 0x01

	/*Assign address*/
	if(cpy_u8Address > 0){
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	88 23       	and	r24, r24
    2046:	29 f0       	breq	.+10     	; 0x2052 <TWI_VidInitSlave+0x1c>
		TWAR = (cpy_u8Address << 1);
    2048:	e2 e2       	ldi	r30, 0x22	; 34
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	88 0f       	add	r24, r24
    2050:	80 83       	st	Z, r24
	}

	/*enable TWI*/
	SET_BIT(TWCR , TWCR_TWEN);
    2052:	a6 e5       	ldi	r26, 0x56	; 86
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e6 e5       	ldi	r30, 0x56	; 86
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	84 60       	ori	r24, 0x04	; 4
    205e:	8c 93       	st	X, r24
}
    2060:	0f 90       	pop	r0
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	08 95       	ret

00002068 <TWI_SendStartCondition>:

void TWI_SendStartCondition(void){
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
	/*set start condition*/
	SET_BIT(TWCR , TWCR_TWSTA);
    2070:	a6 e5       	ldi	r26, 0x56	; 86
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	e6 e5       	ldi	r30, 0x56	; 86
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	80 62       	ori	r24, 0x20	; 32
    207c:	8c 93       	st	X, r24

	/*start after clearing the flag*/
	SET_BIT(TWCR , TWCR_TWINT);
    207e:	a6 e5       	ldi	r26, 0x56	; 86
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e6 e5       	ldi	r30, 0x56	; 86
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	80 68       	ori	r24, 0x80	; 128
    208a:	8c 93       	st	X, r24

	/*wait till job is complete */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    208c:	e6 e5       	ldi	r30, 0x56	; 86
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	88 23       	and	r24, r24
    2094:	dc f7       	brge	.-10     	; 0x208c <TWI_SendStartCondition+0x24>

	/*chick if correct*/
}
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <TWI_MasterSendAddress>:

void TWI_MasterSendAddress( u8 cpy_u8Address , u8 cpy_u8Operation){
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <TWI_MasterSendAddress+0x6>
    20a2:	0f 92       	push	r0
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	8a 83       	std	Y+2, r24	; 0x02
    20aa:	6b 83       	std	Y+3, r22	; 0x03

	u8 local_u8Address;

	/*set address*/
	local_u8Address = (cpy_u8Address<<1) | cpy_u8Operation ;
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	88 2f       	mov	r24, r24
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	98 2f       	mov	r25, r24
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	89 2b       	or	r24, r25
    20bc:	89 83       	std	Y+1, r24	; 0x01
	TWDR = local_u8Address;
    20be:	e3 e2       	ldi	r30, 0x23	; 35
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	80 83       	st	Z, r24

	/*clear */
	CLR_BIT(TWCR , TWCR_TWSTA);
    20c6:	a6 e5       	ldi	r26, 0x56	; 86
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e6 e5       	ldi	r30, 0x56	; 86
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	8f 7d       	andi	r24, 0xDF	; 223
    20d2:	8c 93       	st	X, r24

	/*start after clearing the flag*/
	SET_BIT(TWCR , TWCR_TWINT);
    20d4:	a6 e5       	ldi	r26, 0x56	; 86
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e6 e5       	ldi	r30, 0x56	; 86
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	80 68       	ori	r24, 0x80	; 128
    20e0:	8c 93       	st	X, r24

	/*wait till job is complete */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    20e2:	e6 e5       	ldi	r30, 0x56	; 86
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	88 23       	and	r24, r24
    20ea:	dc f7       	brge	.-10     	; 0x20e2 <TWI_MasterSendAddress+0x46>
}
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <TWI_MasterSendData>:

void TWI_MasterSendData( u8 cpy_u8Data ){
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	0f 92       	push	r0
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	89 83       	std	Y+1, r24	; 0x01

	/*write data*/
	TWDR = cpy_u8Data ;
    2104:	e3 e2       	ldi	r30, 0x23	; 35
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	80 83       	st	Z, r24

	/*start after clearing the flag*/
	SET_BIT(TWCR , TWCR_TWINT);
    210c:	a6 e5       	ldi	r26, 0x56	; 86
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e6 e5       	ldi	r30, 0x56	; 86
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	80 68       	ori	r24, 0x80	; 128
    2118:	8c 93       	st	X, r24

	/*wait till job is complete */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    211a:	e6 e5       	ldi	r30, 0x56	; 86
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	88 23       	and	r24, r24
    2122:	dc f7       	brge	.-10     	; 0x211a <TWI_MasterSendData+0x22>
}
    2124:	0f 90       	pop	r0
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <TWI_MasterReadData>:

u8 TWI_MasterReadData(void){
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62

	/*start after clearing the flag*/
	SET_BIT(TWCR , TWCR_TWINT);
    2134:	a6 e5       	ldi	r26, 0x56	; 86
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e6 e5       	ldi	r30, 0x56	; 86
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	80 68       	ori	r24, 0x80	; 128
    2140:	8c 93       	st	X, r24

	/*wait till job is complete */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    2142:	e6 e5       	ldi	r30, 0x56	; 86
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	88 23       	and	r24, r24
    214a:	dc f7       	brge	.-10     	; 0x2142 <TWI_MasterReadData+0x16>

	/*read data*/
	return TWDR ;
    214c:	e3 e2       	ldi	r30, 0x23	; 35
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
}
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <TWI_SendStopCondition>:


void TWI_SendStopCondition(void){
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62

	/*stop indicate*/
	SET_BIT(TWCR , TWCR_TWSTO);
    2160:	a6 e5       	ldi	r26, 0x56	; 86
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e6 e5       	ldi	r30, 0x56	; 86
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	80 61       	ori	r24, 0x10	; 16
    216c:	8c 93       	st	X, r24

	/*start after clearing the flag*/
	SET_BIT(TWCR , TWCR_TWINT);
    216e:	a6 e5       	ldi	r26, 0x56	; 86
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e6 e5       	ldi	r30, 0x56	; 86
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	80 68       	ori	r24, 0x80	; 128
    217a:	8c 93       	st	X, r24
}
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <UART_VidInit>:
#include "util/delay.h"




void UART_VidInit(void){
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	0f 92       	push	r0
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
	u8 UCSRC_temp = 0;
    218c:	19 82       	std	Y+1, r1	; 0x01
	/*UCSRB*/
	SET_BIT(UCSRB , UCSRB_RXEN);
    218e:	aa e2       	ldi	r26, 0x2A	; 42
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	ea e2       	ldi	r30, 0x2A	; 42
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	80 61       	ori	r24, 0x10	; 16
    219a:	8c 93       	st	X, r24
	SET_BIT(UCSRB , UCSRB_TXEN);
    219c:	aa e2       	ldi	r26, 0x2A	; 42
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	ea e2       	ldi	r30, 0x2A	; 42
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	88 60       	ori	r24, 0x08	; 8
    21a8:	8c 93       	st	X, r24

	/*UCSRC*/
	SET_BIT(UCSRC_temp , UCSRC_URSEL);
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	80 68       	ori	r24, 0x80	; 128
    21ae:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_temp , UCSRC_UCSZ0);
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	82 60       	ori	r24, 0x02	; 2
    21b4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_temp , UCSRC_UCSZ1);
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	84 60       	ori	r24, 0x04	; 4
    21ba:	89 83       	std	Y+1, r24	; 0x01

	UCSRC = UCSRC_temp;
    21bc:	e0 e4       	ldi	r30, 0x40	; 64
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	80 83       	st	Z, r24
	/*BR = 9600*/
	UBRRL = 51;
    21c4:	e9 e2       	ldi	r30, 0x29	; 41
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	83 e3       	ldi	r24, 0x33	; 51
    21ca:	80 83       	st	Z, r24
}
    21cc:	0f 90       	pop	r0
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <UART_VidSend>:


void UART_VidSend(u8 cpy_data){
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	0f 92       	push	r0
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA , UCSRA_UDRE) == 0);
    21e0:	eb e2       	ldi	r30, 0x2B	; 43
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	82 95       	swap	r24
    21e8:	86 95       	lsr	r24
    21ea:	87 70       	andi	r24, 0x07	; 7
    21ec:	88 2f       	mov	r24, r24
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	81 70       	andi	r24, 0x01	; 1
    21f2:	90 70       	andi	r25, 0x00	; 0
    21f4:	00 97       	sbiw	r24, 0x00	; 0
    21f6:	a1 f3       	breq	.-24     	; 0x21e0 <UART_VidSend+0xc>
		UDR = cpy_data;
    21f8:	ec e2       	ldi	r30, 0x2C	; 44
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	80 83       	st	Z, r24
}
    2200:	0f 90       	pop	r0
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	08 95       	ret

00002208 <UART_VidRec>:

u8 UART_VidRec(void){
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA , UCSRA_RXC) == 0);
    2210:	eb e2       	ldi	r30, 0x2B	; 43
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	88 23       	and	r24, r24
    2218:	dc f7       	brge	.-10     	; 0x2210 <UART_VidRec+0x8>
		return UDR;
    221a:	ec e2       	ldi	r30, 0x2C	; 44
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
}
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <UART_VidRec_INT>:


void UART_VidRec_INT(u8 cpy_u8State){
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	0f 92       	push	r0
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	89 83       	std	Y+1, r24	; 0x01
	if(cpy_u8State == enable){
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	81 30       	cpi	r24, 0x01	; 1
    2236:	41 f4       	brne	.+16     	; 0x2248 <UART_VidRec_INT+0x22>
		SET_BIT(UCSRB , UCSRB_RXCIE);
    2238:	aa e2       	ldi	r26, 0x2A	; 42
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	ea e2       	ldi	r30, 0x2A	; 42
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	80 68       	ori	r24, 0x80	; 128
    2244:	8c 93       	st	X, r24
    2246:	0a c0       	rjmp	.+20     	; 0x225c <UART_VidRec_INT+0x36>
	}

	else if(cpy_u8State == disable){
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	88 23       	and	r24, r24
    224c:	39 f4       	brne	.+14     	; 0x225c <UART_VidRec_INT+0x36>
		CLR_BIT(UCSRB , UCSRB_RXCIE);
    224e:	aa e2       	ldi	r26, 0x2A	; 42
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	ea e2       	ldi	r30, 0x2A	; 42
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	8f 77       	andi	r24, 0x7F	; 127
    225a:	8c 93       	st	X, r24
	}
}
    225c:	0f 90       	pop	r0
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <UART_SetCallBack>:

u8 *UART_DataPtr = NULL;

static void (*UART_SetCallBackFunc)(void) = NULL ;

void UART_SetCallBack(void(*Copy_pCallBackFunction)(void) , u8 *Cpy_DataPtr){
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	00 d0       	rcall	.+0      	; 0x226a <UART_SetCallBack+0x6>
    226a:	00 d0       	rcall	.+0      	; 0x226c <UART_SetCallBack+0x8>
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	9a 83       	std	Y+2, r25	; 0x02
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	7c 83       	std	Y+4, r23	; 0x04
    2276:	6b 83       	std	Y+3, r22	; 0x03

	if(Copy_pCallBackFunction != NULL){
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	9a 81       	ldd	r25, Y+2	; 0x02
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	61 f0       	breq	.+24     	; 0x2298 <UART_SetCallBack+0x34>

		UART_SetCallBackFunc = Copy_pCallBackFunction;
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	9a 81       	ldd	r25, Y+2	; 0x02
    2284:	90 93 83 01 	sts	0x0183, r25
    2288:	80 93 82 01 	sts	0x0182, r24
		UART_DataPtr = Cpy_DataPtr;
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	90 93 81 01 	sts	0x0181, r25
    2294:	80 93 80 01 	sts	0x0180, r24
	}
}
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	08 95       	ret

000022a6 <__vector_13>:

void __vector_13(void) __attribute__((signal));

void __vector_13(void){
    22a6:	1f 92       	push	r1
    22a8:	0f 92       	push	r0
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	0f 92       	push	r0
    22ae:	11 24       	eor	r1, r1
    22b0:	2f 93       	push	r18
    22b2:	3f 93       	push	r19
    22b4:	4f 93       	push	r20
    22b6:	5f 93       	push	r21
    22b8:	6f 93       	push	r22
    22ba:	7f 93       	push	r23
    22bc:	8f 93       	push	r24
    22be:	9f 93       	push	r25
    22c0:	af 93       	push	r26
    22c2:	bf 93       	push	r27
    22c4:	ef 93       	push	r30
    22c6:	ff 93       	push	r31
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62

	if(UART_SetCallBackFunc != NULL){
    22d0:	80 91 82 01 	lds	r24, 0x0182
    22d4:	90 91 83 01 	lds	r25, 0x0183
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	69 f0       	breq	.+26     	; 0x22f6 <__vector_13+0x50>

		*UART_DataPtr = UDR;
    22dc:	a0 91 80 01 	lds	r26, 0x0180
    22e0:	b0 91 81 01 	lds	r27, 0x0181
    22e4:	ec e2       	ldi	r30, 0x2C	; 44
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	8c 93       	st	X, r24
		UART_SetCallBackFunc();
    22ec:	e0 91 82 01 	lds	r30, 0x0182
    22f0:	f0 91 83 01 	lds	r31, 0x0183
    22f4:	09 95       	icall
	}
}
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	ff 91       	pop	r31
    22fc:	ef 91       	pop	r30
    22fe:	bf 91       	pop	r27
    2300:	af 91       	pop	r26
    2302:	9f 91       	pop	r25
    2304:	8f 91       	pop	r24
    2306:	7f 91       	pop	r23
    2308:	6f 91       	pop	r22
    230a:	5f 91       	pop	r21
    230c:	4f 91       	pop	r20
    230e:	3f 91       	pop	r19
    2310:	2f 91       	pop	r18
    2312:	0f 90       	pop	r0
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	0f 90       	pop	r0
    2318:	1f 90       	pop	r1
    231a:	18 95       	reti

0000231c <UART_VidSendString>:



void UART_VidSendString(const char* Copy_pcString ) {
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	00 d0       	rcall	.+0      	; 0x2322 <UART_VidSendString+0x6>
    2322:	00 d0       	rcall	.+0      	; 0x2324 <UART_VidSendString+0x8>
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	9c 83       	std	Y+4, r25	; 0x04
    232a:	8b 83       	std	Y+3, r24	; 0x03


	for (int i = 0 ; Copy_pcString[i]!='\0' ; i++){
    232c:	1a 82       	std	Y+2, r1	; 0x02
    232e:	19 82       	std	Y+1, r1	; 0x01
    2330:	0f c0       	rjmp	.+30     	; 0x2350 <UART_VidSendString+0x34>

		UART_VidSend(Copy_pcString[i]) ;
    2332:	29 81       	ldd	r18, Y+1	; 0x01
    2334:	3a 81       	ldd	r19, Y+2	; 0x02
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	9c 81       	ldd	r25, Y+4	; 0x04
    233a:	fc 01       	movw	r30, r24
    233c:	e2 0f       	add	r30, r18
    233e:	f3 1f       	adc	r31, r19
    2340:	80 81       	ld	r24, Z
    2342:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <UART_VidSend>


void UART_VidSendString(const char* Copy_pcString ) {


	for (int i = 0 ; Copy_pcString[i]!='\0' ; i++){
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	9a 81       	ldd	r25, Y+2	; 0x02
    234a:	01 96       	adiw	r24, 0x01	; 1
    234c:	9a 83       	std	Y+2, r25	; 0x02
    234e:	89 83       	std	Y+1, r24	; 0x01
    2350:	29 81       	ldd	r18, Y+1	; 0x01
    2352:	3a 81       	ldd	r19, Y+2	; 0x02
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	9c 81       	ldd	r25, Y+4	; 0x04
    2358:	fc 01       	movw	r30, r24
    235a:	e2 0f       	add	r30, r18
    235c:	f3 1f       	adc	r31, r19
    235e:	80 81       	ld	r24, Z
    2360:	88 23       	and	r24, r24
    2362:	39 f7       	brne	.-50     	; 0x2332 <UART_VidSendString+0x16>

		UART_VidSend(Copy_pcString[i]) ;
	}
}
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <UART_VidReceiveString>:


void UART_VidReceiveString(char* Copy_pcString ) {
    2372:	0f 93       	push	r16
    2374:	1f 93       	push	r17
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
    237e:	65 97       	sbiw	r28, 0x15	; 21
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	9d 8b       	std	Y+21, r25	; 0x15
    238c:	8c 8b       	std	Y+20, r24	; 0x14
	u8 x;
	for (int i = 0 ; Copy_pcString[i]!='\0' ; i++){
    238e:	1a 8a       	std	Y+18, r1	; 0x12
    2390:	19 8a       	std	Y+17, r1	; 0x11
    2392:	0d c0       	rjmp	.+26     	; 0x23ae <UART_VidReceiveString+0x3c>

		Copy_pcString[i] = 0 ;
    2394:	29 89       	ldd	r18, Y+17	; 0x11
    2396:	3a 89       	ldd	r19, Y+18	; 0x12
    2398:	8c 89       	ldd	r24, Y+20	; 0x14
    239a:	9d 89       	ldd	r25, Y+21	; 0x15
    239c:	fc 01       	movw	r30, r24
    239e:	e2 0f       	add	r30, r18
    23a0:	f3 1f       	adc	r31, r19
    23a2:	10 82       	st	Z, r1
}


void UART_VidReceiveString(char* Copy_pcString ) {
	u8 x;
	for (int i = 0 ; Copy_pcString[i]!='\0' ; i++){
    23a4:	89 89       	ldd	r24, Y+17	; 0x11
    23a6:	9a 89       	ldd	r25, Y+18	; 0x12
    23a8:	01 96       	adiw	r24, 0x01	; 1
    23aa:	9a 8b       	std	Y+18, r25	; 0x12
    23ac:	89 8b       	std	Y+17, r24	; 0x11
    23ae:	29 89       	ldd	r18, Y+17	; 0x11
    23b0:	3a 89       	ldd	r19, Y+18	; 0x12
    23b2:	8c 89       	ldd	r24, Y+20	; 0x14
    23b4:	9d 89       	ldd	r25, Y+21	; 0x15
    23b6:	fc 01       	movw	r30, r24
    23b8:	e2 0f       	add	r30, r18
    23ba:	f3 1f       	adc	r31, r19
    23bc:	80 81       	ld	r24, Z
    23be:	88 23       	and	r24, r24
    23c0:	49 f7       	brne	.-46     	; 0x2394 <UART_VidReceiveString+0x22>

		Copy_pcString[i] = 0 ;
	}

	for (int i = 0 ; x != '\r' ; i++){
    23c2:	18 8a       	std	Y+16, r1	; 0x10
    23c4:	1f 86       	std	Y+15, r1	; 0x0f
    23c6:	8b c0       	rjmp	.+278    	; 0x24de <UART_VidReceiveString+0x16c>

		Copy_pcString[i] = UART_VidRec();
    23c8:	2f 85       	ldd	r18, Y+15	; 0x0f
    23ca:	38 89       	ldd	r19, Y+16	; 0x10
    23cc:	8c 89       	ldd	r24, Y+20	; 0x14
    23ce:	9d 89       	ldd	r25, Y+21	; 0x15
    23d0:	8c 01       	movw	r16, r24
    23d2:	02 0f       	add	r16, r18
    23d4:	13 1f       	adc	r17, r19
    23d6:	0e 94 04 11 	call	0x2208	; 0x2208 <UART_VidRec>
    23da:	f8 01       	movw	r30, r16
    23dc:	80 83       	st	Z, r24
		x = Copy_pcString[i];
    23de:	2f 85       	ldd	r18, Y+15	; 0x0f
    23e0:	38 89       	ldd	r19, Y+16	; 0x10
    23e2:	8c 89       	ldd	r24, Y+20	; 0x14
    23e4:	9d 89       	ldd	r25, Y+21	; 0x15
    23e6:	fc 01       	movw	r30, r24
    23e8:	e2 0f       	add	r30, r18
    23ea:	f3 1f       	adc	r31, r19
    23ec:	80 81       	ld	r24, Z
    23ee:	8b 8b       	std	Y+19, r24	; 0x13
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	a0 e4       	ldi	r26, 0x40	; 64
    23f6:	b0 e4       	ldi	r27, 0x40	; 64
    23f8:	8b 87       	std	Y+11, r24	; 0x0b
    23fa:	9c 87       	std	Y+12, r25	; 0x0c
    23fc:	ad 87       	std	Y+13, r26	; 0x0d
    23fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2400:	6b 85       	ldd	r22, Y+11	; 0x0b
    2402:	7c 85       	ldd	r23, Y+12	; 0x0c
    2404:	8d 85       	ldd	r24, Y+13	; 0x0d
    2406:	9e 85       	ldd	r25, Y+14	; 0x0e
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	4a ef       	ldi	r20, 0xFA	; 250
    240e:	54 e4       	ldi	r21, 0x44	; 68
    2410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	8f 83       	std	Y+7, r24	; 0x07
    241a:	98 87       	std	Y+8, r25	; 0x08
    241c:	a9 87       	std	Y+9, r26	; 0x09
    241e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2420:	6f 81       	ldd	r22, Y+7	; 0x07
    2422:	78 85       	ldd	r23, Y+8	; 0x08
    2424:	89 85       	ldd	r24, Y+9	; 0x09
    2426:	9a 85       	ldd	r25, Y+10	; 0x0a
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e8       	ldi	r20, 0x80	; 128
    242e:	5f e3       	ldi	r21, 0x3F	; 63
    2430:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2434:	88 23       	and	r24, r24
    2436:	2c f4       	brge	.+10     	; 0x2442 <UART_VidReceiveString+0xd0>
		__ticks = 1;
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	9e 83       	std	Y+6, r25	; 0x06
    243e:	8d 83       	std	Y+5, r24	; 0x05
    2440:	3f c0       	rjmp	.+126    	; 0x24c0 <UART_VidReceiveString+0x14e>
	else if (__tmp > 65535)
    2442:	6f 81       	ldd	r22, Y+7	; 0x07
    2444:	78 85       	ldd	r23, Y+8	; 0x08
    2446:	89 85       	ldd	r24, Y+9	; 0x09
    2448:	9a 85       	ldd	r25, Y+10	; 0x0a
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	3f ef       	ldi	r19, 0xFF	; 255
    244e:	4f e7       	ldi	r20, 0x7F	; 127
    2450:	57 e4       	ldi	r21, 0x47	; 71
    2452:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2456:	18 16       	cp	r1, r24
    2458:	4c f5       	brge	.+82     	; 0x24ac <UART_VidReceiveString+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245a:	6b 85       	ldd	r22, Y+11	; 0x0b
    245c:	7c 85       	ldd	r23, Y+12	; 0x0c
    245e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2460:	9e 85       	ldd	r25, Y+14	; 0x0e
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e2       	ldi	r20, 0x20	; 32
    2468:	51 e4       	ldi	r21, 0x41	; 65
    246a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	bc 01       	movw	r22, r24
    2474:	cd 01       	movw	r24, r26
    2476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	9e 83       	std	Y+6, r25	; 0x06
    2480:	8d 83       	std	Y+5, r24	; 0x05
    2482:	0f c0       	rjmp	.+30     	; 0x24a2 <UART_VidReceiveString+0x130>
    2484:	88 ec       	ldi	r24, 0xC8	; 200
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	9c 83       	std	Y+4, r25	; 0x04
    248a:	8b 83       	std	Y+3, r24	; 0x03
    248c:	8b 81       	ldd	r24, Y+3	; 0x03
    248e:	9c 81       	ldd	r25, Y+4	; 0x04
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	f1 f7       	brne	.-4      	; 0x2490 <UART_VidReceiveString+0x11e>
    2494:	9c 83       	std	Y+4, r25	; 0x04
    2496:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2498:	8d 81       	ldd	r24, Y+5	; 0x05
    249a:	9e 81       	ldd	r25, Y+6	; 0x06
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	9e 83       	std	Y+6, r25	; 0x06
    24a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a2:	8d 81       	ldd	r24, Y+5	; 0x05
    24a4:	9e 81       	ldd	r25, Y+6	; 0x06
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	69 f7       	brne	.-38     	; 0x2484 <UART_VidReceiveString+0x112>
    24aa:	14 c0       	rjmp	.+40     	; 0x24d4 <UART_VidReceiveString+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ac:	6f 81       	ldd	r22, Y+7	; 0x07
    24ae:	78 85       	ldd	r23, Y+8	; 0x08
    24b0:	89 85       	ldd	r24, Y+9	; 0x09
    24b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	9e 83       	std	Y+6, r25	; 0x06
    24be:	8d 83       	std	Y+5, r24	; 0x05
    24c0:	8d 81       	ldd	r24, Y+5	; 0x05
    24c2:	9e 81       	ldd	r25, Y+6	; 0x06
    24c4:	9a 83       	std	Y+2, r25	; 0x02
    24c6:	89 83       	std	Y+1, r24	; 0x01
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	9a 81       	ldd	r25, Y+2	; 0x02
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	f1 f7       	brne	.-4      	; 0x24cc <UART_VidReceiveString+0x15a>
    24d0:	9a 83       	std	Y+2, r25	; 0x02
    24d2:	89 83       	std	Y+1, r24	; 0x01
	for (int i = 0 ; Copy_pcString[i]!='\0' ; i++){

		Copy_pcString[i] = 0 ;
	}

	for (int i = 0 ; x != '\r' ; i++){
    24d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24d6:	98 89       	ldd	r25, Y+16	; 0x10
    24d8:	01 96       	adiw	r24, 0x01	; 1
    24da:	98 8b       	std	Y+16, r25	; 0x10
    24dc:	8f 87       	std	Y+15, r24	; 0x0f
    24de:	8b 89       	ldd	r24, Y+19	; 0x13
    24e0:	8d 30       	cpi	r24, 0x0D	; 13
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <UART_VidReceiveString+0x174>
    24e4:	71 cf       	rjmp	.-286    	; 0x23c8 <UART_VidReceiveString+0x56>
		Copy_pcString[i] = UART_VidRec();
		x = Copy_pcString[i];
		_delay_ms(3);
	}

}
    24e6:	65 96       	adiw	r28, 0x15	; 21
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	f8 94       	cli
    24ec:	de bf       	out	0x3e, r29	; 62
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	cd bf       	out	0x3d, r28	; 61
    24f2:	cf 91       	pop	r28
    24f4:	df 91       	pop	r29
    24f6:	1f 91       	pop	r17
    24f8:	0f 91       	pop	r16
    24fa:	08 95       	ret

000024fc <main>:
u8 EE_MaxHumid[10];
u8 EE_servo_angle[10];
u8 EE_servo_time[10];
*/

void main(){
    24fc:	0f 93       	push	r16
    24fe:	1f 93       	push	r17
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	c6 5b       	subi	r28, 0xB6	; 182
    250a:	d0 40       	sbci	r29, 0x00	; 0
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	de bf       	out	0x3e, r29	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	cd bf       	out	0x3d, r28	; 61
	u8 temp_val[10];////
	u8 humid_val[10];////
	f32 temp_read;/////
	f32 humid_Read;
	u8 On_Off_Flag = 0 ;
    2516:	fe 01       	movw	r30, r28
    2518:	eb 56       	subi	r30, 0x6B	; 107
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	10 82       	st	Z, r1

	UART_VidInit();
    251e:	0e 94 c1 10 	call	0x2182	; 0x2182 <UART_VidInit>
	ADC_int();
    2522:	0e 94 a5 07 	call	0xf4a	; 0xf4a <ADC_int>



	DIO_VidSetPinDirection(Port_A,Pin_0,input);
    2526:	82 e0       	ldi	r24, 0x02	; 2
    2528:	60 e0       	ldi	r22, 0x00	; 0
    252a:	40 e0       	ldi	r20, 0x00	; 0
    252c:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_A,Pin_1,input);
    2530:	82 e0       	ldi	r24, 0x02	; 2
    2532:	61 e0       	ldi	r22, 0x01	; 1
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_VidSetPinDirection>

	DIO_VidSetPinDirection(Port_C , Pin_4 , output);
    253a:	84 e0       	ldi	r24, 0x04	; 4
    253c:	64 e0       	ldi	r22, 0x04	; 4
    253e:	41 e0       	ldi	r20, 0x01	; 1
    2540:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_C , Pin_5 , output);
    2544:	84 e0       	ldi	r24, 0x04	; 4
    2546:	65 e0       	ldi	r22, 0x05	; 5
    2548:	41 e0       	ldi	r20, 0x01	; 1
    254a:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_VidSetPinDirection>

	/********UART RECEIVE BY INTERRUPT**************/

	/*enable GIE */
	GIE_vidEnable();
    254e:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <GIE_vidEnable>

	/*enable receive complete interrupt*/
	UART_VidRec_INT(enable);
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	0e 94 13 11 	call	0x2226	; 0x2226 <UART_VidRec_INT>

	UART_SetCallBack(UART_VidRead_ISR , &ReceiveChar);
    255a:	87 ed       	ldi	r24, 0xD7	; 215
    255c:	9a e1       	ldi	r25, 0x1A	; 26
    255e:	25 ea       	ldi	r18, 0xA5	; 165
    2560:	31 e0       	ldi	r19, 0x01	; 1
    2562:	b9 01       	movw	r22, r18
    2564:	0e 94 32 11 	call	0x2264	; 0x2264 <UART_SetCallBack>


	/*servo*/
	DIO_VidSetPinDirection(Port_D ,Pin_5 ,output);       /*For ServoMotor*/
    2568:	85 e0       	ldi	r24, 0x05	; 5
    256a:	65 e0       	ldi	r22, 0x05	; 5
    256c:	41 e0       	ldi	r20, 0x01	; 1
    256e:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_D ,Pin_6 ,output);		/*For Fan*/
    2572:	85 e0       	ldi	r24, 0x05	; 5
    2574:	66 e0       	ldi	r22, 0x06	; 6
    2576:	41 e0       	ldi	r20, 0x01	; 1
    2578:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_VidSetPinDirection>



	TIMR1_VidInit();
    257c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <TIMR1_VidInit>
	TIMR_VidInit();
    2580:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <TIMR_VidInit>
	TIMR0_SetCallBack(Servo_Control);                   /*ISR*/
    2584:	8d e8       	ldi	r24, 0x8D	; 141
    2586:	9b e1       	ldi	r25, 0x1B	; 27
    2588:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <TIMR0_SetCallBack>



	while(1){
		f32 temp_read1 = temp_read ;
    258c:	9e 01       	movw	r18, r28
    258e:	2f 56       	subi	r18, 0x6F	; 111
    2590:	3f 4f       	sbci	r19, 0xFF	; 255
    2592:	fe 01       	movw	r30, r28
    2594:	e6 56       	subi	r30, 0x66	; 102
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	80 81       	ld	r24, Z
    259a:	91 81       	ldd	r25, Z+1	; 0x01
    259c:	a2 81       	ldd	r26, Z+2	; 0x02
    259e:	b3 81       	ldd	r27, Z+3	; 0x03
    25a0:	f9 01       	movw	r30, r18
    25a2:	80 83       	st	Z, r24
    25a4:	91 83       	std	Z+1, r25	; 0x01
    25a6:	a2 83       	std	Z+2, r26	; 0x02
    25a8:	b3 83       	std	Z+3, r27	; 0x03
		f32 humid_Read1 = humid_Read ;
    25aa:	9e 01       	movw	r18, r28
    25ac:	23 57       	subi	r18, 0x73	; 115
    25ae:	3f 4f       	sbci	r19, 0xFF	; 255
    25b0:	fe 01       	movw	r30, r28
    25b2:	ea 56       	subi	r30, 0x6A	; 106
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	80 81       	ld	r24, Z
    25b8:	91 81       	ldd	r25, Z+1	; 0x01
    25ba:	a2 81       	ldd	r26, Z+2	; 0x02
    25bc:	b3 81       	ldd	r27, Z+3	; 0x03
    25be:	f9 01       	movw	r30, r18
    25c0:	80 83       	st	Z, r24
    25c2:	91 83       	std	Z+1, r25	; 0x01
    25c4:	a2 83       	std	Z+2, r26	; 0x02
    25c6:	b3 83       	std	Z+3, r27	; 0x03

		humid_Read = ADC_Read(ADC1);
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	0e 94 dd 07 	call	0xfba	; 0xfba <ADC_Read>
    25ce:	8e 01       	movw	r16, r28
    25d0:	0a 56       	subi	r16, 0x6A	; 106
    25d2:	1f 4f       	sbci	r17, 0xFF	; 255
    25d4:	88 2f       	mov	r24, r24
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	a0 e0       	ldi	r26, 0x00	; 0
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	bc 01       	movw	r22, r24
    25de:	cd 01       	movw	r24, r26
    25e0:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	f8 01       	movw	r30, r16
    25ea:	80 83       	st	Z, r24
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	a2 83       	std	Z+2, r26	; 0x02
    25f0:	b3 83       	std	Z+3, r27	; 0x03
		temp_read = ADC_Read(ADC0);
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	0e 94 dd 07 	call	0xfba	; 0xfba <ADC_Read>
    25f8:	8e 01       	movw	r16, r28
    25fa:	06 56       	subi	r16, 0x66	; 102
    25fc:	1f 4f       	sbci	r17, 0xFF	; 255
    25fe:	88 2f       	mov	r24, r24
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	a0 e0       	ldi	r26, 0x00	; 0
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	bc 01       	movw	r22, r24
    2608:	cd 01       	movw	r24, r26
    260a:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	f8 01       	movw	r30, r16
    2614:	80 83       	st	Z, r24
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	a2 83       	std	Z+2, r26	; 0x02
    261a:	b3 83       	std	Z+3, r27	; 0x03
    261c:	fe 01       	movw	r30, r28
    261e:	e7 57       	subi	r30, 0x77	; 119
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	a0 e2       	ldi	r26, 0x20	; 32
    2628:	b1 e4       	ldi	r27, 0x41	; 65
    262a:	80 83       	st	Z, r24
    262c:	91 83       	std	Z+1, r25	; 0x01
    262e:	a2 83       	std	Z+2, r26	; 0x02
    2630:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2632:	8e 01       	movw	r16, r28
    2634:	0b 57       	subi	r16, 0x7B	; 123
    2636:	1f 4f       	sbci	r17, 0xFF	; 255
    2638:	fe 01       	movw	r30, r28
    263a:	e7 57       	subi	r30, 0x77	; 119
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	60 81       	ld	r22, Z
    2640:	71 81       	ldd	r23, Z+1	; 0x01
    2642:	82 81       	ldd	r24, Z+2	; 0x02
    2644:	93 81       	ldd	r25, Z+3	; 0x03
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	4a ef       	ldi	r20, 0xFA	; 250
    264c:	54 e4       	ldi	r21, 0x44	; 68
    264e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	f8 01       	movw	r30, r16
    2658:	80 83       	st	Z, r24
    265a:	91 83       	std	Z+1, r25	; 0x01
    265c:	a2 83       	std	Z+2, r26	; 0x02
    265e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2660:	fe 01       	movw	r30, r28
    2662:	eb 57       	subi	r30, 0x7B	; 123
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	60 81       	ld	r22, Z
    2668:	71 81       	ldd	r23, Z+1	; 0x01
    266a:	82 81       	ldd	r24, Z+2	; 0x02
    266c:	93 81       	ldd	r25, Z+3	; 0x03
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	40 e8       	ldi	r20, 0x80	; 128
    2674:	5f e3       	ldi	r21, 0x3F	; 63
    2676:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    267a:	88 23       	and	r24, r24
    267c:	44 f4       	brge	.+16     	; 0x268e <main+0x192>
		__ticks = 1;
    267e:	fe 01       	movw	r30, r28
    2680:	ed 57       	subi	r30, 0x7D	; 125
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	91 83       	std	Z+1, r25	; 0x01
    268a:	80 83       	st	Z, r24
    268c:	64 c0       	rjmp	.+200    	; 0x2756 <main+0x25a>
	else if (__tmp > 65535)
    268e:	fe 01       	movw	r30, r28
    2690:	eb 57       	subi	r30, 0x7B	; 123
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	60 81       	ld	r22, Z
    2696:	71 81       	ldd	r23, Z+1	; 0x01
    2698:	82 81       	ldd	r24, Z+2	; 0x02
    269a:	93 81       	ldd	r25, Z+3	; 0x03
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	3f ef       	ldi	r19, 0xFF	; 255
    26a0:	4f e7       	ldi	r20, 0x7F	; 127
    26a2:	57 e4       	ldi	r21, 0x47	; 71
    26a4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    26a8:	18 16       	cp	r1, r24
    26aa:	0c f0       	brlt	.+2      	; 0x26ae <main+0x1b2>
    26ac:	43 c0       	rjmp	.+134    	; 0x2734 <main+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ae:	fe 01       	movw	r30, r28
    26b0:	e7 57       	subi	r30, 0x77	; 119
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	60 81       	ld	r22, Z
    26b6:	71 81       	ldd	r23, Z+1	; 0x01
    26b8:	82 81       	ldd	r24, Z+2	; 0x02
    26ba:	93 81       	ldd	r25, Z+3	; 0x03
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	40 e2       	ldi	r20, 0x20	; 32
    26c2:	51 e4       	ldi	r21, 0x41	; 65
    26c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	8e 01       	movw	r16, r28
    26ce:	0d 57       	subi	r16, 0x7D	; 125
    26d0:	1f 4f       	sbci	r17, 0xFF	; 255
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	f8 01       	movw	r30, r16
    26e0:	91 83       	std	Z+1, r25	; 0x01
    26e2:	80 83       	st	Z, r24
    26e4:	1f c0       	rjmp	.+62     	; 0x2724 <main+0x228>
    26e6:	fe 01       	movw	r30, r28
    26e8:	ef 57       	subi	r30, 0x7F	; 127
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	88 ec       	ldi	r24, 0xC8	; 200
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	91 83       	std	Z+1, r25	; 0x01
    26f2:	80 83       	st	Z, r24
    26f4:	fe 01       	movw	r30, r28
    26f6:	ef 57       	subi	r30, 0x7F	; 127
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	80 81       	ld	r24, Z
    26fc:	91 81       	ldd	r25, Z+1	; 0x01
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <main+0x202>
    2702:	fe 01       	movw	r30, r28
    2704:	ef 57       	subi	r30, 0x7F	; 127
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	91 83       	std	Z+1, r25	; 0x01
    270a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270c:	de 01       	movw	r26, r28
    270e:	ad 57       	subi	r26, 0x7D	; 125
    2710:	bf 4f       	sbci	r27, 0xFF	; 255
    2712:	fe 01       	movw	r30, r28
    2714:	ed 57       	subi	r30, 0x7D	; 125
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 81       	ld	r24, Z
    271a:	91 81       	ldd	r25, Z+1	; 0x01
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	11 96       	adiw	r26, 0x01	; 1
    2720:	9c 93       	st	X, r25
    2722:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2724:	fe 01       	movw	r30, r28
    2726:	ed 57       	subi	r30, 0x7D	; 125
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	80 81       	ld	r24, Z
    272c:	91 81       	ldd	r25, Z+1	; 0x01
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	d1 f6       	brne	.-76     	; 0x26e6 <main+0x1ea>
    2732:	27 c0       	rjmp	.+78     	; 0x2782 <main+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2734:	8e 01       	movw	r16, r28
    2736:	0d 57       	subi	r16, 0x7D	; 125
    2738:	1f 4f       	sbci	r17, 0xFF	; 255
    273a:	fe 01       	movw	r30, r28
    273c:	eb 57       	subi	r30, 0x7B	; 123
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	60 81       	ld	r22, Z
    2742:	71 81       	ldd	r23, Z+1	; 0x01
    2744:	82 81       	ldd	r24, Z+2	; 0x02
    2746:	93 81       	ldd	r25, Z+3	; 0x03
    2748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	f8 01       	movw	r30, r16
    2752:	91 83       	std	Z+1, r25	; 0x01
    2754:	80 83       	st	Z, r24
    2756:	de 01       	movw	r26, r28
    2758:	a1 58       	subi	r26, 0x81	; 129
    275a:	bf 4f       	sbci	r27, 0xFF	; 255
    275c:	fe 01       	movw	r30, r28
    275e:	ed 57       	subi	r30, 0x7D	; 125
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	80 81       	ld	r24, Z
    2764:	91 81       	ldd	r25, Z+1	; 0x01
    2766:	8d 93       	st	X+, r24
    2768:	9c 93       	st	X, r25
    276a:	fe 01       	movw	r30, r28
    276c:	e1 58       	subi	r30, 0x81	; 129
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	80 81       	ld	r24, Z
    2772:	91 81       	ldd	r25, Z+1	; 0x01
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <main+0x278>
    2778:	fe 01       	movw	r30, r28
    277a:	e1 58       	subi	r30, 0x81	; 129
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	91 83       	std	Z+1, r25	; 0x01
    2780:	80 83       	st	Z, r24

		_delay_ms(10);
		temp_read = (((temp_read  * 5000.0)/256.0)/10.0);
    2782:	fe 01       	movw	r30, r28
    2784:	e6 56       	subi	r30, 0x66	; 102
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	60 81       	ld	r22, Z
    278a:	71 81       	ldd	r23, Z+1	; 0x01
    278c:	82 81       	ldd	r24, Z+2	; 0x02
    278e:	93 81       	ldd	r25, Z+3	; 0x03
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e4       	ldi	r19, 0x40	; 64
    2794:	4c e9       	ldi	r20, 0x9C	; 156
    2796:	55 e4       	ldi	r21, 0x45	; 69
    2798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	bc 01       	movw	r22, r24
    27a2:	cd 01       	movw	r24, r26
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e8       	ldi	r20, 0x80	; 128
    27aa:	53 e4       	ldi	r21, 0x43	; 67
    27ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	8e 01       	movw	r16, r28
    27b6:	06 56       	subi	r16, 0x66	; 102
    27b8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ba:	bc 01       	movw	r22, r24
    27bc:	cd 01       	movw	r24, r26
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e2       	ldi	r20, 0x20	; 32
    27c4:	51 e4       	ldi	r21, 0x41	; 65
    27c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	f8 01       	movw	r30, r16
    27d0:	80 83       	st	Z, r24
    27d2:	91 83       	std	Z+1, r25	; 0x01
    27d4:	a2 83       	std	Z+2, r26	; 0x02
    27d6:	b3 83       	std	Z+3, r27	; 0x03
		sprintf(temp_val , "t%i\r" , (u32)temp_read );
    27d8:	fe 01       	movw	r30, r28
    27da:	e6 56       	subi	r30, 0x66	; 102
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	60 81       	ld	r22, Z
    27e0:	71 81       	ldd	r23, Z+1	; 0x01
    27e2:	82 81       	ldd	r24, Z+2	; 0x02
    27e4:	93 81       	ldd	r25, Z+3	; 0x03
    27e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ea:	9b 01       	movw	r18, r22
    27ec:	ac 01       	movw	r20, r24
    27ee:	8d b7       	in	r24, 0x3d	; 61
    27f0:	9e b7       	in	r25, 0x3e	; 62
    27f2:	08 97       	sbiw	r24, 0x08	; 8
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	9e bf       	out	0x3e, r25	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	8d bf       	out	0x3d, r24	; 61
    27fe:	ed b7       	in	r30, 0x3d	; 61
    2800:	fe b7       	in	r31, 0x3e	; 62
    2802:	31 96       	adiw	r30, 0x01	; 1
    2804:	ce 01       	movw	r24, r28
    2806:	82 56       	subi	r24, 0x62	; 98
    2808:	9f 4f       	sbci	r25, 0xFF	; 255
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24
    280e:	80 e6       	ldi	r24, 0x60	; 96
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	93 83       	std	Z+3, r25	; 0x03
    2814:	82 83       	std	Z+2, r24	; 0x02
    2816:	24 83       	std	Z+4, r18	; 0x04
    2818:	35 83       	std	Z+5, r19	; 0x05
    281a:	46 83       	std	Z+6, r20	; 0x06
    281c:	57 83       	std	Z+7, r21	; 0x07
    281e:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <sprintf>
    2822:	ed b7       	in	r30, 0x3d	; 61
    2824:	fe b7       	in	r31, 0x3e	; 62
    2826:	38 96       	adiw	r30, 0x08	; 8
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	fe bf       	out	0x3e, r31	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	ed bf       	out	0x3d, r30	; 61
    2832:	fe 01       	movw	r30, r28
    2834:	e5 58       	subi	r30, 0x85	; 133
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	a0 e2       	ldi	r26, 0x20	; 32
    283e:	b1 e4       	ldi	r27, 0x41	; 65
    2840:	80 83       	st	Z, r24
    2842:	91 83       	std	Z+1, r25	; 0x01
    2844:	a2 83       	std	Z+2, r26	; 0x02
    2846:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2848:	8e 01       	movw	r16, r28
    284a:	09 58       	subi	r16, 0x89	; 137
    284c:	1f 4f       	sbci	r17, 0xFF	; 255
    284e:	fe 01       	movw	r30, r28
    2850:	e5 58       	subi	r30, 0x85	; 133
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	60 81       	ld	r22, Z
    2856:	71 81       	ldd	r23, Z+1	; 0x01
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	93 81       	ldd	r25, Z+3	; 0x03
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	4a ef       	ldi	r20, 0xFA	; 250
    2862:	54 e4       	ldi	r21, 0x44	; 68
    2864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	f8 01       	movw	r30, r16
    286e:	80 83       	st	Z, r24
    2870:	91 83       	std	Z+1, r25	; 0x01
    2872:	a2 83       	std	Z+2, r26	; 0x02
    2874:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2876:	fe 01       	movw	r30, r28
    2878:	e9 58       	subi	r30, 0x89	; 137
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	93 81       	ldd	r25, Z+3	; 0x03
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e8       	ldi	r20, 0x80	; 128
    288a:	5f e3       	ldi	r21, 0x3F	; 63
    288c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2890:	88 23       	and	r24, r24
    2892:	44 f4       	brge	.+16     	; 0x28a4 <main+0x3a8>
		__ticks = 1;
    2894:	fe 01       	movw	r30, r28
    2896:	eb 58       	subi	r30, 0x8B	; 139
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	91 83       	std	Z+1, r25	; 0x01
    28a0:	80 83       	st	Z, r24
    28a2:	64 c0       	rjmp	.+200    	; 0x296c <main+0x470>
	else if (__tmp > 65535)
    28a4:	fe 01       	movw	r30, r28
    28a6:	e9 58       	subi	r30, 0x89	; 137
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	60 81       	ld	r22, Z
    28ac:	71 81       	ldd	r23, Z+1	; 0x01
    28ae:	82 81       	ldd	r24, Z+2	; 0x02
    28b0:	93 81       	ldd	r25, Z+3	; 0x03
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	3f ef       	ldi	r19, 0xFF	; 255
    28b6:	4f e7       	ldi	r20, 0x7F	; 127
    28b8:	57 e4       	ldi	r21, 0x47	; 71
    28ba:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    28be:	18 16       	cp	r1, r24
    28c0:	0c f0       	brlt	.+2      	; 0x28c4 <main+0x3c8>
    28c2:	43 c0       	rjmp	.+134    	; 0x294a <main+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c4:	fe 01       	movw	r30, r28
    28c6:	e5 58       	subi	r30, 0x85	; 133
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	60 81       	ld	r22, Z
    28cc:	71 81       	ldd	r23, Z+1	; 0x01
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	93 81       	ldd	r25, Z+3	; 0x03
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e2       	ldi	r20, 0x20	; 32
    28d8:	51 e4       	ldi	r21, 0x41	; 65
    28da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	8e 01       	movw	r16, r28
    28e4:	0b 58       	subi	r16, 0x8B	; 139
    28e6:	1f 4f       	sbci	r17, 0xFF	; 255
    28e8:	bc 01       	movw	r22, r24
    28ea:	cd 01       	movw	r24, r26
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	f8 01       	movw	r30, r16
    28f6:	91 83       	std	Z+1, r25	; 0x01
    28f8:	80 83       	st	Z, r24
    28fa:	1f c0       	rjmp	.+62     	; 0x293a <main+0x43e>
    28fc:	fe 01       	movw	r30, r28
    28fe:	ed 58       	subi	r30, 0x8D	; 141
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	88 ec       	ldi	r24, 0xC8	; 200
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	80 83       	st	Z, r24
    290a:	fe 01       	movw	r30, r28
    290c:	ed 58       	subi	r30, 0x8D	; 141
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	80 81       	ld	r24, Z
    2912:	91 81       	ldd	r25, Z+1	; 0x01
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	f1 f7       	brne	.-4      	; 0x2914 <main+0x418>
    2918:	fe 01       	movw	r30, r28
    291a:	ed 58       	subi	r30, 0x8D	; 141
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	91 83       	std	Z+1, r25	; 0x01
    2920:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2922:	de 01       	movw	r26, r28
    2924:	ab 58       	subi	r26, 0x8B	; 139
    2926:	bf 4f       	sbci	r27, 0xFF	; 255
    2928:	fe 01       	movw	r30, r28
    292a:	eb 58       	subi	r30, 0x8B	; 139
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	80 81       	ld	r24, Z
    2930:	91 81       	ldd	r25, Z+1	; 0x01
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	11 96       	adiw	r26, 0x01	; 1
    2936:	9c 93       	st	X, r25
    2938:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293a:	fe 01       	movw	r30, r28
    293c:	eb 58       	subi	r30, 0x8B	; 139
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	80 81       	ld	r24, Z
    2942:	91 81       	ldd	r25, Z+1	; 0x01
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	d1 f6       	brne	.-76     	; 0x28fc <main+0x400>
    2948:	27 c0       	rjmp	.+78     	; 0x2998 <main+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294a:	8e 01       	movw	r16, r28
    294c:	0b 58       	subi	r16, 0x8B	; 139
    294e:	1f 4f       	sbci	r17, 0xFF	; 255
    2950:	fe 01       	movw	r30, r28
    2952:	e9 58       	subi	r30, 0x89	; 137
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	f8 01       	movw	r30, r16
    2968:	91 83       	std	Z+1, r25	; 0x01
    296a:	80 83       	st	Z, r24
    296c:	de 01       	movw	r26, r28
    296e:	af 58       	subi	r26, 0x8F	; 143
    2970:	bf 4f       	sbci	r27, 0xFF	; 255
    2972:	fe 01       	movw	r30, r28
    2974:	eb 58       	subi	r30, 0x8B	; 139
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	80 81       	ld	r24, Z
    297a:	91 81       	ldd	r25, Z+1	; 0x01
    297c:	8d 93       	st	X+, r24
    297e:	9c 93       	st	X, r25
    2980:	fe 01       	movw	r30, r28
    2982:	ef 58       	subi	r30, 0x8F	; 143
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	80 81       	ld	r24, Z
    2988:	91 81       	ldd	r25, Z+1	; 0x01
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <main+0x48e>
    298e:	fe 01       	movw	r30, r28
    2990:	ef 58       	subi	r30, 0x8F	; 143
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	91 83       	std	Z+1, r25	; 0x01
    2996:	80 83       	st	Z, r24

		_delay_ms(10);
		humid_Read = ((humid_Read  - 38.0) * 0.61) ;
    2998:	fe 01       	movw	r30, r28
    299a:	ea 56       	subi	r30, 0x6A	; 106
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	60 81       	ld	r22, Z
    29a0:	71 81       	ldd	r23, Z+1	; 0x01
    29a2:	82 81       	ldd	r24, Z+2	; 0x02
    29a4:	93 81       	ldd	r25, Z+3	; 0x03
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	48 e1       	ldi	r20, 0x18	; 24
    29ac:	52 e4       	ldi	r21, 0x42	; 66
    29ae:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	8e 01       	movw	r16, r28
    29b8:	0a 56       	subi	r16, 0x6A	; 106
    29ba:	1f 4f       	sbci	r17, 0xFF	; 255
    29bc:	bc 01       	movw	r22, r24
    29be:	cd 01       	movw	r24, r26
    29c0:	26 ef       	ldi	r18, 0xF6	; 246
    29c2:	38 e2       	ldi	r19, 0x28	; 40
    29c4:	4c e1       	ldi	r20, 0x1C	; 28
    29c6:	5f e3       	ldi	r21, 0x3F	; 63
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	f8 01       	movw	r30, r16
    29d2:	80 83       	st	Z, r24
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	a2 83       	std	Z+2, r26	; 0x02
    29d8:	b3 83       	std	Z+3, r27	; 0x03
		sprintf(humid_val , "h%i\r" , (u32)humid_Read );
    29da:	fe 01       	movw	r30, r28
    29dc:	ea 56       	subi	r30, 0x6A	; 106
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	60 81       	ld	r22, Z
    29e2:	71 81       	ldd	r23, Z+1	; 0x01
    29e4:	82 81       	ldd	r24, Z+2	; 0x02
    29e6:	93 81       	ldd	r25, Z+3	; 0x03
    29e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ec:	9b 01       	movw	r18, r22
    29ee:	ac 01       	movw	r20, r24
    29f0:	8d b7       	in	r24, 0x3d	; 61
    29f2:	9e b7       	in	r25, 0x3e	; 62
    29f4:	08 97       	sbiw	r24, 0x08	; 8
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	9e bf       	out	0x3e, r25	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	8d bf       	out	0x3d, r24	; 61
    2a00:	ed b7       	in	r30, 0x3d	; 61
    2a02:	fe b7       	in	r31, 0x3e	; 62
    2a04:	31 96       	adiw	r30, 0x01	; 1
    2a06:	ce 01       	movw	r24, r28
    2a08:	88 55       	subi	r24, 0x58	; 88
    2a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0c:	91 83       	std	Z+1, r25	; 0x01
    2a0e:	80 83       	st	Z, r24
    2a10:	85 e6       	ldi	r24, 0x65	; 101
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	93 83       	std	Z+3, r25	; 0x03
    2a16:	82 83       	std	Z+2, r24	; 0x02
    2a18:	24 83       	std	Z+4, r18	; 0x04
    2a1a:	35 83       	std	Z+5, r19	; 0x05
    2a1c:	46 83       	std	Z+6, r20	; 0x06
    2a1e:	57 83       	std	Z+7, r21	; 0x07
    2a20:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <sprintf>
    2a24:	ed b7       	in	r30, 0x3d	; 61
    2a26:	fe b7       	in	r31, 0x3e	; 62
    2a28:	38 96       	adiw	r30, 0x08	; 8
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	f8 94       	cli
    2a2e:	fe bf       	out	0x3e, r31	; 62
    2a30:	0f be       	out	0x3f, r0	; 63
    2a32:	ed bf       	out	0x3d, r30	; 61

		if(temp_read != temp_read1){
    2a34:	fe 01       	movw	r30, r28
    2a36:	e6 56       	subi	r30, 0x66	; 102
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	de 01       	movw	r26, r28
    2a3c:	af 56       	subi	r26, 0x6F	; 111
    2a3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a40:	60 81       	ld	r22, Z
    2a42:	71 81       	ldd	r23, Z+1	; 0x01
    2a44:	82 81       	ldd	r24, Z+2	; 0x02
    2a46:	93 81       	ldd	r25, Z+3	; 0x03
    2a48:	2d 91       	ld	r18, X+
    2a4a:	3d 91       	ld	r19, X+
    2a4c:	4d 91       	ld	r20, X+
    2a4e:	5c 91       	ld	r21, X
    2a50:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    2a54:	88 23       	and	r24, r24
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <main+0x55e>
    2a58:	b8 c0       	rjmp	.+368    	; 0x2bca <main+0x6ce>
			UART_VidSendString(temp_val);
    2a5a:	ce 01       	movw	r24, r28
    2a5c:	82 56       	subi	r24, 0x62	; 98
    2a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a60:	0e 94 8e 11 	call	0x231c	; 0x231c <UART_VidSendString>
    2a64:	fe 01       	movw	r30, r28
    2a66:	e3 59       	subi	r30, 0x93	; 147
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	a8 ec       	ldi	r26, 0xC8	; 200
    2a70:	b2 e4       	ldi	r27, 0x42	; 66
    2a72:	80 83       	st	Z, r24
    2a74:	91 83       	std	Z+1, r25	; 0x01
    2a76:	a2 83       	std	Z+2, r26	; 0x02
    2a78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7a:	8e 01       	movw	r16, r28
    2a7c:	07 59       	subi	r16, 0x97	; 151
    2a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a80:	fe 01       	movw	r30, r28
    2a82:	e3 59       	subi	r30, 0x93	; 147
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	60 81       	ld	r22, Z
    2a88:	71 81       	ldd	r23, Z+1	; 0x01
    2a8a:	82 81       	ldd	r24, Z+2	; 0x02
    2a8c:	93 81       	ldd	r25, Z+3	; 0x03
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	4a ef       	ldi	r20, 0xFA	; 250
    2a94:	54 e4       	ldi	r21, 0x44	; 68
    2a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	f8 01       	movw	r30, r16
    2aa0:	80 83       	st	Z, r24
    2aa2:	91 83       	std	Z+1, r25	; 0x01
    2aa4:	a2 83       	std	Z+2, r26	; 0x02
    2aa6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	e7 59       	subi	r30, 0x97	; 151
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	60 81       	ld	r22, Z
    2ab0:	71 81       	ldd	r23, Z+1	; 0x01
    2ab2:	82 81       	ldd	r24, Z+2	; 0x02
    2ab4:	93 81       	ldd	r25, Z+3	; 0x03
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e8       	ldi	r20, 0x80	; 128
    2abc:	5f e3       	ldi	r21, 0x3F	; 63
    2abe:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ac2:	88 23       	and	r24, r24
    2ac4:	44 f4       	brge	.+16     	; 0x2ad6 <main+0x5da>
		__ticks = 1;
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e9 59       	subi	r30, 0x99	; 153
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	91 83       	std	Z+1, r25	; 0x01
    2ad2:	80 83       	st	Z, r24
    2ad4:	64 c0       	rjmp	.+200    	; 0x2b9e <main+0x6a2>
	else if (__tmp > 65535)
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e7 59       	subi	r30, 0x97	; 151
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	60 81       	ld	r22, Z
    2ade:	71 81       	ldd	r23, Z+1	; 0x01
    2ae0:	82 81       	ldd	r24, Z+2	; 0x02
    2ae2:	93 81       	ldd	r25, Z+3	; 0x03
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	3f ef       	ldi	r19, 0xFF	; 255
    2ae8:	4f e7       	ldi	r20, 0x7F	; 127
    2aea:	57 e4       	ldi	r21, 0x47	; 71
    2aec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2af0:	18 16       	cp	r1, r24
    2af2:	0c f0       	brlt	.+2      	; 0x2af6 <main+0x5fa>
    2af4:	43 c0       	rjmp	.+134    	; 0x2b7c <main+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	fe 01       	movw	r30, r28
    2af8:	e3 59       	subi	r30, 0x93	; 147
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	60 81       	ld	r22, Z
    2afe:	71 81       	ldd	r23, Z+1	; 0x01
    2b00:	82 81       	ldd	r24, Z+2	; 0x02
    2b02:	93 81       	ldd	r25, Z+3	; 0x03
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	40 e2       	ldi	r20, 0x20	; 32
    2b0a:	51 e4       	ldi	r21, 0x41	; 65
    2b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	8e 01       	movw	r16, r28
    2b16:	09 59       	subi	r16, 0x99	; 153
    2b18:	1f 4f       	sbci	r17, 0xFF	; 255
    2b1a:	bc 01       	movw	r22, r24
    2b1c:	cd 01       	movw	r24, r26
    2b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	f8 01       	movw	r30, r16
    2b28:	91 83       	std	Z+1, r25	; 0x01
    2b2a:	80 83       	st	Z, r24
    2b2c:	1f c0       	rjmp	.+62     	; 0x2b6c <main+0x670>
    2b2e:	fe 01       	movw	r30, r28
    2b30:	eb 59       	subi	r30, 0x9B	; 155
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	88 ec       	ldi	r24, 0xC8	; 200
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	91 83       	std	Z+1, r25	; 0x01
    2b3a:	80 83       	st	Z, r24
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	eb 59       	subi	r30, 0x9B	; 155
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	80 81       	ld	r24, Z
    2b44:	91 81       	ldd	r25, Z+1	; 0x01
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	f1 f7       	brne	.-4      	; 0x2b46 <main+0x64a>
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	eb 59       	subi	r30, 0x9B	; 155
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	91 83       	std	Z+1, r25	; 0x01
    2b52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b54:	de 01       	movw	r26, r28
    2b56:	a9 59       	subi	r26, 0x99	; 153
    2b58:	bf 4f       	sbci	r27, 0xFF	; 255
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	e9 59       	subi	r30, 0x99	; 153
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	80 81       	ld	r24, Z
    2b62:	91 81       	ldd	r25, Z+1	; 0x01
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	11 96       	adiw	r26, 0x01	; 1
    2b68:	9c 93       	st	X, r25
    2b6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	e9 59       	subi	r30, 0x99	; 153
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	80 81       	ld	r24, Z
    2b74:	91 81       	ldd	r25, Z+1	; 0x01
    2b76:	00 97       	sbiw	r24, 0x00	; 0
    2b78:	d1 f6       	brne	.-76     	; 0x2b2e <main+0x632>
    2b7a:	27 c0       	rjmp	.+78     	; 0x2bca <main+0x6ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b7c:	8e 01       	movw	r16, r28
    2b7e:	09 59       	subi	r16, 0x99	; 153
    2b80:	1f 4f       	sbci	r17, 0xFF	; 255
    2b82:	fe 01       	movw	r30, r28
    2b84:	e7 59       	subi	r30, 0x97	; 151
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	60 81       	ld	r22, Z
    2b8a:	71 81       	ldd	r23, Z+1	; 0x01
    2b8c:	82 81       	ldd	r24, Z+2	; 0x02
    2b8e:	93 81       	ldd	r25, Z+3	; 0x03
    2b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	f8 01       	movw	r30, r16
    2b9a:	91 83       	std	Z+1, r25	; 0x01
    2b9c:	80 83       	st	Z, r24
    2b9e:	de 01       	movw	r26, r28
    2ba0:	ad 59       	subi	r26, 0x9D	; 157
    2ba2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e9 59       	subi	r30, 0x99	; 153
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	80 81       	ld	r24, Z
    2bac:	91 81       	ldd	r25, Z+1	; 0x01
    2bae:	8d 93       	st	X+, r24
    2bb0:	9c 93       	st	X, r25
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	ed 59       	subi	r30, 0x9D	; 157
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	80 81       	ld	r24, Z
    2bba:	91 81       	ldd	r25, Z+1	; 0x01
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <main+0x6c0>
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	ed 59       	subi	r30, 0x9D	; 157
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	91 83       	std	Z+1, r25	; 0x01
    2bc8:	80 83       	st	Z, r24
			_delay_ms(100);
		}

		if(humid_Read != humid_Read1){
    2bca:	fe 01       	movw	r30, r28
    2bcc:	ea 56       	subi	r30, 0x6A	; 106
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	de 01       	movw	r26, r28
    2bd2:	a3 57       	subi	r26, 0x73	; 115
    2bd4:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd6:	60 81       	ld	r22, Z
    2bd8:	71 81       	ldd	r23, Z+1	; 0x01
    2bda:	82 81       	ldd	r24, Z+2	; 0x02
    2bdc:	93 81       	ldd	r25, Z+3	; 0x03
    2bde:	2d 91       	ld	r18, X+
    2be0:	3d 91       	ld	r19, X+
    2be2:	4d 91       	ld	r20, X+
    2be4:	5c 91       	ld	r21, X
    2be6:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    2bea:	88 23       	and	r24, r24
    2bec:	09 f4       	brne	.+2      	; 0x2bf0 <main+0x6f4>
    2bee:	b9 c0       	rjmp	.+370    	; 0x2d62 <main+0x866>
			UART_VidSendString(humid_val);
    2bf0:	ce 01       	movw	r24, r28
    2bf2:	88 55       	subi	r24, 0x58	; 88
    2bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf6:	0e 94 8e 11 	call	0x231c	; 0x231c <UART_VidSendString>
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e1 5a       	subi	r30, 0xA1	; 161
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	a8 ec       	ldi	r26, 0xC8	; 200
    2c06:	b2 e4       	ldi	r27, 0x42	; 66
    2c08:	80 83       	st	Z, r24
    2c0a:	91 83       	std	Z+1, r25	; 0x01
    2c0c:	a2 83       	std	Z+2, r26	; 0x02
    2c0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c10:	8e 01       	movw	r16, r28
    2c12:	05 5a       	subi	r16, 0xA5	; 165
    2c14:	1f 4f       	sbci	r17, 0xFF	; 255
    2c16:	fe 01       	movw	r30, r28
    2c18:	e1 5a       	subi	r30, 0xA1	; 161
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	60 81       	ld	r22, Z
    2c1e:	71 81       	ldd	r23, Z+1	; 0x01
    2c20:	82 81       	ldd	r24, Z+2	; 0x02
    2c22:	93 81       	ldd	r25, Z+3	; 0x03
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	4a ef       	ldi	r20, 0xFA	; 250
    2c2a:	54 e4       	ldi	r21, 0x44	; 68
    2c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	f8 01       	movw	r30, r16
    2c36:	80 83       	st	Z, r24
    2c38:	91 83       	std	Z+1, r25	; 0x01
    2c3a:	a2 83       	std	Z+2, r26	; 0x02
    2c3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e5 5a       	subi	r30, 0xA5	; 165
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	60 81       	ld	r22, Z
    2c46:	71 81       	ldd	r23, Z+1	; 0x01
    2c48:	82 81       	ldd	r24, Z+2	; 0x02
    2c4a:	93 81       	ldd	r25, Z+3	; 0x03
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e8       	ldi	r20, 0x80	; 128
    2c52:	5f e3       	ldi	r21, 0x3F	; 63
    2c54:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c58:	88 23       	and	r24, r24
    2c5a:	44 f4       	brge	.+16     	; 0x2c6c <main+0x770>
		__ticks = 1;
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	e7 5a       	subi	r30, 0xA7	; 167
    2c60:	ff 4f       	sbci	r31, 0xFF	; 255
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	91 83       	std	Z+1, r25	; 0x01
    2c68:	80 83       	st	Z, r24
    2c6a:	64 c0       	rjmp	.+200    	; 0x2d34 <main+0x838>
	else if (__tmp > 65535)
    2c6c:	fe 01       	movw	r30, r28
    2c6e:	e5 5a       	subi	r30, 0xA5	; 165
    2c70:	ff 4f       	sbci	r31, 0xFF	; 255
    2c72:	60 81       	ld	r22, Z
    2c74:	71 81       	ldd	r23, Z+1	; 0x01
    2c76:	82 81       	ldd	r24, Z+2	; 0x02
    2c78:	93 81       	ldd	r25, Z+3	; 0x03
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	3f ef       	ldi	r19, 0xFF	; 255
    2c7e:	4f e7       	ldi	r20, 0x7F	; 127
    2c80:	57 e4       	ldi	r21, 0x47	; 71
    2c82:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c86:	18 16       	cp	r1, r24
    2c88:	0c f0       	brlt	.+2      	; 0x2c8c <main+0x790>
    2c8a:	43 c0       	rjmp	.+134    	; 0x2d12 <main+0x816>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	e1 5a       	subi	r30, 0xA1	; 161
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	60 81       	ld	r22, Z
    2c94:	71 81       	ldd	r23, Z+1	; 0x01
    2c96:	82 81       	ldd	r24, Z+2	; 0x02
    2c98:	93 81       	ldd	r25, Z+3	; 0x03
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e2       	ldi	r20, 0x20	; 32
    2ca0:	51 e4       	ldi	r21, 0x41	; 65
    2ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	8e 01       	movw	r16, r28
    2cac:	07 5a       	subi	r16, 0xA7	; 167
    2cae:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb0:	bc 01       	movw	r22, r24
    2cb2:	cd 01       	movw	r24, r26
    2cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	f8 01       	movw	r30, r16
    2cbe:	91 83       	std	Z+1, r25	; 0x01
    2cc0:	80 83       	st	Z, r24
    2cc2:	1f c0       	rjmp	.+62     	; 0x2d02 <main+0x806>
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	e9 5a       	subi	r30, 0xA9	; 169
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	88 ec       	ldi	r24, 0xC8	; 200
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	91 83       	std	Z+1, r25	; 0x01
    2cd0:	80 83       	st	Z, r24
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e9 5a       	subi	r30, 0xA9	; 169
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	80 81       	ld	r24, Z
    2cda:	91 81       	ldd	r25, Z+1	; 0x01
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	f1 f7       	brne	.-4      	; 0x2cdc <main+0x7e0>
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	e9 5a       	subi	r30, 0xA9	; 169
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	91 83       	std	Z+1, r25	; 0x01
    2ce8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cea:	de 01       	movw	r26, r28
    2cec:	a7 5a       	subi	r26, 0xA7	; 167
    2cee:	bf 4f       	sbci	r27, 0xFF	; 255
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e7 5a       	subi	r30, 0xA7	; 167
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	80 81       	ld	r24, Z
    2cf8:	91 81       	ldd	r25, Z+1	; 0x01
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	11 96       	adiw	r26, 0x01	; 1
    2cfe:	9c 93       	st	X, r25
    2d00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d02:	fe 01       	movw	r30, r28
    2d04:	e7 5a       	subi	r30, 0xA7	; 167
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	80 81       	ld	r24, Z
    2d0a:	91 81       	ldd	r25, Z+1	; 0x01
    2d0c:	00 97       	sbiw	r24, 0x00	; 0
    2d0e:	d1 f6       	brne	.-76     	; 0x2cc4 <main+0x7c8>
    2d10:	28 c0       	rjmp	.+80     	; 0x2d62 <main+0x866>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d12:	8e 01       	movw	r16, r28
    2d14:	07 5a       	subi	r16, 0xA7	; 167
    2d16:	1f 4f       	sbci	r17, 0xFF	; 255
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e5 5a       	subi	r30, 0xA5	; 165
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	60 81       	ld	r22, Z
    2d20:	71 81       	ldd	r23, Z+1	; 0x01
    2d22:	82 81       	ldd	r24, Z+2	; 0x02
    2d24:	93 81       	ldd	r25, Z+3	; 0x03
    2d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	f8 01       	movw	r30, r16
    2d30:	91 83       	std	Z+1, r25	; 0x01
    2d32:	80 83       	st	Z, r24
    2d34:	de 01       	movw	r26, r28
    2d36:	ab 5a       	subi	r26, 0xAB	; 171
    2d38:	bf 4f       	sbci	r27, 0xFF	; 255
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e7 5a       	subi	r30, 0xA7	; 167
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	80 81       	ld	r24, Z
    2d42:	91 81       	ldd	r25, Z+1	; 0x01
    2d44:	11 96       	adiw	r26, 0x01	; 1
    2d46:	9c 93       	st	X, r25
    2d48:	8e 93       	st	-X, r24
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	eb 5a       	subi	r30, 0xAB	; 171
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	80 81       	ld	r24, Z
    2d52:	91 81       	ldd	r25, Z+1	; 0x01
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <main+0x858>
    2d58:	fe 01       	movw	r30, r28
    2d5a:	eb 5a       	subi	r30, 0xAB	; 171
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	91 83       	std	Z+1, r25	; 0x01
    2d60:	80 83       	st	Z, r24
			_delay_ms(100);
		}

		/////////////////////////////////////////////

		if(On_Off_Flag == 1){
    2d62:	fe 01       	movw	r30, r28
    2d64:	eb 56       	subi	r30, 0x6B	; 107
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	80 81       	ld	r24, Z
    2d6a:	81 30       	cpi	r24, 0x01	; 1
    2d6c:	59 f4       	brne	.+22     	; 0x2d84 <main+0x888>
			DIO_VidSetPinValue(Port_D ,Pin_6 ,High);
    2d6e:	85 e0       	ldi	r24, 0x05	; 5
    2d70:	66 e0       	ldi	r22, 0x06	; 6
    2d72:	41 e0       	ldi	r20, 0x01	; 1
    2d74:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_VidSetPinValue>
			DIO_VidSetPinDirection(Port_D ,Pin_5 ,output);
    2d78:	85 e0       	ldi	r24, 0x05	; 5
    2d7a:	65 e0       	ldi	r22, 0x05	; 5
    2d7c:	41 e0       	ldi	r20, 0x01	; 1
    2d7e:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_VidSetPinDirection>
    2d82:	c4 c0       	rjmp	.+392    	; 0x2f0c <main+0xa10>
		}
		else if(On_Off_Flag == 0){
    2d84:	fe 01       	movw	r30, r28
    2d86:	eb 56       	subi	r30, 0x6B	; 107
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	80 81       	ld	r24, Z
    2d8c:	88 23       	and	r24, r24
    2d8e:	09 f0       	breq	.+2      	; 0x2d92 <main+0x896>
    2d90:	bd c0       	rjmp	.+378    	; 0x2f0c <main+0xa10>
    2d92:	fe 01       	movw	r30, r28
    2d94:	ef 5a       	subi	r30, 0xAF	; 175
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	80 e0       	ldi	r24, 0x00	; 0
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	a0 e2       	ldi	r26, 0x20	; 32
    2d9e:	b1 e4       	ldi	r27, 0x41	; 65
    2da0:	80 83       	st	Z, r24
    2da2:	91 83       	std	Z+1, r25	; 0x01
    2da4:	a2 83       	std	Z+2, r26	; 0x02
    2da6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da8:	8e 01       	movw	r16, r28
    2daa:	03 5b       	subi	r16, 0xB3	; 179
    2dac:	1f 4f       	sbci	r17, 0xFF	; 255
    2dae:	fe 01       	movw	r30, r28
    2db0:	ef 5a       	subi	r30, 0xAF	; 175
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	60 81       	ld	r22, Z
    2db6:	71 81       	ldd	r23, Z+1	; 0x01
    2db8:	82 81       	ldd	r24, Z+2	; 0x02
    2dba:	93 81       	ldd	r25, Z+3	; 0x03
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	4a ef       	ldi	r20, 0xFA	; 250
    2dc2:	54 e4       	ldi	r21, 0x44	; 68
    2dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	f8 01       	movw	r30, r16
    2dce:	80 83       	st	Z, r24
    2dd0:	91 83       	std	Z+1, r25	; 0x01
    2dd2:	a2 83       	std	Z+2, r26	; 0x02
    2dd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	e3 5b       	subi	r30, 0xB3	; 179
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	60 81       	ld	r22, Z
    2dde:	71 81       	ldd	r23, Z+1	; 0x01
    2de0:	82 81       	ldd	r24, Z+2	; 0x02
    2de2:	93 81       	ldd	r25, Z+3	; 0x03
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	40 e8       	ldi	r20, 0x80	; 128
    2dea:	5f e3       	ldi	r21, 0x3F	; 63
    2dec:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2df0:	88 23       	and	r24, r24
    2df2:	44 f4       	brge	.+16     	; 0x2e04 <main+0x908>
		__ticks = 1;
    2df4:	fe 01       	movw	r30, r28
    2df6:	e5 5b       	subi	r30, 0xB5	; 181
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	91 83       	std	Z+1, r25	; 0x01
    2e00:	80 83       	st	Z, r24
    2e02:	64 c0       	rjmp	.+200    	; 0x2ecc <main+0x9d0>
	else if (__tmp > 65535)
    2e04:	fe 01       	movw	r30, r28
    2e06:	e3 5b       	subi	r30, 0xB3	; 179
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	60 81       	ld	r22, Z
    2e0c:	71 81       	ldd	r23, Z+1	; 0x01
    2e0e:	82 81       	ldd	r24, Z+2	; 0x02
    2e10:	93 81       	ldd	r25, Z+3	; 0x03
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	3f ef       	ldi	r19, 0xFF	; 255
    2e16:	4f e7       	ldi	r20, 0x7F	; 127
    2e18:	57 e4       	ldi	r21, 0x47	; 71
    2e1a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2e1e:	18 16       	cp	r1, r24
    2e20:	0c f0       	brlt	.+2      	; 0x2e24 <main+0x928>
    2e22:	43 c0       	rjmp	.+134    	; 0x2eaa <main+0x9ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e24:	fe 01       	movw	r30, r28
    2e26:	ef 5a       	subi	r30, 0xAF	; 175
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	60 81       	ld	r22, Z
    2e2c:	71 81       	ldd	r23, Z+1	; 0x01
    2e2e:	82 81       	ldd	r24, Z+2	; 0x02
    2e30:	93 81       	ldd	r25, Z+3	; 0x03
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	40 e2       	ldi	r20, 0x20	; 32
    2e38:	51 e4       	ldi	r21, 0x41	; 65
    2e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	8e 01       	movw	r16, r28
    2e44:	05 5b       	subi	r16, 0xB5	; 181
    2e46:	1f 4f       	sbci	r17, 0xFF	; 255
    2e48:	bc 01       	movw	r22, r24
    2e4a:	cd 01       	movw	r24, r26
    2e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	f8 01       	movw	r30, r16
    2e56:	91 83       	std	Z+1, r25	; 0x01
    2e58:	80 83       	st	Z, r24
    2e5a:	1f c0       	rjmp	.+62     	; 0x2e9a <main+0x99e>
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	e7 5b       	subi	r30, 0xB7	; 183
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	88 ec       	ldi	r24, 0xC8	; 200
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	91 83       	std	Z+1, r25	; 0x01
    2e68:	80 83       	st	Z, r24
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	e7 5b       	subi	r30, 0xB7	; 183
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	80 81       	ld	r24, Z
    2e72:	91 81       	ldd	r25, Z+1	; 0x01
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	f1 f7       	brne	.-4      	; 0x2e74 <main+0x978>
    2e78:	fe 01       	movw	r30, r28
    2e7a:	e7 5b       	subi	r30, 0xB7	; 183
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	91 83       	std	Z+1, r25	; 0x01
    2e80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e82:	de 01       	movw	r26, r28
    2e84:	a5 5b       	subi	r26, 0xB5	; 181
    2e86:	bf 4f       	sbci	r27, 0xFF	; 255
    2e88:	fe 01       	movw	r30, r28
    2e8a:	e5 5b       	subi	r30, 0xB5	; 181
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	80 81       	ld	r24, Z
    2e90:	91 81       	ldd	r25, Z+1	; 0x01
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	11 96       	adiw	r26, 0x01	; 1
    2e96:	9c 93       	st	X, r25
    2e98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	e5 5b       	subi	r30, 0xB5	; 181
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	80 81       	ld	r24, Z
    2ea2:	91 81       	ldd	r25, Z+1	; 0x01
    2ea4:	00 97       	sbiw	r24, 0x00	; 0
    2ea6:	d1 f6       	brne	.-76     	; 0x2e5c <main+0x960>
    2ea8:	27 c0       	rjmp	.+78     	; 0x2ef8 <main+0x9fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eaa:	8e 01       	movw	r16, r28
    2eac:	05 5b       	subi	r16, 0xB5	; 181
    2eae:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	e3 5b       	subi	r30, 0xB3	; 179
    2eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb6:	60 81       	ld	r22, Z
    2eb8:	71 81       	ldd	r23, Z+1	; 0x01
    2eba:	82 81       	ldd	r24, Z+2	; 0x02
    2ebc:	93 81       	ldd	r25, Z+3	; 0x03
    2ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	f8 01       	movw	r30, r16
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	80 83       	st	Z, r24
    2ecc:	de 01       	movw	r26, r28
    2ece:	a9 5b       	subi	r26, 0xB9	; 185
    2ed0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	e5 5b       	subi	r30, 0xB5	; 181
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	80 81       	ld	r24, Z
    2eda:	91 81       	ldd	r25, Z+1	; 0x01
    2edc:	8d 93       	st	X+, r24
    2ede:	9c 93       	st	X, r25
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	e9 5b       	subi	r30, 0xB9	; 185
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	80 81       	ld	r24, Z
    2ee8:	91 81       	ldd	r25, Z+1	; 0x01
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	f1 f7       	brne	.-4      	; 0x2eea <main+0x9ee>
    2eee:	fe 01       	movw	r30, r28
    2ef0:	e9 5b       	subi	r30, 0xB9	; 185
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	91 83       	std	Z+1, r25	; 0x01
    2ef6:	80 83       	st	Z, r24
			_delay_ms(10);
			DIO_VidSetPinValue(Port_D ,Pin_6 ,Low);
    2ef8:	85 e0       	ldi	r24, 0x05	; 5
    2efa:	66 e0       	ldi	r22, 0x06	; 6
    2efc:	40 e0       	ldi	r20, 0x00	; 0
    2efe:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_VidSetPinValue>
			DIO_VidSetPinDirection(Port_D ,Pin_5 ,input);
    2f02:	85 e0       	ldi	r24, 0x05	; 5
    2f04:	65 e0       	ldi	r22, 0x05	; 5
    2f06:	40 e0       	ldi	r20, 0x00	; 0
    2f08:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_VidSetPinDirection>
		}

		switch(command){
    2f0c:	80 91 95 01 	lds	r24, 0x0195
    2f10:	28 2f       	mov	r18, r24
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	ce 54       	subi	r28, 0x4E	; 78
    2f16:	df 4f       	sbci	r29, 0xFF	; 255
    2f18:	39 83       	std	Y+1, r19	; 0x01
    2f1a:	28 83       	st	Y, r18
    2f1c:	c2 5b       	subi	r28, 0xB2	; 178
    2f1e:	d0 40       	sbci	r29, 0x00	; 0
    2f20:	ce 54       	subi	r28, 0x4E	; 78
    2f22:	df 4f       	sbci	r29, 0xFF	; 255
    2f24:	88 81       	ld	r24, Y
    2f26:	99 81       	ldd	r25, Y+1	; 0x01
    2f28:	c2 5b       	subi	r28, 0xB2	; 178
    2f2a:	d0 40       	sbci	r29, 0x00	; 0
    2f2c:	88 36       	cpi	r24, 0x68	; 104
    2f2e:	91 05       	cpc	r25, r1
    2f30:	09 f4       	brne	.+2      	; 0x2f34 <main+0xa38>
    2f32:	c1 c0       	rjmp	.+386    	; 0x30b6 <main+0xbba>
    2f34:	ce 54       	subi	r28, 0x4E	; 78
    2f36:	df 4f       	sbci	r29, 0xFF	; 255
    2f38:	e8 81       	ld	r30, Y
    2f3a:	f9 81       	ldd	r31, Y+1	; 0x01
    2f3c:	c2 5b       	subi	r28, 0xB2	; 178
    2f3e:	d0 40       	sbci	r29, 0x00	; 0
    2f40:	e9 36       	cpi	r30, 0x69	; 105
    2f42:	f1 05       	cpc	r31, r1
    2f44:	ac f4       	brge	.+42     	; 0x2f70 <main+0xa74>
    2f46:	ce 54       	subi	r28, 0x4E	; 78
    2f48:	df 4f       	sbci	r29, 0xFF	; 255
    2f4a:	28 81       	ld	r18, Y
    2f4c:	39 81       	ldd	r19, Y+1	; 0x01
    2f4e:	c2 5b       	subi	r28, 0xB2	; 178
    2f50:	d0 40       	sbci	r29, 0x00	; 0
    2f52:	21 36       	cpi	r18, 0x61	; 97
    2f54:	31 05       	cpc	r19, r1
    2f56:	09 f4       	brne	.+2      	; 0x2f5a <main+0xa5e>
    2f58:	2a c1       	rjmp	.+596    	; 0x31ae <main+0xcb2>
    2f5a:	ce 54       	subi	r28, 0x4E	; 78
    2f5c:	df 4f       	sbci	r29, 0xFF	; 255
    2f5e:	88 81       	ld	r24, Y
    2f60:	99 81       	ldd	r25, Y+1	; 0x01
    2f62:	c2 5b       	subi	r28, 0xB2	; 178
    2f64:	d0 40       	sbci	r29, 0x00	; 0
    2f66:	86 36       	cpi	r24, 0x66	; 102
    2f68:	91 05       	cpc	r25, r1
    2f6a:	09 f4       	brne	.+2      	; 0x2f6e <main+0xa72>
    2f6c:	9c c2       	rjmp	.+1336   	; 0x34a6 <main+0xfaa>
    2f6e:	c5 c2       	rjmp	.+1418   	; 0x34fa <main+0xffe>
    2f70:	ce 54       	subi	r28, 0x4E	; 78
    2f72:	df 4f       	sbci	r29, 0xFF	; 255
    2f74:	e8 81       	ld	r30, Y
    2f76:	f9 81       	ldd	r31, Y+1	; 0x01
    2f78:	c2 5b       	subi	r28, 0xB2	; 178
    2f7a:	d0 40       	sbci	r29, 0x00	; 0
    2f7c:	e0 37       	cpi	r30, 0x70	; 112
    2f7e:	f1 05       	cpc	r31, r1
    2f80:	09 f4       	brne	.+2      	; 0x2f84 <main+0xa88>
    2f82:	13 c2       	rjmp	.+1062   	; 0x33aa <main+0xeae>
    2f84:	ce 54       	subi	r28, 0x4E	; 78
    2f86:	df 4f       	sbci	r29, 0xFF	; 255
    2f88:	28 81       	ld	r18, Y
    2f8a:	39 81       	ldd	r19, Y+1	; 0x01
    2f8c:	c2 5b       	subi	r28, 0xB2	; 178
    2f8e:	d0 40       	sbci	r29, 0x00	; 0
    2f90:	24 37       	cpi	r18, 0x74	; 116
    2f92:	31 05       	cpc	r19, r1
    2f94:	09 f0       	breq	.+2      	; 0x2f98 <main+0xa9c>
    2f96:	b1 c2       	rjmp	.+1378   	; 0x34fa <main+0xffe>

			/*set max temperature*/
			case('t'):{
				MaxTemp = atoi(Temp);
    2f98:	8b e8       	ldi	r24, 0x8B	; 139
    2f9a:	91 e0       	ldi	r25, 0x01	; 1
    2f9c:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <atoi>
    2fa0:	80 93 a6 01 	sts	0x01A6, r24
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	ed 5b       	subi	r30, 0xBD	; 189
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	a0 e8       	ldi	r26, 0x80	; 128
    2fb0:	bf e3       	ldi	r27, 0x3F	; 63
    2fb2:	80 83       	st	Z, r24
    2fb4:	91 83       	std	Z+1, r25	; 0x01
    2fb6:	a2 83       	std	Z+2, r26	; 0x02
    2fb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fba:	8e 01       	movw	r16, r28
    2fbc:	01 5c       	subi	r16, 0xC1	; 193
    2fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	ed 5b       	subi	r30, 0xBD	; 189
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	60 81       	ld	r22, Z
    2fc8:	71 81       	ldd	r23, Z+1	; 0x01
    2fca:	82 81       	ldd	r24, Z+2	; 0x02
    2fcc:	93 81       	ldd	r25, Z+3	; 0x03
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	4a ef       	ldi	r20, 0xFA	; 250
    2fd4:	54 e4       	ldi	r21, 0x44	; 68
    2fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	f8 01       	movw	r30, r16
    2fe0:	80 83       	st	Z, r24
    2fe2:	91 83       	std	Z+1, r25	; 0x01
    2fe4:	a2 83       	std	Z+2, r26	; 0x02
    2fe6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fe8:	fe 01       	movw	r30, r28
    2fea:	ff 96       	adiw	r30, 0x3f	; 63
    2fec:	60 81       	ld	r22, Z
    2fee:	71 81       	ldd	r23, Z+1	; 0x01
    2ff0:	82 81       	ldd	r24, Z+2	; 0x02
    2ff2:	93 81       	ldd	r25, Z+3	; 0x03
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	40 e8       	ldi	r20, 0x80	; 128
    2ffa:	5f e3       	ldi	r21, 0x3F	; 63
    2ffc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3000:	88 23       	and	r24, r24
    3002:	2c f4       	brge	.+10     	; 0x300e <main+0xb12>
		__ticks = 1;
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	9e af       	std	Y+62, r25	; 0x3e
    300a:	8d af       	std	Y+61, r24	; 0x3d
    300c:	46 c0       	rjmp	.+140    	; 0x309a <main+0xb9e>
	else if (__tmp > 65535)
    300e:	fe 01       	movw	r30, r28
    3010:	ff 96       	adiw	r30, 0x3f	; 63
    3012:	60 81       	ld	r22, Z
    3014:	71 81       	ldd	r23, Z+1	; 0x01
    3016:	82 81       	ldd	r24, Z+2	; 0x02
    3018:	93 81       	ldd	r25, Z+3	; 0x03
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	3f ef       	ldi	r19, 0xFF	; 255
    301e:	4f e7       	ldi	r20, 0x7F	; 127
    3020:	57 e4       	ldi	r21, 0x47	; 71
    3022:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3026:	18 16       	cp	r1, r24
    3028:	64 f5       	brge	.+88     	; 0x3082 <main+0xb86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    302a:	fe 01       	movw	r30, r28
    302c:	ed 5b       	subi	r30, 0xBD	; 189
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	60 81       	ld	r22, Z
    3032:	71 81       	ldd	r23, Z+1	; 0x01
    3034:	82 81       	ldd	r24, Z+2	; 0x02
    3036:	93 81       	ldd	r25, Z+3	; 0x03
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	40 e2       	ldi	r20, 0x20	; 32
    303e:	51 e4       	ldi	r21, 0x41	; 65
    3040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	bc 01       	movw	r22, r24
    304a:	cd 01       	movw	r24, r26
    304c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	9e af       	std	Y+62, r25	; 0x3e
    3056:	8d af       	std	Y+61, r24	; 0x3d
    3058:	0f c0       	rjmp	.+30     	; 0x3078 <main+0xb7c>
    305a:	88 ec       	ldi	r24, 0xC8	; 200
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	9c af       	std	Y+60, r25	; 0x3c
    3060:	8b af       	std	Y+59, r24	; 0x3b
    3062:	8b ad       	ldd	r24, Y+59	; 0x3b
    3064:	9c ad       	ldd	r25, Y+60	; 0x3c
    3066:	01 97       	sbiw	r24, 0x01	; 1
    3068:	f1 f7       	brne	.-4      	; 0x3066 <main+0xb6a>
    306a:	9c af       	std	Y+60, r25	; 0x3c
    306c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    306e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3070:	9e ad       	ldd	r25, Y+62	; 0x3e
    3072:	01 97       	sbiw	r24, 0x01	; 1
    3074:	9e af       	std	Y+62, r25	; 0x3e
    3076:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3078:	8d ad       	ldd	r24, Y+61	; 0x3d
    307a:	9e ad       	ldd	r25, Y+62	; 0x3e
    307c:	00 97       	sbiw	r24, 0x00	; 0
    307e:	69 f7       	brne	.-38     	; 0x305a <main+0xb5e>
    3080:	16 c0       	rjmp	.+44     	; 0x30ae <main+0xbb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3082:	fe 01       	movw	r30, r28
    3084:	ff 96       	adiw	r30, 0x3f	; 63
    3086:	60 81       	ld	r22, Z
    3088:	71 81       	ldd	r23, Z+1	; 0x01
    308a:	82 81       	ldd	r24, Z+2	; 0x02
    308c:	93 81       	ldd	r25, Z+3	; 0x03
    308e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	9e af       	std	Y+62, r25	; 0x3e
    3098:	8d af       	std	Y+61, r24	; 0x3d
    309a:	8d ad       	ldd	r24, Y+61	; 0x3d
    309c:	9e ad       	ldd	r25, Y+62	; 0x3e
    309e:	9a af       	std	Y+58, r25	; 0x3a
    30a0:	89 af       	std	Y+57, r24	; 0x39
    30a2:	89 ad       	ldd	r24, Y+57	; 0x39
    30a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	f1 f7       	brne	.-4      	; 0x30a6 <main+0xbaa>
    30aa:	9a af       	std	Y+58, r25	; 0x3a
    30ac:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(1);
				command = '\r' ;
    30ae:	8d e0       	ldi	r24, 0x0D	; 13
    30b0:	80 93 95 01 	sts	0x0195, r24
    30b4:	2c c2       	rjmp	.+1112   	; 0x350e <main+0x1012>
			}break;

			/*set max humidity*/
			case('h'):{
				MaxHumid = atoi(Temp);
    30b6:	8b e8       	ldi	r24, 0x8B	; 139
    30b8:	91 e0       	ldi	r25, 0x01	; 1
    30ba:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <atoi>
    30be:	80 93 a0 01 	sts	0x01A0, r24
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	a0 e8       	ldi	r26, 0x80	; 128
    30c8:	bf e3       	ldi	r27, 0x3F	; 63
    30ca:	8d ab       	std	Y+53, r24	; 0x35
    30cc:	9e ab       	std	Y+54, r25	; 0x36
    30ce:	af ab       	std	Y+55, r26	; 0x37
    30d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d2:	6d a9       	ldd	r22, Y+53	; 0x35
    30d4:	7e a9       	ldd	r23, Y+54	; 0x36
    30d6:	8f a9       	ldd	r24, Y+55	; 0x37
    30d8:	98 ad       	ldd	r25, Y+56	; 0x38
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	4a ef       	ldi	r20, 0xFA	; 250
    30e0:	54 e4       	ldi	r21, 0x44	; 68
    30e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	89 ab       	std	Y+49, r24	; 0x31
    30ec:	9a ab       	std	Y+50, r25	; 0x32
    30ee:	ab ab       	std	Y+51, r26	; 0x33
    30f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30f2:	69 a9       	ldd	r22, Y+49	; 0x31
    30f4:	7a a9       	ldd	r23, Y+50	; 0x32
    30f6:	8b a9       	ldd	r24, Y+51	; 0x33
    30f8:	9c a9       	ldd	r25, Y+52	; 0x34
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	40 e8       	ldi	r20, 0x80	; 128
    3100:	5f e3       	ldi	r21, 0x3F	; 63
    3102:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3106:	88 23       	and	r24, r24
    3108:	2c f4       	brge	.+10     	; 0x3114 <main+0xc18>
		__ticks = 1;
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	98 ab       	std	Y+48, r25	; 0x30
    3110:	8f a7       	std	Y+47, r24	; 0x2f
    3112:	3f c0       	rjmp	.+126    	; 0x3192 <main+0xc96>
	else if (__tmp > 65535)
    3114:	69 a9       	ldd	r22, Y+49	; 0x31
    3116:	7a a9       	ldd	r23, Y+50	; 0x32
    3118:	8b a9       	ldd	r24, Y+51	; 0x33
    311a:	9c a9       	ldd	r25, Y+52	; 0x34
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	3f ef       	ldi	r19, 0xFF	; 255
    3120:	4f e7       	ldi	r20, 0x7F	; 127
    3122:	57 e4       	ldi	r21, 0x47	; 71
    3124:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3128:	18 16       	cp	r1, r24
    312a:	4c f5       	brge	.+82     	; 0x317e <main+0xc82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    312c:	6d a9       	ldd	r22, Y+53	; 0x35
    312e:	7e a9       	ldd	r23, Y+54	; 0x36
    3130:	8f a9       	ldd	r24, Y+55	; 0x37
    3132:	98 ad       	ldd	r25, Y+56	; 0x38
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	40 e2       	ldi	r20, 0x20	; 32
    313a:	51 e4       	ldi	r21, 0x41	; 65
    313c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	bc 01       	movw	r22, r24
    3146:	cd 01       	movw	r24, r26
    3148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	98 ab       	std	Y+48, r25	; 0x30
    3152:	8f a7       	std	Y+47, r24	; 0x2f
    3154:	0f c0       	rjmp	.+30     	; 0x3174 <main+0xc78>
    3156:	88 ec       	ldi	r24, 0xC8	; 200
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	9e a7       	std	Y+46, r25	; 0x2e
    315c:	8d a7       	std	Y+45, r24	; 0x2d
    315e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3160:	9e a5       	ldd	r25, Y+46	; 0x2e
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	f1 f7       	brne	.-4      	; 0x3162 <main+0xc66>
    3166:	9e a7       	std	Y+46, r25	; 0x2e
    3168:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316a:	8f a5       	ldd	r24, Y+47	; 0x2f
    316c:	98 a9       	ldd	r25, Y+48	; 0x30
    316e:	01 97       	sbiw	r24, 0x01	; 1
    3170:	98 ab       	std	Y+48, r25	; 0x30
    3172:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3174:	8f a5       	ldd	r24, Y+47	; 0x2f
    3176:	98 a9       	ldd	r25, Y+48	; 0x30
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	69 f7       	brne	.-38     	; 0x3156 <main+0xc5a>
    317c:	14 c0       	rjmp	.+40     	; 0x31a6 <main+0xcaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    317e:	69 a9       	ldd	r22, Y+49	; 0x31
    3180:	7a a9       	ldd	r23, Y+50	; 0x32
    3182:	8b a9       	ldd	r24, Y+51	; 0x33
    3184:	9c a9       	ldd	r25, Y+52	; 0x34
    3186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	98 ab       	std	Y+48, r25	; 0x30
    3190:	8f a7       	std	Y+47, r24	; 0x2f
    3192:	8f a5       	ldd	r24, Y+47	; 0x2f
    3194:	98 a9       	ldd	r25, Y+48	; 0x30
    3196:	9c a7       	std	Y+44, r25	; 0x2c
    3198:	8b a7       	std	Y+43, r24	; 0x2b
    319a:	8b a5       	ldd	r24, Y+43	; 0x2b
    319c:	9c a5       	ldd	r25, Y+44	; 0x2c
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <main+0xca2>
    31a2:	9c a7       	std	Y+44, r25	; 0x2c
    31a4:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1);
				command = '\r' ;
    31a6:	8d e0       	ldi	r24, 0x0D	; 13
    31a8:	80 93 95 01 	sts	0x0195, r24
    31ac:	b0 c1       	rjmp	.+864    	; 0x350e <main+0x1012>
			}break;
    31ae:	80 e0       	ldi	r24, 0x00	; 0
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	a8 e4       	ldi	r26, 0x48	; 72
    31b4:	b2 e4       	ldi	r27, 0x42	; 66
    31b6:	8f a3       	std	Y+39, r24	; 0x27
    31b8:	98 a7       	std	Y+40, r25	; 0x28
    31ba:	a9 a7       	std	Y+41, r26	; 0x29
    31bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31be:	6f a1       	ldd	r22, Y+39	; 0x27
    31c0:	78 a5       	ldd	r23, Y+40	; 0x28
    31c2:	89 a5       	ldd	r24, Y+41	; 0x29
    31c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	4a ef       	ldi	r20, 0xFA	; 250
    31cc:	54 e4       	ldi	r21, 0x44	; 68
    31ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	8b a3       	std	Y+35, r24	; 0x23
    31d8:	9c a3       	std	Y+36, r25	; 0x24
    31da:	ad a3       	std	Y+37, r26	; 0x25
    31dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31de:	6b a1       	ldd	r22, Y+35	; 0x23
    31e0:	7c a1       	ldd	r23, Y+36	; 0x24
    31e2:	8d a1       	ldd	r24, Y+37	; 0x25
    31e4:	9e a1       	ldd	r25, Y+38	; 0x26
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	40 e8       	ldi	r20, 0x80	; 128
    31ec:	5f e3       	ldi	r21, 0x3F	; 63
    31ee:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    31f2:	88 23       	and	r24, r24
    31f4:	2c f4       	brge	.+10     	; 0x3200 <main+0xd04>
		__ticks = 1;
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	9a a3       	std	Y+34, r25	; 0x22
    31fc:	89 a3       	std	Y+33, r24	; 0x21
    31fe:	3f c0       	rjmp	.+126    	; 0x327e <main+0xd82>
	else if (__tmp > 65535)
    3200:	6b a1       	ldd	r22, Y+35	; 0x23
    3202:	7c a1       	ldd	r23, Y+36	; 0x24
    3204:	8d a1       	ldd	r24, Y+37	; 0x25
    3206:	9e a1       	ldd	r25, Y+38	; 0x26
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	3f ef       	ldi	r19, 0xFF	; 255
    320c:	4f e7       	ldi	r20, 0x7F	; 127
    320e:	57 e4       	ldi	r21, 0x47	; 71
    3210:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3214:	18 16       	cp	r1, r24
    3216:	4c f5       	brge	.+82     	; 0x326a <main+0xd6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3218:	6f a1       	ldd	r22, Y+39	; 0x27
    321a:	78 a5       	ldd	r23, Y+40	; 0x28
    321c:	89 a5       	ldd	r24, Y+41	; 0x29
    321e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	40 e2       	ldi	r20, 0x20	; 32
    3226:	51 e4       	ldi	r21, 0x41	; 65
    3228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	bc 01       	movw	r22, r24
    3232:	cd 01       	movw	r24, r26
    3234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3238:	dc 01       	movw	r26, r24
    323a:	cb 01       	movw	r24, r22
    323c:	9a a3       	std	Y+34, r25	; 0x22
    323e:	89 a3       	std	Y+33, r24	; 0x21
    3240:	0f c0       	rjmp	.+30     	; 0x3260 <main+0xd64>
    3242:	88 ec       	ldi	r24, 0xC8	; 200
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	98 a3       	std	Y+32, r25	; 0x20
    3248:	8f 8f       	std	Y+31, r24	; 0x1f
    324a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    324c:	98 a1       	ldd	r25, Y+32	; 0x20
    324e:	01 97       	sbiw	r24, 0x01	; 1
    3250:	f1 f7       	brne	.-4      	; 0x324e <main+0xd52>
    3252:	98 a3       	std	Y+32, r25	; 0x20
    3254:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3256:	89 a1       	ldd	r24, Y+33	; 0x21
    3258:	9a a1       	ldd	r25, Y+34	; 0x22
    325a:	01 97       	sbiw	r24, 0x01	; 1
    325c:	9a a3       	std	Y+34, r25	; 0x22
    325e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3260:	89 a1       	ldd	r24, Y+33	; 0x21
    3262:	9a a1       	ldd	r25, Y+34	; 0x22
    3264:	00 97       	sbiw	r24, 0x00	; 0
    3266:	69 f7       	brne	.-38     	; 0x3242 <main+0xd46>
    3268:	14 c0       	rjmp	.+40     	; 0x3292 <main+0xd96>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    326a:	6b a1       	ldd	r22, Y+35	; 0x23
    326c:	7c a1       	ldd	r23, Y+36	; 0x24
    326e:	8d a1       	ldd	r24, Y+37	; 0x25
    3270:	9e a1       	ldd	r25, Y+38	; 0x26
    3272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3276:	dc 01       	movw	r26, r24
    3278:	cb 01       	movw	r24, r22
    327a:	9a a3       	std	Y+34, r25	; 0x22
    327c:	89 a3       	std	Y+33, r24	; 0x21
    327e:	89 a1       	ldd	r24, Y+33	; 0x21
    3280:	9a a1       	ldd	r25, Y+34	; 0x22
    3282:	9e 8f       	std	Y+30, r25	; 0x1e
    3284:	8d 8f       	std	Y+29, r24	; 0x1d
    3286:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3288:	9e 8d       	ldd	r25, Y+30	; 0x1e
    328a:	01 97       	sbiw	r24, 0x01	; 1
    328c:	f1 f7       	brne	.-4      	; 0x328a <main+0xd8e>
    328e:	9e 8f       	std	Y+30, r25	; 0x1e
    3290:	8d 8f       	std	Y+29, r24	; 0x1d
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	a0 e8       	ldi	r26, 0x80	; 128
    3298:	bf e3       	ldi	r27, 0x3F	; 63
    329a:	89 8f       	std	Y+25, r24	; 0x19
    329c:	9a 8f       	std	Y+26, r25	; 0x1a
    329e:	ab 8f       	std	Y+27, r26	; 0x1b
    32a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a2:	69 8d       	ldd	r22, Y+25	; 0x19
    32a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	4a ef       	ldi	r20, 0xFA	; 250
    32b0:	54 e4       	ldi	r21, 0x44	; 68
    32b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	8d 8b       	std	Y+21, r24	; 0x15
    32bc:	9e 8b       	std	Y+22, r25	; 0x16
    32be:	af 8b       	std	Y+23, r26	; 0x17
    32c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32c2:	6d 89       	ldd	r22, Y+21	; 0x15
    32c4:	7e 89       	ldd	r23, Y+22	; 0x16
    32c6:	8f 89       	ldd	r24, Y+23	; 0x17
    32c8:	98 8d       	ldd	r25, Y+24	; 0x18
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	40 e8       	ldi	r20, 0x80	; 128
    32d0:	5f e3       	ldi	r21, 0x3F	; 63
    32d2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    32d6:	88 23       	and	r24, r24
    32d8:	2c f4       	brge	.+10     	; 0x32e4 <main+0xde8>
		__ticks = 1;
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	9c 8b       	std	Y+20, r25	; 0x14
    32e0:	8b 8b       	std	Y+19, r24	; 0x13
    32e2:	3f c0       	rjmp	.+126    	; 0x3362 <main+0xe66>
	else if (__tmp > 65535)
    32e4:	6d 89       	ldd	r22, Y+21	; 0x15
    32e6:	7e 89       	ldd	r23, Y+22	; 0x16
    32e8:	8f 89       	ldd	r24, Y+23	; 0x17
    32ea:	98 8d       	ldd	r25, Y+24	; 0x18
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	3f ef       	ldi	r19, 0xFF	; 255
    32f0:	4f e7       	ldi	r20, 0x7F	; 127
    32f2:	57 e4       	ldi	r21, 0x47	; 71
    32f4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    32f8:	18 16       	cp	r1, r24
    32fa:	4c f5       	brge	.+82     	; 0x334e <main+0xe52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32fc:	69 8d       	ldd	r22, Y+25	; 0x19
    32fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3300:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3302:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	40 e2       	ldi	r20, 0x20	; 32
    330a:	51 e4       	ldi	r21, 0x41	; 65
    330c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	bc 01       	movw	r22, r24
    3316:	cd 01       	movw	r24, r26
    3318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	9c 8b       	std	Y+20, r25	; 0x14
    3322:	8b 8b       	std	Y+19, r24	; 0x13
    3324:	0f c0       	rjmp	.+30     	; 0x3344 <main+0xe48>
    3326:	88 ec       	ldi	r24, 0xC8	; 200
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	9a 8b       	std	Y+18, r25	; 0x12
    332c:	89 8b       	std	Y+17, r24	; 0x11
    332e:	89 89       	ldd	r24, Y+17	; 0x11
    3330:	9a 89       	ldd	r25, Y+18	; 0x12
    3332:	01 97       	sbiw	r24, 0x01	; 1
    3334:	f1 f7       	brne	.-4      	; 0x3332 <main+0xe36>
    3336:	9a 8b       	std	Y+18, r25	; 0x12
    3338:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    333a:	8b 89       	ldd	r24, Y+19	; 0x13
    333c:	9c 89       	ldd	r25, Y+20	; 0x14
    333e:	01 97       	sbiw	r24, 0x01	; 1
    3340:	9c 8b       	std	Y+20, r25	; 0x14
    3342:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3344:	8b 89       	ldd	r24, Y+19	; 0x13
    3346:	9c 89       	ldd	r25, Y+20	; 0x14
    3348:	00 97       	sbiw	r24, 0x00	; 0
    334a:	69 f7       	brne	.-38     	; 0x3326 <main+0xe2a>
    334c:	14 c0       	rjmp	.+40     	; 0x3376 <main+0xe7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    334e:	6d 89       	ldd	r22, Y+21	; 0x15
    3350:	7e 89       	ldd	r23, Y+22	; 0x16
    3352:	8f 89       	ldd	r24, Y+23	; 0x17
    3354:	98 8d       	ldd	r25, Y+24	; 0x18
    3356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	9c 8b       	std	Y+20, r25	; 0x14
    3360:	8b 8b       	std	Y+19, r24	; 0x13
    3362:	8b 89       	ldd	r24, Y+19	; 0x13
    3364:	9c 89       	ldd	r25, Y+20	; 0x14
    3366:	98 8b       	std	Y+16, r25	; 0x10
    3368:	8f 87       	std	Y+15, r24	; 0x0f
    336a:	8f 85       	ldd	r24, Y+15	; 0x0f
    336c:	98 89       	ldd	r25, Y+16	; 0x10
    336e:	01 97       	sbiw	r24, 0x01	; 1
    3370:	f1 f7       	brne	.-4      	; 0x336e <main+0xe72>
    3372:	98 8b       	std	Y+16, r25	; 0x10
    3374:	8f 87       	std	Y+15, r24	; 0x0f

			/*set turning angle*/
			case('a'):{
				_delay_ms(50);
				_delay_ms(1);
				servo_angle = atoi(Temp);
    3376:	8b e8       	ldi	r24, 0x8B	; 139
    3378:	91 e0       	ldi	r25, 0x01	; 1
    337a:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <atoi>
    337e:	aa 27       	eor	r26, r26
    3380:	97 fd       	sbrc	r25, 7
    3382:	a0 95       	com	r26
    3384:	ba 2f       	mov	r27, r26
    3386:	bc 01       	movw	r22, r24
    3388:	cd 01       	movw	r24, r26
    338a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	80 93 78 01 	sts	0x0178, r24
    3396:	90 93 79 01 	sts	0x0179, r25
    339a:	a0 93 7a 01 	sts	0x017A, r26
    339e:	b0 93 7b 01 	sts	0x017B, r27
				command = '\r' ;
    33a2:	8d e0       	ldi	r24, 0x0D	; 13
    33a4:	80 93 95 01 	sts	0x0195, r24
    33a8:	b2 c0       	rjmp	.+356    	; 0x350e <main+0x1012>
			}break;

			/*set turning periodicity*/
			case('p'):{
				servo_time = atoi(Temp);
    33aa:	8b e8       	ldi	r24, 0x8B	; 139
    33ac:	91 e0       	ldi	r25, 0x01	; 1
    33ae:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <atoi>
    33b2:	90 93 7d 01 	sts	0x017D, r25
    33b6:	80 93 7c 01 	sts	0x017C, r24
    33ba:	80 e0       	ldi	r24, 0x00	; 0
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	a0 e8       	ldi	r26, 0x80	; 128
    33c0:	bf e3       	ldi	r27, 0x3F	; 63
    33c2:	8b 87       	std	Y+11, r24	; 0x0b
    33c4:	9c 87       	std	Y+12, r25	; 0x0c
    33c6:	ad 87       	std	Y+13, r26	; 0x0d
    33c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    33cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    33ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	4a ef       	ldi	r20, 0xFA	; 250
    33d8:	54 e4       	ldi	r21, 0x44	; 68
    33da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33de:	dc 01       	movw	r26, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	8f 83       	std	Y+7, r24	; 0x07
    33e4:	98 87       	std	Y+8, r25	; 0x08
    33e6:	a9 87       	std	Y+9, r26	; 0x09
    33e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33ea:	6f 81       	ldd	r22, Y+7	; 0x07
    33ec:	78 85       	ldd	r23, Y+8	; 0x08
    33ee:	89 85       	ldd	r24, Y+9	; 0x09
    33f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	40 e8       	ldi	r20, 0x80	; 128
    33f8:	5f e3       	ldi	r21, 0x3F	; 63
    33fa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    33fe:	88 23       	and	r24, r24
    3400:	2c f4       	brge	.+10     	; 0x340c <main+0xf10>
		__ticks = 1;
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	9e 83       	std	Y+6, r25	; 0x06
    3408:	8d 83       	std	Y+5, r24	; 0x05
    340a:	3f c0       	rjmp	.+126    	; 0x348a <main+0xf8e>
	else if (__tmp > 65535)
    340c:	6f 81       	ldd	r22, Y+7	; 0x07
    340e:	78 85       	ldd	r23, Y+8	; 0x08
    3410:	89 85       	ldd	r24, Y+9	; 0x09
    3412:	9a 85       	ldd	r25, Y+10	; 0x0a
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	3f ef       	ldi	r19, 0xFF	; 255
    3418:	4f e7       	ldi	r20, 0x7F	; 127
    341a:	57 e4       	ldi	r21, 0x47	; 71
    341c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3420:	18 16       	cp	r1, r24
    3422:	4c f5       	brge	.+82     	; 0x3476 <main+0xf7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3424:	6b 85       	ldd	r22, Y+11	; 0x0b
    3426:	7c 85       	ldd	r23, Y+12	; 0x0c
    3428:	8d 85       	ldd	r24, Y+13	; 0x0d
    342a:	9e 85       	ldd	r25, Y+14	; 0x0e
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	40 e2       	ldi	r20, 0x20	; 32
    3432:	51 e4       	ldi	r21, 0x41	; 65
    3434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3438:	dc 01       	movw	r26, r24
    343a:	cb 01       	movw	r24, r22
    343c:	bc 01       	movw	r22, r24
    343e:	cd 01       	movw	r24, r26
    3440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3444:	dc 01       	movw	r26, r24
    3446:	cb 01       	movw	r24, r22
    3448:	9e 83       	std	Y+6, r25	; 0x06
    344a:	8d 83       	std	Y+5, r24	; 0x05
    344c:	0f c0       	rjmp	.+30     	; 0x346c <main+0xf70>
    344e:	88 ec       	ldi	r24, 0xC8	; 200
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	9c 83       	std	Y+4, r25	; 0x04
    3454:	8b 83       	std	Y+3, r24	; 0x03
    3456:	8b 81       	ldd	r24, Y+3	; 0x03
    3458:	9c 81       	ldd	r25, Y+4	; 0x04
    345a:	01 97       	sbiw	r24, 0x01	; 1
    345c:	f1 f7       	brne	.-4      	; 0x345a <main+0xf5e>
    345e:	9c 83       	std	Y+4, r25	; 0x04
    3460:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3462:	8d 81       	ldd	r24, Y+5	; 0x05
    3464:	9e 81       	ldd	r25, Y+6	; 0x06
    3466:	01 97       	sbiw	r24, 0x01	; 1
    3468:	9e 83       	std	Y+6, r25	; 0x06
    346a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    346c:	8d 81       	ldd	r24, Y+5	; 0x05
    346e:	9e 81       	ldd	r25, Y+6	; 0x06
    3470:	00 97       	sbiw	r24, 0x00	; 0
    3472:	69 f7       	brne	.-38     	; 0x344e <main+0xf52>
    3474:	14 c0       	rjmp	.+40     	; 0x349e <main+0xfa2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3476:	6f 81       	ldd	r22, Y+7	; 0x07
    3478:	78 85       	ldd	r23, Y+8	; 0x08
    347a:	89 85       	ldd	r24, Y+9	; 0x09
    347c:	9a 85       	ldd	r25, Y+10	; 0x0a
    347e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	9e 83       	std	Y+6, r25	; 0x06
    3488:	8d 83       	std	Y+5, r24	; 0x05
    348a:	8d 81       	ldd	r24, Y+5	; 0x05
    348c:	9e 81       	ldd	r25, Y+6	; 0x06
    348e:	9a 83       	std	Y+2, r25	; 0x02
    3490:	89 83       	std	Y+1, r24	; 0x01
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	9a 81       	ldd	r25, Y+2	; 0x02
    3496:	01 97       	sbiw	r24, 0x01	; 1
    3498:	f1 f7       	brne	.-4      	; 0x3496 <main+0xf9a>
    349a:	9a 83       	std	Y+2, r25	; 0x02
    349c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1);
				command = '\r' ;
    349e:	8d e0       	ldi	r24, 0x0D	; 13
    34a0:	80 93 95 01 	sts	0x0195, r24
    34a4:	34 c0       	rjmp	.+104    	; 0x350e <main+0x1012>
			}break;

			case('f'):{
				On_Off_Flag = ! On_Off_Flag;
    34a6:	9e 01       	movw	r18, r28
    34a8:	2b 56       	subi	r18, 0x6B	; 107
    34aa:	3f 4f       	sbci	r19, 0xFF	; 255
    34ac:	cc 54       	subi	r28, 0x4C	; 76
    34ae:	df 4f       	sbci	r29, 0xFF	; 255
    34b0:	39 83       	std	Y+1, r19	; 0x01
    34b2:	28 83       	st	Y, r18
    34b4:	c4 5b       	subi	r28, 0xB4	; 180
    34b6:	d0 40       	sbci	r29, 0x00	; 0
    34b8:	ca 54       	subi	r28, 0x4A	; 74
    34ba:	df 4f       	sbci	r29, 0xFF	; 255
    34bc:	18 82       	st	Y, r1
    34be:	c6 5b       	subi	r28, 0xB6	; 182
    34c0:	d0 40       	sbci	r29, 0x00	; 0
    34c2:	fe 01       	movw	r30, r28
    34c4:	eb 56       	subi	r30, 0x6B	; 107
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	80 81       	ld	r24, Z
    34ca:	88 23       	and	r24, r24
    34cc:	31 f4       	brne	.+12     	; 0x34da <main+0xfde>
    34ce:	31 e0       	ldi	r19, 0x01	; 1
    34d0:	ca 54       	subi	r28, 0x4A	; 74
    34d2:	df 4f       	sbci	r29, 0xFF	; 255
    34d4:	38 83       	st	Y, r19
    34d6:	c6 5b       	subi	r28, 0xB6	; 182
    34d8:	d0 40       	sbci	r29, 0x00	; 0
    34da:	ca 54       	subi	r28, 0x4A	; 74
    34dc:	df 4f       	sbci	r29, 0xFF	; 255
    34de:	28 81       	ld	r18, Y
    34e0:	c6 5b       	subi	r28, 0xB6	; 182
    34e2:	d0 40       	sbci	r29, 0x00	; 0
    34e4:	cc 54       	subi	r28, 0x4C	; 76
    34e6:	df 4f       	sbci	r29, 0xFF	; 255
    34e8:	e8 81       	ld	r30, Y
    34ea:	f9 81       	ldd	r31, Y+1	; 0x01
    34ec:	c4 5b       	subi	r28, 0xB4	; 180
    34ee:	d0 40       	sbci	r29, 0x00	; 0
    34f0:	20 83       	st	Z, r18
				command = '\r' ;
    34f2:	8d e0       	ldi	r24, 0x0D	; 13
    34f4:	80 93 95 01 	sts	0x0195, r24
    34f8:	0a c0       	rjmp	.+20     	; 0x350e <main+0x1012>
			}break;

			default:{
				DIO_VidSetPinValue(Port_C , Pin_4 , Low);
    34fa:	84 e0       	ldi	r24, 0x04	; 4
    34fc:	64 e0       	ldi	r22, 0x04	; 4
    34fe:	40 e0       	ldi	r20, 0x00	; 0
    3500:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_VidSetPinValue>
				DIO_VidSetPinValue(Port_C , Pin_5 , Low);
    3504:	84 e0       	ldi	r24, 0x04	; 4
    3506:	65 e0       	ldi	r22, 0x05	; 5
    3508:	40 e0       	ldi	r20, 0x00	; 0
    350a:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_VidSetPinValue>
			}

		}
		if((MaxTemp > temp_read) && (On_Off_Flag)){
    350e:	80 91 a6 01 	lds	r24, 0x01A6
    3512:	99 27       	eor	r25, r25
    3514:	87 fd       	sbrc	r24, 7
    3516:	90 95       	com	r25
    3518:	a9 2f       	mov	r26, r25
    351a:	b9 2f       	mov	r27, r25
    351c:	bc 01       	movw	r22, r24
    351e:	cd 01       	movw	r24, r26
    3520:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	fe 01       	movw	r30, r28
    352a:	e6 56       	subi	r30, 0x66	; 102
    352c:	ff 4f       	sbci	r31, 0xFF	; 255
    352e:	bc 01       	movw	r22, r24
    3530:	cd 01       	movw	r24, r26
    3532:	20 81       	ld	r18, Z
    3534:	31 81       	ldd	r19, Z+1	; 0x01
    3536:	42 81       	ldd	r20, Z+2	; 0x02
    3538:	53 81       	ldd	r21, Z+3	; 0x03
    353a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    353e:	18 16       	cp	r1, r24
    3540:	5c f4       	brge	.+22     	; 0x3558 <main+0x105c>
    3542:	fe 01       	movw	r30, r28
    3544:	eb 56       	subi	r30, 0x6B	; 107
    3546:	ff 4f       	sbci	r31, 0xFF	; 255
    3548:	80 81       	ld	r24, Z
    354a:	88 23       	and	r24, r24
    354c:	29 f0       	breq	.+10     	; 0x3558 <main+0x105c>
			DIO_VidSetPinValue(Port_C , Pin_4 , High);
    354e:	84 e0       	ldi	r24, 0x04	; 4
    3550:	64 e0       	ldi	r22, 0x04	; 4
    3552:	41 e0       	ldi	r20, 0x01	; 1
    3554:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_VidSetPinValue>
		}

		if((MaxHumid > humid_Read) && (On_Off_Flag)){
    3558:	80 91 a0 01 	lds	r24, 0x01A0
    355c:	99 27       	eor	r25, r25
    355e:	87 fd       	sbrc	r24, 7
    3560:	90 95       	com	r25
    3562:	a9 2f       	mov	r26, r25
    3564:	b9 2f       	mov	r27, r25
    3566:	bc 01       	movw	r22, r24
    3568:	cd 01       	movw	r24, r26
    356a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	fe 01       	movw	r30, r28
    3574:	ea 56       	subi	r30, 0x6A	; 106
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	bc 01       	movw	r22, r24
    357a:	cd 01       	movw	r24, r26
    357c:	20 81       	ld	r18, Z
    357e:	31 81       	ldd	r19, Z+1	; 0x01
    3580:	42 81       	ldd	r20, Z+2	; 0x02
    3582:	53 81       	ldd	r21, Z+3	; 0x03
    3584:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3588:	18 16       	cp	r1, r24
    358a:	14 f0       	brlt	.+4      	; 0x3590 <main+0x1094>
    358c:	0c 94 c6 12 	jmp	0x258c	; 0x258c <main+0x90>
    3590:	fe 01       	movw	r30, r28
    3592:	eb 56       	subi	r30, 0x6B	; 107
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	80 81       	ld	r24, Z
    3598:	88 23       	and	r24, r24
    359a:	11 f4       	brne	.+4      	; 0x35a0 <main+0x10a4>
    359c:	0c 94 c6 12 	jmp	0x258c	; 0x258c <main+0x90>
			DIO_VidSetPinValue(Port_C , Pin_5 , High);
    35a0:	84 e0       	ldi	r24, 0x04	; 4
    35a2:	65 e0       	ldi	r22, 0x05	; 5
    35a4:	41 e0       	ldi	r20, 0x01	; 1
    35a6:	0e 94 12 08 	call	0x1024	; 0x1024 <DIO_VidSetPinValue>
    35aa:	0c 94 c6 12 	jmp	0x258c	; 0x258c <main+0x90>

000035ae <UART_VidRead_ISR>:

/***************************************************************
 ************ Functions ****************************************
 ***************************************************************/

void UART_VidRead_ISR(void){
    35ae:	df 93       	push	r29
    35b0:	cf 93       	push	r28
    35b2:	00 d0       	rcall	.+0      	; 0x35b4 <UART_VidRead_ISR+0x6>
    35b4:	cd b7       	in	r28, 0x3d	; 61
    35b6:	de b7       	in	r29, 0x3e	; 62
	static u8 counter = 0 ;

		if(ReceiveChar != '\r'){
    35b8:	80 91 a5 01 	lds	r24, 0x01A5
    35bc:	8d 30       	cpi	r24, 0x0D	; 13
    35be:	81 f0       	breq	.+32     	; 0x35e0 <UART_VidRead_ISR+0x32>
			ReceiveData[counter] = ReceiveChar ;
    35c0:	80 91 84 01 	lds	r24, 0x0184
    35c4:	88 2f       	mov	r24, r24
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	20 91 a5 01 	lds	r18, 0x01A5
    35cc:	fc 01       	movw	r30, r24
    35ce:	ea 56       	subi	r30, 0x6A	; 106
    35d0:	fe 4f       	sbci	r31, 0xFE	; 254
    35d2:	20 83       	st	Z, r18
			counter++;
    35d4:	80 91 84 01 	lds	r24, 0x0184
    35d8:	8f 5f       	subi	r24, 0xFF	; 255
    35da:	80 93 84 01 	sts	0x0184, r24
    35de:	30 c0       	rjmp	.+96     	; 0x3640 <UART_VidRead_ISR+0x92>
		}
		else if(ReceiveChar == '\r'){
    35e0:	80 91 a5 01 	lds	r24, 0x01A5
    35e4:	8d 30       	cpi	r24, 0x0D	; 13
    35e6:	61 f5       	brne	.+88     	; 0x3640 <UART_VidRead_ISR+0x92>
			counter = 0 ;
    35e8:	10 92 84 01 	sts	0x0184, r1
			*commandPtr = ReceiveData[0] ;
    35ec:	e0 91 72 01 	lds	r30, 0x0172
    35f0:	f0 91 73 01 	lds	r31, 0x0173
    35f4:	80 91 96 01 	lds	r24, 0x0196
    35f8:	80 83       	st	Z, r24

			for (int i = 0 ; ReceiveData[i]!='\0' ; i++){
    35fa:	1a 82       	std	Y+2, r1	; 0x02
    35fc:	19 82       	std	Y+1, r1	; 0x01
    35fe:	18 c0       	rjmp	.+48     	; 0x3630 <UART_VidRead_ISR+0x82>

				Temp[i] = ReceiveData[i+1] ;
    3600:	29 81       	ldd	r18, Y+1	; 0x01
    3602:	3a 81       	ldd	r19, Y+2	; 0x02
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	9a 81       	ldd	r25, Y+2	; 0x02
    3608:	01 96       	adiw	r24, 0x01	; 1
    360a:	fc 01       	movw	r30, r24
    360c:	ea 56       	subi	r30, 0x6A	; 106
    360e:	fe 4f       	sbci	r31, 0xFE	; 254
    3610:	80 81       	ld	r24, Z
    3612:	f9 01       	movw	r30, r18
    3614:	e5 57       	subi	r30, 0x75	; 117
    3616:	fe 4f       	sbci	r31, 0xFE	; 254
    3618:	80 83       	st	Z, r24
				ReceiveData[i] = 0 ;
    361a:	89 81       	ldd	r24, Y+1	; 0x01
    361c:	9a 81       	ldd	r25, Y+2	; 0x02
    361e:	fc 01       	movw	r30, r24
    3620:	ea 56       	subi	r30, 0x6A	; 106
    3622:	fe 4f       	sbci	r31, 0xFE	; 254
    3624:	10 82       	st	Z, r1
		}
		else if(ReceiveChar == '\r'){
			counter = 0 ;
			*commandPtr = ReceiveData[0] ;

			for (int i = 0 ; ReceiveData[i]!='\0' ; i++){
    3626:	89 81       	ldd	r24, Y+1	; 0x01
    3628:	9a 81       	ldd	r25, Y+2	; 0x02
    362a:	01 96       	adiw	r24, 0x01	; 1
    362c:	9a 83       	std	Y+2, r25	; 0x02
    362e:	89 83       	std	Y+1, r24	; 0x01
    3630:	89 81       	ldd	r24, Y+1	; 0x01
    3632:	9a 81       	ldd	r25, Y+2	; 0x02
    3634:	fc 01       	movw	r30, r24
    3636:	ea 56       	subi	r30, 0x6A	; 106
    3638:	fe 4f       	sbci	r31, 0xFE	; 254
    363a:	80 81       	ld	r24, Z
    363c:	88 23       	and	r24, r24
    363e:	01 f7       	brne	.-64     	; 0x3600 <UART_VidRead_ISR+0x52>

				Temp[i] = ReceiveData[i+1] ;
				ReceiveData[i] = 0 ;
			}
		}
}
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	cf 91       	pop	r28
    3646:	df 91       	pop	r29
    3648:	08 95       	ret

0000364a <Servo_angle>:
/*************************************
 ********* Servo Functions ***********
 *************************************/

/*Convert Angle*/
void Servo_angle ( f32 CPY_u8servo_angle){
    364a:	0f 93       	push	r16
    364c:	1f 93       	push	r17
    364e:	df 93       	push	r29
    3650:	cf 93       	push	r28
    3652:	00 d0       	rcall	.+0      	; 0x3654 <Servo_angle+0xa>
    3654:	00 d0       	rcall	.+0      	; 0x3656 <Servo_angle+0xc>
    3656:	cd b7       	in	r28, 0x3d	; 61
    3658:	de b7       	in	r29, 0x3e	; 62
    365a:	69 83       	std	Y+1, r22	; 0x01
    365c:	7a 83       	std	Y+2, r23	; 0x02
    365e:	8b 83       	std	Y+3, r24	; 0x03
    3660:	9c 83       	std	Y+4, r25	; 0x04

	*ptrCount1 = (90 - CPY_u8servo_angle) ;
    3662:	00 91 74 01 	lds	r16, 0x0174
    3666:	10 91 75 01 	lds	r17, 0x0175
    366a:	60 e0       	ldi	r22, 0x00	; 0
    366c:	70 e0       	ldi	r23, 0x00	; 0
    366e:	84 eb       	ldi	r24, 0xB4	; 180
    3670:	92 e4       	ldi	r25, 0x42	; 66
    3672:	29 81       	ldd	r18, Y+1	; 0x01
    3674:	3a 81       	ldd	r19, Y+2	; 0x02
    3676:	4b 81       	ldd	r20, Y+3	; 0x03
    3678:	5c 81       	ldd	r21, Y+4	; 0x04
    367a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	f8 01       	movw	r30, r16
    3684:	80 83       	st	Z, r24
    3686:	91 83       	std	Z+1, r25	; 0x01
    3688:	a2 83       	std	Z+2, r26	; 0x02
    368a:	b3 83       	std	Z+3, r27	; 0x03
	*ptrCount2 = (90 + CPY_u8servo_angle);
    368c:	00 91 76 01 	lds	r16, 0x0176
    3690:	10 91 77 01 	lds	r17, 0x0177
    3694:	69 81       	ldd	r22, Y+1	; 0x01
    3696:	7a 81       	ldd	r23, Y+2	; 0x02
    3698:	8b 81       	ldd	r24, Y+3	; 0x03
    369a:	9c 81       	ldd	r25, Y+4	; 0x04
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	44 eb       	ldi	r20, 0xB4	; 180
    36a2:	52 e4       	ldi	r21, 0x42	; 66
    36a4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	f8 01       	movw	r30, r16
    36ae:	80 83       	st	Z, r24
    36b0:	91 83       	std	Z+1, r25	; 0x01
    36b2:	a2 83       	std	Z+2, r26	; 0x02
    36b4:	b3 83       	std	Z+3, r27	; 0x03

}
    36b6:	0f 90       	pop	r0
    36b8:	0f 90       	pop	r0
    36ba:	0f 90       	pop	r0
    36bc:	0f 90       	pop	r0
    36be:	cf 91       	pop	r28
    36c0:	df 91       	pop	r29
    36c2:	1f 91       	pop	r17
    36c4:	0f 91       	pop	r16
    36c6:	08 95       	ret

000036c8 <Servo_Time>:
												/*****************************************************************/

/*Convert Time wanted to stand from (Seconds) To (Counts)*/
u32 Servo_Time (u16 CPY_u16Time){
    36c8:	df 93       	push	r29
    36ca:	cf 93       	push	r28
    36cc:	00 d0       	rcall	.+0      	; 0x36ce <Servo_Time+0x6>
    36ce:	00 d0       	rcall	.+0      	; 0x36d0 <Servo_Time+0x8>
    36d0:	00 d0       	rcall	.+0      	; 0x36d2 <Servo_Time+0xa>
    36d2:	cd b7       	in	r28, 0x3d	; 61
    36d4:	de b7       	in	r29, 0x3e	; 62
    36d6:	9e 83       	std	Y+6, r25	; 0x06
    36d8:	8d 83       	std	Y+5, r24	; 0x05

	u32 local_Time =(CPY_u16Time * 32);
    36da:	8d 81       	ldd	r24, Y+5	; 0x05
    36dc:	9e 81       	ldd	r25, Y+6	; 0x06
    36de:	88 0f       	add	r24, r24
    36e0:	99 1f       	adc	r25, r25
    36e2:	82 95       	swap	r24
    36e4:	92 95       	swap	r25
    36e6:	90 7f       	andi	r25, 0xF0	; 240
    36e8:	98 27       	eor	r25, r24
    36ea:	80 7f       	andi	r24, 0xF0	; 240
    36ec:	98 27       	eor	r25, r24
    36ee:	cc 01       	movw	r24, r24
    36f0:	a0 e0       	ldi	r26, 0x00	; 0
    36f2:	b0 e0       	ldi	r27, 0x00	; 0
    36f4:	89 83       	std	Y+1, r24	; 0x01
    36f6:	9a 83       	std	Y+2, r25	; 0x02
    36f8:	ab 83       	std	Y+3, r26	; 0x03
    36fa:	bc 83       	std	Y+4, r27	; 0x04

	return local_Time;
    36fc:	89 81       	ldd	r24, Y+1	; 0x01
    36fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3700:	ab 81       	ldd	r26, Y+3	; 0x03
    3702:	bc 81       	ldd	r27, Y+4	; 0x04
}
    3704:	bc 01       	movw	r22, r24
    3706:	cd 01       	movw	r24, r26
    3708:	26 96       	adiw	r28, 0x06	; 6
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	f8 94       	cli
    370e:	de bf       	out	0x3e, r29	; 62
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	cd bf       	out	0x3d, r28	; 61
    3714:	cf 91       	pop	r28
    3716:	df 91       	pop	r29
    3718:	08 95       	ret

0000371a <Servo_Control>:
												/*****************************************************************/
/*ISR TO Control the Servomotor*/
void Servo_Control (void)
{
    371a:	af 92       	push	r10
    371c:	bf 92       	push	r11
    371e:	cf 92       	push	r12
    3720:	df 92       	push	r13
    3722:	ef 92       	push	r14
    3724:	ff 92       	push	r15
    3726:	0f 93       	push	r16
    3728:	1f 93       	push	r17
    372a:	df 93       	push	r29
    372c:	cf 93       	push	r28
    372e:	00 d0       	rcall	.+0      	; 0x3730 <Servo_Control+0x16>
    3730:	00 d0       	rcall	.+0      	; 0x3732 <Servo_Control+0x18>
    3732:	00 d0       	rcall	.+0      	; 0x3734 <Servo_Control+0x1a>
    3734:	cd b7       	in	r28, 0x3d	; 61
    3736:	de b7       	in	r29, 0x3e	; 62
	Servo_angle ( servo_angle);
    3738:	80 91 78 01 	lds	r24, 0x0178
    373c:	90 91 79 01 	lds	r25, 0x0179
    3740:	a0 91 7a 01 	lds	r26, 0x017A
    3744:	b0 91 7b 01 	lds	r27, 0x017B
    3748:	bc 01       	movw	r22, r24
    374a:	cd 01       	movw	r24, r26
    374c:	0e 94 25 1b 	call	0x364a	; 0x364a <Servo_angle>
	f32 servo_pwm;
	static u8 Local_counter1 = 0 ;
	static u8 Local_counter2 = 0 ;
	Local_counter2 ++;
    3750:	80 91 85 01 	lds	r24, 0x0185
    3754:	8f 5f       	subi	r24, 0xFF	; 255
    3756:	80 93 85 01 	sts	0x0185, r24

	/*Over flow time 20 MS For Servo Pulse*/
	TIMR_VidSetICR(20000);//>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    375a:	80 e2       	ldi	r24, 0x20	; 32
    375c:	9e e4       	ldi	r25, 0x4E	; 78
    375e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <TIMR_VidSetICR>

	switch(Local_counter1){
    3762:	80 91 86 01 	lds	r24, 0x0186
    3766:	28 2f       	mov	r18, r24
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	3e 83       	std	Y+6, r19	; 0x06
    376c:	2d 83       	std	Y+5, r18	; 0x05
    376e:	8d 81       	ldd	r24, Y+5	; 0x05
    3770:	9e 81       	ldd	r25, Y+6	; 0x06
    3772:	81 30       	cpi	r24, 0x01	; 1
    3774:	91 05       	cpc	r25, r1
    3776:	09 f4       	brne	.+2      	; 0x377a <Servo_Control+0x60>
    3778:	57 c0       	rjmp	.+174    	; 0x3828 <Servo_Control+0x10e>
    377a:	2d 81       	ldd	r18, Y+5	; 0x05
    377c:	3e 81       	ldd	r19, Y+6	; 0x06
    377e:	22 30       	cpi	r18, 0x02	; 2
    3780:	31 05       	cpc	r19, r1
    3782:	2c f4       	brge	.+10     	; 0x378e <Servo_Control+0x74>
    3784:	8d 81       	ldd	r24, Y+5	; 0x05
    3786:	9e 81       	ldd	r25, Y+6	; 0x06
    3788:	00 97       	sbiw	r24, 0x00	; 0
    378a:	71 f0       	breq	.+28     	; 0x37a8 <Servo_Control+0x8e>
    378c:	14 c1       	rjmp	.+552    	; 0x39b6 <Servo_Control+0x29c>
    378e:	2d 81       	ldd	r18, Y+5	; 0x05
    3790:	3e 81       	ldd	r19, Y+6	; 0x06
    3792:	22 30       	cpi	r18, 0x02	; 2
    3794:	31 05       	cpc	r19, r1
    3796:	09 f4       	brne	.+2      	; 0x379a <Servo_Control+0x80>
    3798:	8b c0       	rjmp	.+278    	; 0x38b0 <Servo_Control+0x196>
    379a:	8d 81       	ldd	r24, Y+5	; 0x05
    379c:	9e 81       	ldd	r25, Y+6	; 0x06
    379e:	83 30       	cpi	r24, 0x03	; 3
    37a0:	91 05       	cpc	r25, r1
    37a2:	09 f4       	brne	.+2      	; 0x37a6 <Servo_Control+0x8c>
    37a4:	c5 c0       	rjmp	.+394    	; 0x3930 <Servo_Control+0x216>
    37a6:	07 c1       	rjmp	.+526    	; 0x39b6 <Servo_Control+0x29c>
	case 0 :
			/* Map the value to Generate needed PWM 0 degree*/
			servo_pwm = (map(0.0 , 180.0 , 1000.0 , 2000.0 , 90.0) - 0.2);//1500
    37a8:	00 d0       	rcall	.+0      	; 0x37aa <Servo_Control+0x90>
    37aa:	00 d0       	rcall	.+0      	; 0x37ac <Servo_Control+0x92>
    37ac:	ed b7       	in	r30, 0x3d	; 61
    37ae:	fe b7       	in	r31, 0x3e	; 62
    37b0:	31 96       	adiw	r30, 0x01	; 1
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	a4 eb       	ldi	r26, 0xB4	; 180
    37b8:	b2 e4       	ldi	r27, 0x42	; 66
    37ba:	80 83       	st	Z, r24
    37bc:	91 83       	std	Z+1, r25	; 0x01
    37be:	a2 83       	std	Z+2, r26	; 0x02
    37c0:	b3 83       	std	Z+3, r27	; 0x03
    37c2:	60 e0       	ldi	r22, 0x00	; 0
    37c4:	70 e0       	ldi	r23, 0x00	; 0
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	44 e3       	ldi	r20, 0x34	; 52
    37d0:	53 e4       	ldi	r21, 0x43	; 67
    37d2:	0f 2e       	mov	r0, r31
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	ef 2e       	mov	r14, r31
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	ff 2e       	mov	r15, r31
    37dc:	fa e7       	ldi	r31, 0x7A	; 122
    37de:	0f 2f       	mov	r16, r31
    37e0:	f4 e4       	ldi	r31, 0x44	; 68
    37e2:	1f 2f       	mov	r17, r31
    37e4:	f0 2d       	mov	r31, r0
    37e6:	0f 2e       	mov	r0, r31
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	af 2e       	mov	r10, r31
    37ec:	f0 e0       	ldi	r31, 0x00	; 0
    37ee:	bf 2e       	mov	r11, r31
    37f0:	fa ef       	ldi	r31, 0xFA	; 250
    37f2:	cf 2e       	mov	r12, r31
    37f4:	f4 e4       	ldi	r31, 0x44	; 68
    37f6:	df 2e       	mov	r13, r31
    37f8:	f0 2d       	mov	r31, r0
    37fa:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <map>
    37fe:	0f 90       	pop	r0
    3800:	0f 90       	pop	r0
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	dc 01       	movw	r26, r24
    3808:	cb 01       	movw	r24, r22
    380a:	bc 01       	movw	r22, r24
    380c:	cd 01       	movw	r24, r26
    380e:	2d ec       	ldi	r18, 0xCD	; 205
    3810:	3c ec       	ldi	r19, 0xCC	; 204
    3812:	4c e4       	ldi	r20, 0x4C	; 76
    3814:	5e e3       	ldi	r21, 0x3E	; 62
    3816:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    381a:	dc 01       	movw	r26, r24
    381c:	cb 01       	movw	r24, r22
    381e:	89 83       	std	Y+1, r24	; 0x01
    3820:	9a 83       	std	Y+2, r25	; 0x02
    3822:	ab 83       	std	Y+3, r26	; 0x03
    3824:	bc 83       	std	Y+4, r27	; 0x04
    3826:	c7 c0       	rjmp	.+398    	; 0x39b6 <Servo_Control+0x29c>
			break;
	case 1 :
			/* Map the value to Generate needed PWM needed degree*/
			servo_pwm = (map(0.0 , 180.0 , 1000.0 , 2000.0 , count1) -1.0);
    3828:	80 91 a1 01 	lds	r24, 0x01A1
    382c:	90 91 a2 01 	lds	r25, 0x01A2
    3830:	a0 91 a3 01 	lds	r26, 0x01A3
    3834:	b0 91 a4 01 	lds	r27, 0x01A4
    3838:	00 d0       	rcall	.+0      	; 0x383a <Servo_Control+0x120>
    383a:	00 d0       	rcall	.+0      	; 0x383c <Servo_Control+0x122>
    383c:	ed b7       	in	r30, 0x3d	; 61
    383e:	fe b7       	in	r31, 0x3e	; 62
    3840:	31 96       	adiw	r30, 0x01	; 1
    3842:	80 83       	st	Z, r24
    3844:	91 83       	std	Z+1, r25	; 0x01
    3846:	a2 83       	std	Z+2, r26	; 0x02
    3848:	b3 83       	std	Z+3, r27	; 0x03
    384a:	60 e0       	ldi	r22, 0x00	; 0
    384c:	70 e0       	ldi	r23, 0x00	; 0
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	44 e3       	ldi	r20, 0x34	; 52
    3858:	53 e4       	ldi	r21, 0x43	; 67
    385a:	0f 2e       	mov	r0, r31
    385c:	f0 e0       	ldi	r31, 0x00	; 0
    385e:	ef 2e       	mov	r14, r31
    3860:	f0 e0       	ldi	r31, 0x00	; 0
    3862:	ff 2e       	mov	r15, r31
    3864:	fa e7       	ldi	r31, 0x7A	; 122
    3866:	0f 2f       	mov	r16, r31
    3868:	f4 e4       	ldi	r31, 0x44	; 68
    386a:	1f 2f       	mov	r17, r31
    386c:	f0 2d       	mov	r31, r0
    386e:	0f 2e       	mov	r0, r31
    3870:	f0 e0       	ldi	r31, 0x00	; 0
    3872:	af 2e       	mov	r10, r31
    3874:	f0 e0       	ldi	r31, 0x00	; 0
    3876:	bf 2e       	mov	r11, r31
    3878:	fa ef       	ldi	r31, 0xFA	; 250
    387a:	cf 2e       	mov	r12, r31
    387c:	f4 e4       	ldi	r31, 0x44	; 68
    387e:	df 2e       	mov	r13, r31
    3880:	f0 2d       	mov	r31, r0
    3882:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <map>
    3886:	0f 90       	pop	r0
    3888:	0f 90       	pop	r0
    388a:	0f 90       	pop	r0
    388c:	0f 90       	pop	r0
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	bc 01       	movw	r22, r24
    3894:	cd 01       	movw	r24, r26
    3896:	20 e0       	ldi	r18, 0x00	; 0
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	40 e8       	ldi	r20, 0x80	; 128
    389c:	5f e3       	ldi	r21, 0x3F	; 63
    389e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    38a2:	dc 01       	movw	r26, r24
    38a4:	cb 01       	movw	r24, r22
    38a6:	89 83       	std	Y+1, r24	; 0x01
    38a8:	9a 83       	std	Y+2, r25	; 0x02
    38aa:	ab 83       	std	Y+3, r26	; 0x03
    38ac:	bc 83       	std	Y+4, r27	; 0x04
    38ae:	83 c0       	rjmp	.+262    	; 0x39b6 <Servo_Control+0x29c>
			break;
	case 2 :
			/* Map the value to Generate needed PWM for 0 degree*/
			servo_pwm = (map(0.0 , 180.0 , 1000.0 , 2000.0 , 90.0) - 0.2);
    38b0:	00 d0       	rcall	.+0      	; 0x38b2 <Servo_Control+0x198>
    38b2:	00 d0       	rcall	.+0      	; 0x38b4 <Servo_Control+0x19a>
    38b4:	ed b7       	in	r30, 0x3d	; 61
    38b6:	fe b7       	in	r31, 0x3e	; 62
    38b8:	31 96       	adiw	r30, 0x01	; 1
    38ba:	80 e0       	ldi	r24, 0x00	; 0
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	a4 eb       	ldi	r26, 0xB4	; 180
    38c0:	b2 e4       	ldi	r27, 0x42	; 66
    38c2:	80 83       	st	Z, r24
    38c4:	91 83       	std	Z+1, r25	; 0x01
    38c6:	a2 83       	std	Z+2, r26	; 0x02
    38c8:	b3 83       	std	Z+3, r27	; 0x03
    38ca:	60 e0       	ldi	r22, 0x00	; 0
    38cc:	70 e0       	ldi	r23, 0x00	; 0
    38ce:	80 e0       	ldi	r24, 0x00	; 0
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	20 e0       	ldi	r18, 0x00	; 0
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	44 e3       	ldi	r20, 0x34	; 52
    38d8:	53 e4       	ldi	r21, 0x43	; 67
    38da:	0f 2e       	mov	r0, r31
    38dc:	f0 e0       	ldi	r31, 0x00	; 0
    38de:	ef 2e       	mov	r14, r31
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	ff 2e       	mov	r15, r31
    38e4:	fa e7       	ldi	r31, 0x7A	; 122
    38e6:	0f 2f       	mov	r16, r31
    38e8:	f4 e4       	ldi	r31, 0x44	; 68
    38ea:	1f 2f       	mov	r17, r31
    38ec:	f0 2d       	mov	r31, r0
    38ee:	0f 2e       	mov	r0, r31
    38f0:	f0 e0       	ldi	r31, 0x00	; 0
    38f2:	af 2e       	mov	r10, r31
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	bf 2e       	mov	r11, r31
    38f8:	fa ef       	ldi	r31, 0xFA	; 250
    38fa:	cf 2e       	mov	r12, r31
    38fc:	f4 e4       	ldi	r31, 0x44	; 68
    38fe:	df 2e       	mov	r13, r31
    3900:	f0 2d       	mov	r31, r0
    3902:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <map>
    3906:	0f 90       	pop	r0
    3908:	0f 90       	pop	r0
    390a:	0f 90       	pop	r0
    390c:	0f 90       	pop	r0
    390e:	dc 01       	movw	r26, r24
    3910:	cb 01       	movw	r24, r22
    3912:	bc 01       	movw	r22, r24
    3914:	cd 01       	movw	r24, r26
    3916:	2d ec       	ldi	r18, 0xCD	; 205
    3918:	3c ec       	ldi	r19, 0xCC	; 204
    391a:	4c e4       	ldi	r20, 0x4C	; 76
    391c:	5e e3       	ldi	r21, 0x3E	; 62
    391e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	89 83       	std	Y+1, r24	; 0x01
    3928:	9a 83       	std	Y+2, r25	; 0x02
    392a:	ab 83       	std	Y+3, r26	; 0x03
    392c:	bc 83       	std	Y+4, r27	; 0x04
    392e:	43 c0       	rjmp	.+134    	; 0x39b6 <Servo_Control+0x29c>
			break;
	case 3 :
			/* Map the value to Generate needed PWM needed degree*/
			servo_pwm = (map(0.0 , 180.0 , 1000.0 , 2000.0 , count2) -0.5);
    3930:	80 91 87 01 	lds	r24, 0x0187
    3934:	90 91 88 01 	lds	r25, 0x0188
    3938:	a0 91 89 01 	lds	r26, 0x0189
    393c:	b0 91 8a 01 	lds	r27, 0x018A
    3940:	00 d0       	rcall	.+0      	; 0x3942 <Servo_Control+0x228>
    3942:	00 d0       	rcall	.+0      	; 0x3944 <Servo_Control+0x22a>
    3944:	ed b7       	in	r30, 0x3d	; 61
    3946:	fe b7       	in	r31, 0x3e	; 62
    3948:	31 96       	adiw	r30, 0x01	; 1
    394a:	80 83       	st	Z, r24
    394c:	91 83       	std	Z+1, r25	; 0x01
    394e:	a2 83       	std	Z+2, r26	; 0x02
    3950:	b3 83       	std	Z+3, r27	; 0x03
    3952:	60 e0       	ldi	r22, 0x00	; 0
    3954:	70 e0       	ldi	r23, 0x00	; 0
    3956:	80 e0       	ldi	r24, 0x00	; 0
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	44 e3       	ldi	r20, 0x34	; 52
    3960:	53 e4       	ldi	r21, 0x43	; 67
    3962:	0f 2e       	mov	r0, r31
    3964:	f0 e0       	ldi	r31, 0x00	; 0
    3966:	ef 2e       	mov	r14, r31
    3968:	f0 e0       	ldi	r31, 0x00	; 0
    396a:	ff 2e       	mov	r15, r31
    396c:	fa e7       	ldi	r31, 0x7A	; 122
    396e:	0f 2f       	mov	r16, r31
    3970:	f4 e4       	ldi	r31, 0x44	; 68
    3972:	1f 2f       	mov	r17, r31
    3974:	f0 2d       	mov	r31, r0
    3976:	0f 2e       	mov	r0, r31
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	af 2e       	mov	r10, r31
    397c:	f0 e0       	ldi	r31, 0x00	; 0
    397e:	bf 2e       	mov	r11, r31
    3980:	fa ef       	ldi	r31, 0xFA	; 250
    3982:	cf 2e       	mov	r12, r31
    3984:	f4 e4       	ldi	r31, 0x44	; 68
    3986:	df 2e       	mov	r13, r31
    3988:	f0 2d       	mov	r31, r0
    398a:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <map>
    398e:	0f 90       	pop	r0
    3990:	0f 90       	pop	r0
    3992:	0f 90       	pop	r0
    3994:	0f 90       	pop	r0
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	bc 01       	movw	r22, r24
    399c:	cd 01       	movw	r24, r26
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	40 e0       	ldi	r20, 0x00	; 0
    39a4:	5f e3       	ldi	r21, 0x3F	; 63
    39a6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	89 83       	std	Y+1, r24	; 0x01
    39b0:	9a 83       	std	Y+2, r25	; 0x02
    39b2:	ab 83       	std	Y+3, r26	; 0x03
    39b4:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}


	/* Generate the pulse */
	TIMR_VidSetOCR(servo_pwm);//>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    39b6:	69 81       	ldd	r22, Y+1	; 0x01
    39b8:	7a 81       	ldd	r23, Y+2	; 0x02
    39ba:	8b 81       	ldd	r24, Y+3	; 0x03
    39bc:	9c 81       	ldd	r25, Y+4	; 0x04
    39be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <TIMR_VidSetOCR>

	/*every (servo_time) second will change the Angle*/
	if(Local_counter2 == Servo_Time (servo_time))
    39ca:	80 91 85 01 	lds	r24, 0x0185
    39ce:	e8 2e       	mov	r14, r24
    39d0:	ff 24       	eor	r15, r15
    39d2:	00 e0       	ldi	r16, 0x00	; 0
    39d4:	10 e0       	ldi	r17, 0x00	; 0
    39d6:	80 91 7c 01 	lds	r24, 0x017C
    39da:	90 91 7d 01 	lds	r25, 0x017D
    39de:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <Servo_Time>
    39e2:	dc 01       	movw	r26, r24
    39e4:	cb 01       	movw	r24, r22
    39e6:	e8 16       	cp	r14, r24
    39e8:	f9 06       	cpc	r15, r25
    39ea:	0a 07       	cpc	r16, r26
    39ec:	1b 07       	cpc	r17, r27
    39ee:	69 f4       	brne	.+26     	; 0x3a0a <Servo_Control+0x2f0>
	{
		Local_counter1++ ;
    39f0:	80 91 86 01 	lds	r24, 0x0186
    39f4:	8f 5f       	subi	r24, 0xFF	; 255
    39f6:	80 93 86 01 	sts	0x0186, r24
		Local_counter2 = 0 ;
    39fa:	10 92 85 01 	sts	0x0185, r1

		if(Local_counter1 == 4)
    39fe:	80 91 86 01 	lds	r24, 0x0186
    3a02:	84 30       	cpi	r24, 0x04	; 4
    3a04:	11 f4       	brne	.+4      	; 0x3a0a <Servo_Control+0x2f0>
		{
			Local_counter1 = 0 ;
    3a06:	10 92 86 01 	sts	0x0186, r1
		}
	 }
}
    3a0a:	26 96       	adiw	r28, 0x06	; 6
    3a0c:	0f b6       	in	r0, 0x3f	; 63
    3a0e:	f8 94       	cli
    3a10:	de bf       	out	0x3e, r29	; 62
    3a12:	0f be       	out	0x3f, r0	; 63
    3a14:	cd bf       	out	0x3d, r28	; 61
    3a16:	cf 91       	pop	r28
    3a18:	df 91       	pop	r29
    3a1a:	1f 91       	pop	r17
    3a1c:	0f 91       	pop	r16
    3a1e:	ff 90       	pop	r15
    3a20:	ef 90       	pop	r14
    3a22:	df 90       	pop	r13
    3a24:	cf 90       	pop	r12
    3a26:	bf 90       	pop	r11
    3a28:	af 90       	pop	r10
    3a2a:	08 95       	ret

00003a2c <map>:

/*For Maping ServoMotor Pulse*/

f32 map (f32 Cpy_InputMini , f32 Cpy_InputMax , f32 Cpy_OutMini , f32 Cpy_OutMax ,  f32 Cpy_val)
{
    3a2c:	af 92       	push	r10
    3a2e:	bf 92       	push	r11
    3a30:	cf 92       	push	r12
    3a32:	df 92       	push	r13
    3a34:	ef 92       	push	r14
    3a36:	ff 92       	push	r15
    3a38:	0f 93       	push	r16
    3a3a:	1f 93       	push	r17
    3a3c:	df 93       	push	r29
    3a3e:	cf 93       	push	r28
    3a40:	cd b7       	in	r28, 0x3d	; 61
    3a42:	de b7       	in	r29, 0x3e	; 62
    3a44:	64 97       	sbiw	r28, 0x14	; 20
    3a46:	0f b6       	in	r0, 0x3f	; 63
    3a48:	f8 94       	cli
    3a4a:	de bf       	out	0x3e, r29	; 62
    3a4c:	0f be       	out	0x3f, r0	; 63
    3a4e:	cd bf       	out	0x3d, r28	; 61
    3a50:	6d 83       	std	Y+5, r22	; 0x05
    3a52:	7e 83       	std	Y+6, r23	; 0x06
    3a54:	8f 83       	std	Y+7, r24	; 0x07
    3a56:	98 87       	std	Y+8, r25	; 0x08
    3a58:	29 87       	std	Y+9, r18	; 0x09
    3a5a:	3a 87       	std	Y+10, r19	; 0x0a
    3a5c:	4b 87       	std	Y+11, r20	; 0x0b
    3a5e:	5c 87       	std	Y+12, r21	; 0x0c
    3a60:	ed 86       	std	Y+13, r14	; 0x0d
    3a62:	fe 86       	std	Y+14, r15	; 0x0e
    3a64:	0f 87       	std	Y+15, r16	; 0x0f
    3a66:	18 8b       	std	Y+16, r17	; 0x10
    3a68:	a9 8a       	std	Y+17, r10	; 0x11
    3a6a:	ba 8a       	std	Y+18, r11	; 0x12
    3a6c:	cb 8a       	std	Y+19, r12	; 0x13
    3a6e:	dc 8a       	std	Y+20, r13	; 0x14
	f32 local_holder = Cpy_val - Cpy_InputMax ;
    3a70:	69 a1       	ldd	r22, Y+33	; 0x21
    3a72:	7a a1       	ldd	r23, Y+34	; 0x22
    3a74:	8b a1       	ldd	r24, Y+35	; 0x23
    3a76:	9c a1       	ldd	r25, Y+36	; 0x24
    3a78:	29 85       	ldd	r18, Y+9	; 0x09
    3a7a:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a7c:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a7e:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a80:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	89 83       	std	Y+1, r24	; 0x01
    3a8a:	9a 83       	std	Y+2, r25	; 0x02
    3a8c:	ab 83       	std	Y+3, r26	; 0x03
    3a8e:	bc 83       	std	Y+4, r27	; 0x04
	local_holder *= (Cpy_OutMini - Cpy_OutMax);
    3a90:	6d 85       	ldd	r22, Y+13	; 0x0d
    3a92:	7e 85       	ldd	r23, Y+14	; 0x0e
    3a94:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a96:	98 89       	ldd	r25, Y+16	; 0x10
    3a98:	29 89       	ldd	r18, Y+17	; 0x11
    3a9a:	3a 89       	ldd	r19, Y+18	; 0x12
    3a9c:	4b 89       	ldd	r20, Y+19	; 0x13
    3a9e:	5c 89       	ldd	r21, Y+20	; 0x14
    3aa0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	9c 01       	movw	r18, r24
    3aaa:	ad 01       	movw	r20, r26
    3aac:	69 81       	ldd	r22, Y+1	; 0x01
    3aae:	7a 81       	ldd	r23, Y+2	; 0x02
    3ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab8:	dc 01       	movw	r26, r24
    3aba:	cb 01       	movw	r24, r22
    3abc:	89 83       	std	Y+1, r24	; 0x01
    3abe:	9a 83       	std	Y+2, r25	; 0x02
    3ac0:	ab 83       	std	Y+3, r26	; 0x03
    3ac2:	bc 83       	std	Y+4, r27	; 0x04
	local_holder /= (Cpy_InputMini - Cpy_InputMax);
    3ac4:	6d 81       	ldd	r22, Y+5	; 0x05
    3ac6:	7e 81       	ldd	r23, Y+6	; 0x06
    3ac8:	8f 81       	ldd	r24, Y+7	; 0x07
    3aca:	98 85       	ldd	r25, Y+8	; 0x08
    3acc:	29 85       	ldd	r18, Y+9	; 0x09
    3ace:	3a 85       	ldd	r19, Y+10	; 0x0a
    3ad0:	4b 85       	ldd	r20, Y+11	; 0x0b
    3ad2:	5c 85       	ldd	r21, Y+12	; 0x0c
    3ad4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3ad8:	dc 01       	movw	r26, r24
    3ada:	cb 01       	movw	r24, r22
    3adc:	9c 01       	movw	r18, r24
    3ade:	ad 01       	movw	r20, r26
    3ae0:	69 81       	ldd	r22, Y+1	; 0x01
    3ae2:	7a 81       	ldd	r23, Y+2	; 0x02
    3ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3aec:	dc 01       	movw	r26, r24
    3aee:	cb 01       	movw	r24, r22
    3af0:	89 83       	std	Y+1, r24	; 0x01
    3af2:	9a 83       	std	Y+2, r25	; 0x02
    3af4:	ab 83       	std	Y+3, r26	; 0x03
    3af6:	bc 83       	std	Y+4, r27	; 0x04
	local_holder += Cpy_OutMax ;
    3af8:	69 81       	ldd	r22, Y+1	; 0x01
    3afa:	7a 81       	ldd	r23, Y+2	; 0x02
    3afc:	8b 81       	ldd	r24, Y+3	; 0x03
    3afe:	9c 81       	ldd	r25, Y+4	; 0x04
    3b00:	29 89       	ldd	r18, Y+17	; 0x11
    3b02:	3a 89       	ldd	r19, Y+18	; 0x12
    3b04:	4b 89       	ldd	r20, Y+19	; 0x13
    3b06:	5c 89       	ldd	r21, Y+20	; 0x14
    3b08:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	cb 01       	movw	r24, r22
    3b10:	89 83       	std	Y+1, r24	; 0x01
    3b12:	9a 83       	std	Y+2, r25	; 0x02
    3b14:	ab 83       	std	Y+3, r26	; 0x03
    3b16:	bc 83       	std	Y+4, r27	; 0x04
	return local_holder ;
    3b18:	89 81       	ldd	r24, Y+1	; 0x01
    3b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1c:	ab 81       	ldd	r26, Y+3	; 0x03
    3b1e:	bc 81       	ldd	r27, Y+4	; 0x04
}
    3b20:	bc 01       	movw	r22, r24
    3b22:	cd 01       	movw	r24, r26
    3b24:	64 96       	adiw	r28, 0x14	; 20
    3b26:	0f b6       	in	r0, 0x3f	; 63
    3b28:	f8 94       	cli
    3b2a:	de bf       	out	0x3e, r29	; 62
    3b2c:	0f be       	out	0x3f, r0	; 63
    3b2e:	cd bf       	out	0x3d, r28	; 61
    3b30:	cf 91       	pop	r28
    3b32:	df 91       	pop	r29
    3b34:	1f 91       	pop	r17
    3b36:	0f 91       	pop	r16
    3b38:	ff 90       	pop	r15
    3b3a:	ef 90       	pop	r14
    3b3c:	df 90       	pop	r13
    3b3e:	cf 90       	pop	r12
    3b40:	bf 90       	pop	r11
    3b42:	af 90       	pop	r10
    3b44:	08 95       	ret

00003b46 <__prologue_saves__>:
    3b46:	2f 92       	push	r2
    3b48:	3f 92       	push	r3
    3b4a:	4f 92       	push	r4
    3b4c:	5f 92       	push	r5
    3b4e:	6f 92       	push	r6
    3b50:	7f 92       	push	r7
    3b52:	8f 92       	push	r8
    3b54:	9f 92       	push	r9
    3b56:	af 92       	push	r10
    3b58:	bf 92       	push	r11
    3b5a:	cf 92       	push	r12
    3b5c:	df 92       	push	r13
    3b5e:	ef 92       	push	r14
    3b60:	ff 92       	push	r15
    3b62:	0f 93       	push	r16
    3b64:	1f 93       	push	r17
    3b66:	cf 93       	push	r28
    3b68:	df 93       	push	r29
    3b6a:	cd b7       	in	r28, 0x3d	; 61
    3b6c:	de b7       	in	r29, 0x3e	; 62
    3b6e:	ca 1b       	sub	r28, r26
    3b70:	db 0b       	sbc	r29, r27
    3b72:	0f b6       	in	r0, 0x3f	; 63
    3b74:	f8 94       	cli
    3b76:	de bf       	out	0x3e, r29	; 62
    3b78:	0f be       	out	0x3f, r0	; 63
    3b7a:	cd bf       	out	0x3d, r28	; 61
    3b7c:	09 94       	ijmp

00003b7e <__epilogue_restores__>:
    3b7e:	2a 88       	ldd	r2, Y+18	; 0x12
    3b80:	39 88       	ldd	r3, Y+17	; 0x11
    3b82:	48 88       	ldd	r4, Y+16	; 0x10
    3b84:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b86:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b88:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b90:	b9 84       	ldd	r11, Y+9	; 0x09
    3b92:	c8 84       	ldd	r12, Y+8	; 0x08
    3b94:	df 80       	ldd	r13, Y+7	; 0x07
    3b96:	ee 80       	ldd	r14, Y+6	; 0x06
    3b98:	fd 80       	ldd	r15, Y+5	; 0x05
    3b9a:	0c 81       	ldd	r16, Y+4	; 0x04
    3b9c:	1b 81       	ldd	r17, Y+3	; 0x03
    3b9e:	aa 81       	ldd	r26, Y+2	; 0x02
    3ba0:	b9 81       	ldd	r27, Y+1	; 0x01
    3ba2:	ce 0f       	add	r28, r30
    3ba4:	d1 1d       	adc	r29, r1
    3ba6:	0f b6       	in	r0, 0x3f	; 63
    3ba8:	f8 94       	cli
    3baa:	de bf       	out	0x3e, r29	; 62
    3bac:	0f be       	out	0x3f, r0	; 63
    3bae:	cd bf       	out	0x3d, r28	; 61
    3bb0:	ed 01       	movw	r28, r26
    3bb2:	08 95       	ret

00003bb4 <atoi>:
    3bb4:	fc 01       	movw	r30, r24
    3bb6:	88 27       	eor	r24, r24
    3bb8:	99 27       	eor	r25, r25
    3bba:	e8 94       	clt
    3bbc:	21 91       	ld	r18, Z+
    3bbe:	20 32       	cpi	r18, 0x20	; 32
    3bc0:	e9 f3       	breq	.-6      	; 0x3bbc <atoi+0x8>
    3bc2:	29 30       	cpi	r18, 0x09	; 9
    3bc4:	10 f0       	brcs	.+4      	; 0x3bca <atoi+0x16>
    3bc6:	2e 30       	cpi	r18, 0x0E	; 14
    3bc8:	c8 f3       	brcs	.-14     	; 0x3bbc <atoi+0x8>
    3bca:	2b 32       	cpi	r18, 0x2B	; 43
    3bcc:	41 f0       	breq	.+16     	; 0x3bde <atoi+0x2a>
    3bce:	2d 32       	cpi	r18, 0x2D	; 45
    3bd0:	39 f4       	brne	.+14     	; 0x3be0 <atoi+0x2c>
    3bd2:	68 94       	set
    3bd4:	04 c0       	rjmp	.+8      	; 0x3bde <atoi+0x2a>
    3bd6:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulhi_const_10>
    3bda:	82 0f       	add	r24, r18
    3bdc:	91 1d       	adc	r25, r1
    3bde:	21 91       	ld	r18, Z+
    3be0:	20 53       	subi	r18, 0x30	; 48
    3be2:	2a 30       	cpi	r18, 0x0A	; 10
    3be4:	c0 f3       	brcs	.-16     	; 0x3bd6 <atoi+0x22>
    3be6:	1e f4       	brtc	.+6      	; 0x3bee <atoi+0x3a>
    3be8:	90 95       	com	r25
    3bea:	81 95       	neg	r24
    3bec:	9f 4f       	sbci	r25, 0xFF	; 255
    3bee:	08 95       	ret

00003bf0 <__mulhi_const_10>:
    3bf0:	7a e0       	ldi	r23, 0x0A	; 10
    3bf2:	97 9f       	mul	r25, r23
    3bf4:	90 2d       	mov	r25, r0
    3bf6:	87 9f       	mul	r24, r23
    3bf8:	80 2d       	mov	r24, r0
    3bfa:	91 0d       	add	r25, r1
    3bfc:	11 24       	eor	r1, r1
    3bfe:	08 95       	ret

00003c00 <sprintf>:
    3c00:	ae e0       	ldi	r26, 0x0E	; 14
    3c02:	b0 e0       	ldi	r27, 0x00	; 0
    3c04:	e6 e0       	ldi	r30, 0x06	; 6
    3c06:	fe e1       	ldi	r31, 0x1E	; 30
    3c08:	0c 94 b1 1d 	jmp	0x3b62	; 0x3b62 <__prologue_saves__+0x1c>
    3c0c:	0d 89       	ldd	r16, Y+21	; 0x15
    3c0e:	1e 89       	ldd	r17, Y+22	; 0x16
    3c10:	86 e0       	ldi	r24, 0x06	; 6
    3c12:	8c 83       	std	Y+4, r24	; 0x04
    3c14:	1a 83       	std	Y+2, r17	; 0x02
    3c16:	09 83       	std	Y+1, r16	; 0x01
    3c18:	8f ef       	ldi	r24, 0xFF	; 255
    3c1a:	9f e7       	ldi	r25, 0x7F	; 127
    3c1c:	9e 83       	std	Y+6, r25	; 0x06
    3c1e:	8d 83       	std	Y+5, r24	; 0x05
    3c20:	9e 01       	movw	r18, r28
    3c22:	27 5e       	subi	r18, 0xE7	; 231
    3c24:	3f 4f       	sbci	r19, 0xFF	; 255
    3c26:	ce 01       	movw	r24, r28
    3c28:	01 96       	adiw	r24, 0x01	; 1
    3c2a:	6f 89       	ldd	r22, Y+23	; 0x17
    3c2c:	78 8d       	ldd	r23, Y+24	; 0x18
    3c2e:	a9 01       	movw	r20, r18
    3c30:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <vfprintf>
    3c34:	2f 81       	ldd	r18, Y+7	; 0x07
    3c36:	38 85       	ldd	r19, Y+8	; 0x08
    3c38:	02 0f       	add	r16, r18
    3c3a:	13 1f       	adc	r17, r19
    3c3c:	f8 01       	movw	r30, r16
    3c3e:	10 82       	st	Z, r1
    3c40:	2e 96       	adiw	r28, 0x0e	; 14
    3c42:	e4 e0       	ldi	r30, 0x04	; 4
    3c44:	0c 94 cd 1d 	jmp	0x3b9a	; 0x3b9a <__epilogue_restores__+0x1c>

00003c48 <vfprintf>:
    3c48:	ab e0       	ldi	r26, 0x0B	; 11
    3c4a:	b0 e0       	ldi	r27, 0x00	; 0
    3c4c:	ea e2       	ldi	r30, 0x2A	; 42
    3c4e:	fe e1       	ldi	r31, 0x1E	; 30
    3c50:	0c 94 a3 1d 	jmp	0x3b46	; 0x3b46 <__prologue_saves__>
    3c54:	3c 01       	movw	r6, r24
    3c56:	2b 01       	movw	r4, r22
    3c58:	5a 01       	movw	r10, r20
    3c5a:	fc 01       	movw	r30, r24
    3c5c:	17 82       	std	Z+7, r1	; 0x07
    3c5e:	16 82       	std	Z+6, r1	; 0x06
    3c60:	83 81       	ldd	r24, Z+3	; 0x03
    3c62:	81 fd       	sbrc	r24, 1
    3c64:	03 c0       	rjmp	.+6      	; 0x3c6c <vfprintf+0x24>
    3c66:	6f ef       	ldi	r22, 0xFF	; 255
    3c68:	7f ef       	ldi	r23, 0xFF	; 255
    3c6a:	c6 c1       	rjmp	.+908    	; 0x3ff8 <vfprintf+0x3b0>
    3c6c:	9a e0       	ldi	r25, 0x0A	; 10
    3c6e:	89 2e       	mov	r8, r25
    3c70:	1e 01       	movw	r2, r28
    3c72:	08 94       	sec
    3c74:	21 1c       	adc	r2, r1
    3c76:	31 1c       	adc	r3, r1
    3c78:	f3 01       	movw	r30, r6
    3c7a:	23 81       	ldd	r18, Z+3	; 0x03
    3c7c:	f2 01       	movw	r30, r4
    3c7e:	23 fd       	sbrc	r18, 3
    3c80:	85 91       	lpm	r24, Z+
    3c82:	23 ff       	sbrs	r18, 3
    3c84:	81 91       	ld	r24, Z+
    3c86:	2f 01       	movw	r4, r30
    3c88:	88 23       	and	r24, r24
    3c8a:	09 f4       	brne	.+2      	; 0x3c8e <vfprintf+0x46>
    3c8c:	b2 c1       	rjmp	.+868    	; 0x3ff2 <vfprintf+0x3aa>
    3c8e:	85 32       	cpi	r24, 0x25	; 37
    3c90:	39 f4       	brne	.+14     	; 0x3ca0 <vfprintf+0x58>
    3c92:	23 fd       	sbrc	r18, 3
    3c94:	85 91       	lpm	r24, Z+
    3c96:	23 ff       	sbrs	r18, 3
    3c98:	81 91       	ld	r24, Z+
    3c9a:	2f 01       	movw	r4, r30
    3c9c:	85 32       	cpi	r24, 0x25	; 37
    3c9e:	29 f4       	brne	.+10     	; 0x3caa <vfprintf+0x62>
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	b3 01       	movw	r22, r6
    3ca4:	0e 94 17 20 	call	0x402e	; 0x402e <fputc>
    3ca8:	e7 cf       	rjmp	.-50     	; 0x3c78 <vfprintf+0x30>
    3caa:	98 2f       	mov	r25, r24
    3cac:	ff 24       	eor	r15, r15
    3cae:	ee 24       	eor	r14, r14
    3cb0:	99 24       	eor	r9, r9
    3cb2:	ff e1       	ldi	r31, 0x1F	; 31
    3cb4:	ff 15       	cp	r31, r15
    3cb6:	d0 f0       	brcs	.+52     	; 0x3cec <vfprintf+0xa4>
    3cb8:	9b 32       	cpi	r25, 0x2B	; 43
    3cba:	69 f0       	breq	.+26     	; 0x3cd6 <vfprintf+0x8e>
    3cbc:	9c 32       	cpi	r25, 0x2C	; 44
    3cbe:	28 f4       	brcc	.+10     	; 0x3cca <vfprintf+0x82>
    3cc0:	90 32       	cpi	r25, 0x20	; 32
    3cc2:	59 f0       	breq	.+22     	; 0x3cda <vfprintf+0x92>
    3cc4:	93 32       	cpi	r25, 0x23	; 35
    3cc6:	91 f4       	brne	.+36     	; 0x3cec <vfprintf+0xa4>
    3cc8:	0e c0       	rjmp	.+28     	; 0x3ce6 <vfprintf+0x9e>
    3cca:	9d 32       	cpi	r25, 0x2D	; 45
    3ccc:	49 f0       	breq	.+18     	; 0x3ce0 <vfprintf+0x98>
    3cce:	90 33       	cpi	r25, 0x30	; 48
    3cd0:	69 f4       	brne	.+26     	; 0x3cec <vfprintf+0xa4>
    3cd2:	41 e0       	ldi	r20, 0x01	; 1
    3cd4:	24 c0       	rjmp	.+72     	; 0x3d1e <vfprintf+0xd6>
    3cd6:	52 e0       	ldi	r21, 0x02	; 2
    3cd8:	f5 2a       	or	r15, r21
    3cda:	84 e0       	ldi	r24, 0x04	; 4
    3cdc:	f8 2a       	or	r15, r24
    3cde:	28 c0       	rjmp	.+80     	; 0x3d30 <vfprintf+0xe8>
    3ce0:	98 e0       	ldi	r25, 0x08	; 8
    3ce2:	f9 2a       	or	r15, r25
    3ce4:	25 c0       	rjmp	.+74     	; 0x3d30 <vfprintf+0xe8>
    3ce6:	e0 e1       	ldi	r30, 0x10	; 16
    3ce8:	fe 2a       	or	r15, r30
    3cea:	22 c0       	rjmp	.+68     	; 0x3d30 <vfprintf+0xe8>
    3cec:	f7 fc       	sbrc	r15, 7
    3cee:	29 c0       	rjmp	.+82     	; 0x3d42 <vfprintf+0xfa>
    3cf0:	89 2f       	mov	r24, r25
    3cf2:	80 53       	subi	r24, 0x30	; 48
    3cf4:	8a 30       	cpi	r24, 0x0A	; 10
    3cf6:	70 f4       	brcc	.+28     	; 0x3d14 <vfprintf+0xcc>
    3cf8:	f6 fe       	sbrs	r15, 6
    3cfa:	05 c0       	rjmp	.+10     	; 0x3d06 <vfprintf+0xbe>
    3cfc:	98 9c       	mul	r9, r8
    3cfe:	90 2c       	mov	r9, r0
    3d00:	11 24       	eor	r1, r1
    3d02:	98 0e       	add	r9, r24
    3d04:	15 c0       	rjmp	.+42     	; 0x3d30 <vfprintf+0xe8>
    3d06:	e8 9c       	mul	r14, r8
    3d08:	e0 2c       	mov	r14, r0
    3d0a:	11 24       	eor	r1, r1
    3d0c:	e8 0e       	add	r14, r24
    3d0e:	f0 e2       	ldi	r31, 0x20	; 32
    3d10:	ff 2a       	or	r15, r31
    3d12:	0e c0       	rjmp	.+28     	; 0x3d30 <vfprintf+0xe8>
    3d14:	9e 32       	cpi	r25, 0x2E	; 46
    3d16:	29 f4       	brne	.+10     	; 0x3d22 <vfprintf+0xda>
    3d18:	f6 fc       	sbrc	r15, 6
    3d1a:	6b c1       	rjmp	.+726    	; 0x3ff2 <vfprintf+0x3aa>
    3d1c:	40 e4       	ldi	r20, 0x40	; 64
    3d1e:	f4 2a       	or	r15, r20
    3d20:	07 c0       	rjmp	.+14     	; 0x3d30 <vfprintf+0xe8>
    3d22:	9c 36       	cpi	r25, 0x6C	; 108
    3d24:	19 f4       	brne	.+6      	; 0x3d2c <vfprintf+0xe4>
    3d26:	50 e8       	ldi	r21, 0x80	; 128
    3d28:	f5 2a       	or	r15, r21
    3d2a:	02 c0       	rjmp	.+4      	; 0x3d30 <vfprintf+0xe8>
    3d2c:	98 36       	cpi	r25, 0x68	; 104
    3d2e:	49 f4       	brne	.+18     	; 0x3d42 <vfprintf+0xfa>
    3d30:	f2 01       	movw	r30, r4
    3d32:	23 fd       	sbrc	r18, 3
    3d34:	95 91       	lpm	r25, Z+
    3d36:	23 ff       	sbrs	r18, 3
    3d38:	91 91       	ld	r25, Z+
    3d3a:	2f 01       	movw	r4, r30
    3d3c:	99 23       	and	r25, r25
    3d3e:	09 f0       	breq	.+2      	; 0x3d42 <vfprintf+0xfa>
    3d40:	b8 cf       	rjmp	.-144    	; 0x3cb2 <vfprintf+0x6a>
    3d42:	89 2f       	mov	r24, r25
    3d44:	85 54       	subi	r24, 0x45	; 69
    3d46:	83 30       	cpi	r24, 0x03	; 3
    3d48:	18 f0       	brcs	.+6      	; 0x3d50 <vfprintf+0x108>
    3d4a:	80 52       	subi	r24, 0x20	; 32
    3d4c:	83 30       	cpi	r24, 0x03	; 3
    3d4e:	38 f4       	brcc	.+14     	; 0x3d5e <vfprintf+0x116>
    3d50:	44 e0       	ldi	r20, 0x04	; 4
    3d52:	50 e0       	ldi	r21, 0x00	; 0
    3d54:	a4 0e       	add	r10, r20
    3d56:	b5 1e       	adc	r11, r21
    3d58:	5f e3       	ldi	r21, 0x3F	; 63
    3d5a:	59 83       	std	Y+1, r21	; 0x01
    3d5c:	0f c0       	rjmp	.+30     	; 0x3d7c <vfprintf+0x134>
    3d5e:	93 36       	cpi	r25, 0x63	; 99
    3d60:	31 f0       	breq	.+12     	; 0x3d6e <vfprintf+0x126>
    3d62:	93 37       	cpi	r25, 0x73	; 115
    3d64:	79 f0       	breq	.+30     	; 0x3d84 <vfprintf+0x13c>
    3d66:	93 35       	cpi	r25, 0x53	; 83
    3d68:	09 f0       	breq	.+2      	; 0x3d6c <vfprintf+0x124>
    3d6a:	56 c0       	rjmp	.+172    	; 0x3e18 <vfprintf+0x1d0>
    3d6c:	20 c0       	rjmp	.+64     	; 0x3dae <vfprintf+0x166>
    3d6e:	f5 01       	movw	r30, r10
    3d70:	80 81       	ld	r24, Z
    3d72:	89 83       	std	Y+1, r24	; 0x01
    3d74:	42 e0       	ldi	r20, 0x02	; 2
    3d76:	50 e0       	ldi	r21, 0x00	; 0
    3d78:	a4 0e       	add	r10, r20
    3d7a:	b5 1e       	adc	r11, r21
    3d7c:	61 01       	movw	r12, r2
    3d7e:	01 e0       	ldi	r16, 0x01	; 1
    3d80:	10 e0       	ldi	r17, 0x00	; 0
    3d82:	12 c0       	rjmp	.+36     	; 0x3da8 <vfprintf+0x160>
    3d84:	f5 01       	movw	r30, r10
    3d86:	c0 80       	ld	r12, Z
    3d88:	d1 80       	ldd	r13, Z+1	; 0x01
    3d8a:	f6 fc       	sbrc	r15, 6
    3d8c:	03 c0       	rjmp	.+6      	; 0x3d94 <vfprintf+0x14c>
    3d8e:	6f ef       	ldi	r22, 0xFF	; 255
    3d90:	7f ef       	ldi	r23, 0xFF	; 255
    3d92:	02 c0       	rjmp	.+4      	; 0x3d98 <vfprintf+0x150>
    3d94:	69 2d       	mov	r22, r9
    3d96:	70 e0       	ldi	r23, 0x00	; 0
    3d98:	42 e0       	ldi	r20, 0x02	; 2
    3d9a:	50 e0       	ldi	r21, 0x00	; 0
    3d9c:	a4 0e       	add	r10, r20
    3d9e:	b5 1e       	adc	r11, r21
    3da0:	c6 01       	movw	r24, r12
    3da2:	0e 94 0c 20 	call	0x4018	; 0x4018 <strnlen>
    3da6:	8c 01       	movw	r16, r24
    3da8:	5f e7       	ldi	r21, 0x7F	; 127
    3daa:	f5 22       	and	r15, r21
    3dac:	14 c0       	rjmp	.+40     	; 0x3dd6 <vfprintf+0x18e>
    3dae:	f5 01       	movw	r30, r10
    3db0:	c0 80       	ld	r12, Z
    3db2:	d1 80       	ldd	r13, Z+1	; 0x01
    3db4:	f6 fc       	sbrc	r15, 6
    3db6:	03 c0       	rjmp	.+6      	; 0x3dbe <vfprintf+0x176>
    3db8:	6f ef       	ldi	r22, 0xFF	; 255
    3dba:	7f ef       	ldi	r23, 0xFF	; 255
    3dbc:	02 c0       	rjmp	.+4      	; 0x3dc2 <vfprintf+0x17a>
    3dbe:	69 2d       	mov	r22, r9
    3dc0:	70 e0       	ldi	r23, 0x00	; 0
    3dc2:	42 e0       	ldi	r20, 0x02	; 2
    3dc4:	50 e0       	ldi	r21, 0x00	; 0
    3dc6:	a4 0e       	add	r10, r20
    3dc8:	b5 1e       	adc	r11, r21
    3dca:	c6 01       	movw	r24, r12
    3dcc:	0e 94 01 20 	call	0x4002	; 0x4002 <strnlen_P>
    3dd0:	8c 01       	movw	r16, r24
    3dd2:	50 e8       	ldi	r21, 0x80	; 128
    3dd4:	f5 2a       	or	r15, r21
    3dd6:	f3 fe       	sbrs	r15, 3
    3dd8:	07 c0       	rjmp	.+14     	; 0x3de8 <vfprintf+0x1a0>
    3dda:	1a c0       	rjmp	.+52     	; 0x3e10 <vfprintf+0x1c8>
    3ddc:	80 e2       	ldi	r24, 0x20	; 32
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	b3 01       	movw	r22, r6
    3de2:	0e 94 17 20 	call	0x402e	; 0x402e <fputc>
    3de6:	ea 94       	dec	r14
    3de8:	8e 2d       	mov	r24, r14
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	08 17       	cp	r16, r24
    3dee:	19 07       	cpc	r17, r25
    3df0:	a8 f3       	brcs	.-22     	; 0x3ddc <vfprintf+0x194>
    3df2:	0e c0       	rjmp	.+28     	; 0x3e10 <vfprintf+0x1c8>
    3df4:	f6 01       	movw	r30, r12
    3df6:	f7 fc       	sbrc	r15, 7
    3df8:	85 91       	lpm	r24, Z+
    3dfa:	f7 fe       	sbrs	r15, 7
    3dfc:	81 91       	ld	r24, Z+
    3dfe:	6f 01       	movw	r12, r30
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	b3 01       	movw	r22, r6
    3e04:	0e 94 17 20 	call	0x402e	; 0x402e <fputc>
    3e08:	e1 10       	cpse	r14, r1
    3e0a:	ea 94       	dec	r14
    3e0c:	01 50       	subi	r16, 0x01	; 1
    3e0e:	10 40       	sbci	r17, 0x00	; 0
    3e10:	01 15       	cp	r16, r1
    3e12:	11 05       	cpc	r17, r1
    3e14:	79 f7       	brne	.-34     	; 0x3df4 <vfprintf+0x1ac>
    3e16:	ea c0       	rjmp	.+468    	; 0x3fec <vfprintf+0x3a4>
    3e18:	94 36       	cpi	r25, 0x64	; 100
    3e1a:	11 f0       	breq	.+4      	; 0x3e20 <vfprintf+0x1d8>
    3e1c:	99 36       	cpi	r25, 0x69	; 105
    3e1e:	69 f5       	brne	.+90     	; 0x3e7a <vfprintf+0x232>
    3e20:	f7 fe       	sbrs	r15, 7
    3e22:	08 c0       	rjmp	.+16     	; 0x3e34 <vfprintf+0x1ec>
    3e24:	f5 01       	movw	r30, r10
    3e26:	20 81       	ld	r18, Z
    3e28:	31 81       	ldd	r19, Z+1	; 0x01
    3e2a:	42 81       	ldd	r20, Z+2	; 0x02
    3e2c:	53 81       	ldd	r21, Z+3	; 0x03
    3e2e:	84 e0       	ldi	r24, 0x04	; 4
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	0a c0       	rjmp	.+20     	; 0x3e48 <vfprintf+0x200>
    3e34:	f5 01       	movw	r30, r10
    3e36:	80 81       	ld	r24, Z
    3e38:	91 81       	ldd	r25, Z+1	; 0x01
    3e3a:	9c 01       	movw	r18, r24
    3e3c:	44 27       	eor	r20, r20
    3e3e:	37 fd       	sbrc	r19, 7
    3e40:	40 95       	com	r20
    3e42:	54 2f       	mov	r21, r20
    3e44:	82 e0       	ldi	r24, 0x02	; 2
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	a8 0e       	add	r10, r24
    3e4a:	b9 1e       	adc	r11, r25
    3e4c:	9f e6       	ldi	r25, 0x6F	; 111
    3e4e:	f9 22       	and	r15, r25
    3e50:	57 ff       	sbrs	r21, 7
    3e52:	09 c0       	rjmp	.+18     	; 0x3e66 <vfprintf+0x21e>
    3e54:	50 95       	com	r21
    3e56:	40 95       	com	r20
    3e58:	30 95       	com	r19
    3e5a:	21 95       	neg	r18
    3e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e5e:	4f 4f       	sbci	r20, 0xFF	; 255
    3e60:	5f 4f       	sbci	r21, 0xFF	; 255
    3e62:	e0 e8       	ldi	r30, 0x80	; 128
    3e64:	fe 2a       	or	r15, r30
    3e66:	ca 01       	movw	r24, r20
    3e68:	b9 01       	movw	r22, r18
    3e6a:	a1 01       	movw	r20, r2
    3e6c:	2a e0       	ldi	r18, 0x0A	; 10
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	0e 94 43 20 	call	0x4086	; 0x4086 <__ultoa_invert>
    3e74:	d8 2e       	mov	r13, r24
    3e76:	d2 18       	sub	r13, r2
    3e78:	40 c0       	rjmp	.+128    	; 0x3efa <vfprintf+0x2b2>
    3e7a:	95 37       	cpi	r25, 0x75	; 117
    3e7c:	29 f4       	brne	.+10     	; 0x3e88 <vfprintf+0x240>
    3e7e:	1f 2d       	mov	r17, r15
    3e80:	1f 7e       	andi	r17, 0xEF	; 239
    3e82:	2a e0       	ldi	r18, 0x0A	; 10
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	1d c0       	rjmp	.+58     	; 0x3ec2 <vfprintf+0x27a>
    3e88:	1f 2d       	mov	r17, r15
    3e8a:	19 7f       	andi	r17, 0xF9	; 249
    3e8c:	9f 36       	cpi	r25, 0x6F	; 111
    3e8e:	61 f0       	breq	.+24     	; 0x3ea8 <vfprintf+0x260>
    3e90:	90 37       	cpi	r25, 0x70	; 112
    3e92:	20 f4       	brcc	.+8      	; 0x3e9c <vfprintf+0x254>
    3e94:	98 35       	cpi	r25, 0x58	; 88
    3e96:	09 f0       	breq	.+2      	; 0x3e9a <vfprintf+0x252>
    3e98:	ac c0       	rjmp	.+344    	; 0x3ff2 <vfprintf+0x3aa>
    3e9a:	0f c0       	rjmp	.+30     	; 0x3eba <vfprintf+0x272>
    3e9c:	90 37       	cpi	r25, 0x70	; 112
    3e9e:	39 f0       	breq	.+14     	; 0x3eae <vfprintf+0x266>
    3ea0:	98 37       	cpi	r25, 0x78	; 120
    3ea2:	09 f0       	breq	.+2      	; 0x3ea6 <vfprintf+0x25e>
    3ea4:	a6 c0       	rjmp	.+332    	; 0x3ff2 <vfprintf+0x3aa>
    3ea6:	04 c0       	rjmp	.+8      	; 0x3eb0 <vfprintf+0x268>
    3ea8:	28 e0       	ldi	r18, 0x08	; 8
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	0a c0       	rjmp	.+20     	; 0x3ec2 <vfprintf+0x27a>
    3eae:	10 61       	ori	r17, 0x10	; 16
    3eb0:	14 fd       	sbrc	r17, 4
    3eb2:	14 60       	ori	r17, 0x04	; 4
    3eb4:	20 e1       	ldi	r18, 0x10	; 16
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	04 c0       	rjmp	.+8      	; 0x3ec2 <vfprintf+0x27a>
    3eba:	14 fd       	sbrc	r17, 4
    3ebc:	16 60       	ori	r17, 0x06	; 6
    3ebe:	20 e1       	ldi	r18, 0x10	; 16
    3ec0:	32 e0       	ldi	r19, 0x02	; 2
    3ec2:	17 ff       	sbrs	r17, 7
    3ec4:	08 c0       	rjmp	.+16     	; 0x3ed6 <vfprintf+0x28e>
    3ec6:	f5 01       	movw	r30, r10
    3ec8:	60 81       	ld	r22, Z
    3eca:	71 81       	ldd	r23, Z+1	; 0x01
    3ecc:	82 81       	ldd	r24, Z+2	; 0x02
    3ece:	93 81       	ldd	r25, Z+3	; 0x03
    3ed0:	44 e0       	ldi	r20, 0x04	; 4
    3ed2:	50 e0       	ldi	r21, 0x00	; 0
    3ed4:	08 c0       	rjmp	.+16     	; 0x3ee6 <vfprintf+0x29e>
    3ed6:	f5 01       	movw	r30, r10
    3ed8:	80 81       	ld	r24, Z
    3eda:	91 81       	ldd	r25, Z+1	; 0x01
    3edc:	bc 01       	movw	r22, r24
    3ede:	80 e0       	ldi	r24, 0x00	; 0
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	42 e0       	ldi	r20, 0x02	; 2
    3ee4:	50 e0       	ldi	r21, 0x00	; 0
    3ee6:	a4 0e       	add	r10, r20
    3ee8:	b5 1e       	adc	r11, r21
    3eea:	a1 01       	movw	r20, r2
    3eec:	0e 94 43 20 	call	0x4086	; 0x4086 <__ultoa_invert>
    3ef0:	d8 2e       	mov	r13, r24
    3ef2:	d2 18       	sub	r13, r2
    3ef4:	8f e7       	ldi	r24, 0x7F	; 127
    3ef6:	f8 2e       	mov	r15, r24
    3ef8:	f1 22       	and	r15, r17
    3efa:	f6 fe       	sbrs	r15, 6
    3efc:	0b c0       	rjmp	.+22     	; 0x3f14 <vfprintf+0x2cc>
    3efe:	5e ef       	ldi	r21, 0xFE	; 254
    3f00:	f5 22       	and	r15, r21
    3f02:	d9 14       	cp	r13, r9
    3f04:	38 f4       	brcc	.+14     	; 0x3f14 <vfprintf+0x2cc>
    3f06:	f4 fe       	sbrs	r15, 4
    3f08:	07 c0       	rjmp	.+14     	; 0x3f18 <vfprintf+0x2d0>
    3f0a:	f2 fc       	sbrc	r15, 2
    3f0c:	05 c0       	rjmp	.+10     	; 0x3f18 <vfprintf+0x2d0>
    3f0e:	8f ee       	ldi	r24, 0xEF	; 239
    3f10:	f8 22       	and	r15, r24
    3f12:	02 c0       	rjmp	.+4      	; 0x3f18 <vfprintf+0x2d0>
    3f14:	1d 2d       	mov	r17, r13
    3f16:	01 c0       	rjmp	.+2      	; 0x3f1a <vfprintf+0x2d2>
    3f18:	19 2d       	mov	r17, r9
    3f1a:	f4 fe       	sbrs	r15, 4
    3f1c:	0d c0       	rjmp	.+26     	; 0x3f38 <vfprintf+0x2f0>
    3f1e:	fe 01       	movw	r30, r28
    3f20:	ed 0d       	add	r30, r13
    3f22:	f1 1d       	adc	r31, r1
    3f24:	80 81       	ld	r24, Z
    3f26:	80 33       	cpi	r24, 0x30	; 48
    3f28:	19 f4       	brne	.+6      	; 0x3f30 <vfprintf+0x2e8>
    3f2a:	99 ee       	ldi	r25, 0xE9	; 233
    3f2c:	f9 22       	and	r15, r25
    3f2e:	08 c0       	rjmp	.+16     	; 0x3f40 <vfprintf+0x2f8>
    3f30:	1f 5f       	subi	r17, 0xFF	; 255
    3f32:	f2 fe       	sbrs	r15, 2
    3f34:	05 c0       	rjmp	.+10     	; 0x3f40 <vfprintf+0x2f8>
    3f36:	03 c0       	rjmp	.+6      	; 0x3f3e <vfprintf+0x2f6>
    3f38:	8f 2d       	mov	r24, r15
    3f3a:	86 78       	andi	r24, 0x86	; 134
    3f3c:	09 f0       	breq	.+2      	; 0x3f40 <vfprintf+0x2f8>
    3f3e:	1f 5f       	subi	r17, 0xFF	; 255
    3f40:	0f 2d       	mov	r16, r15
    3f42:	f3 fc       	sbrc	r15, 3
    3f44:	14 c0       	rjmp	.+40     	; 0x3f6e <vfprintf+0x326>
    3f46:	f0 fe       	sbrs	r15, 0
    3f48:	0f c0       	rjmp	.+30     	; 0x3f68 <vfprintf+0x320>
    3f4a:	1e 15       	cp	r17, r14
    3f4c:	10 f0       	brcs	.+4      	; 0x3f52 <vfprintf+0x30a>
    3f4e:	9d 2c       	mov	r9, r13
    3f50:	0b c0       	rjmp	.+22     	; 0x3f68 <vfprintf+0x320>
    3f52:	9d 2c       	mov	r9, r13
    3f54:	9e 0c       	add	r9, r14
    3f56:	91 1a       	sub	r9, r17
    3f58:	1e 2d       	mov	r17, r14
    3f5a:	06 c0       	rjmp	.+12     	; 0x3f68 <vfprintf+0x320>
    3f5c:	80 e2       	ldi	r24, 0x20	; 32
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	b3 01       	movw	r22, r6
    3f62:	0e 94 17 20 	call	0x402e	; 0x402e <fputc>
    3f66:	1f 5f       	subi	r17, 0xFF	; 255
    3f68:	1e 15       	cp	r17, r14
    3f6a:	c0 f3       	brcs	.-16     	; 0x3f5c <vfprintf+0x314>
    3f6c:	04 c0       	rjmp	.+8      	; 0x3f76 <vfprintf+0x32e>
    3f6e:	1e 15       	cp	r17, r14
    3f70:	10 f4       	brcc	.+4      	; 0x3f76 <vfprintf+0x32e>
    3f72:	e1 1a       	sub	r14, r17
    3f74:	01 c0       	rjmp	.+2      	; 0x3f78 <vfprintf+0x330>
    3f76:	ee 24       	eor	r14, r14
    3f78:	04 ff       	sbrs	r16, 4
    3f7a:	0f c0       	rjmp	.+30     	; 0x3f9a <vfprintf+0x352>
    3f7c:	80 e3       	ldi	r24, 0x30	; 48
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	b3 01       	movw	r22, r6
    3f82:	0e 94 17 20 	call	0x402e	; 0x402e <fputc>
    3f86:	02 ff       	sbrs	r16, 2
    3f88:	1d c0       	rjmp	.+58     	; 0x3fc4 <vfprintf+0x37c>
    3f8a:	01 fd       	sbrc	r16, 1
    3f8c:	03 c0       	rjmp	.+6      	; 0x3f94 <vfprintf+0x34c>
    3f8e:	88 e7       	ldi	r24, 0x78	; 120
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	0e c0       	rjmp	.+28     	; 0x3fb0 <vfprintf+0x368>
    3f94:	88 e5       	ldi	r24, 0x58	; 88
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	0b c0       	rjmp	.+22     	; 0x3fb0 <vfprintf+0x368>
    3f9a:	80 2f       	mov	r24, r16
    3f9c:	86 78       	andi	r24, 0x86	; 134
    3f9e:	91 f0       	breq	.+36     	; 0x3fc4 <vfprintf+0x37c>
    3fa0:	01 ff       	sbrs	r16, 1
    3fa2:	02 c0       	rjmp	.+4      	; 0x3fa8 <vfprintf+0x360>
    3fa4:	8b e2       	ldi	r24, 0x2B	; 43
    3fa6:	01 c0       	rjmp	.+2      	; 0x3faa <vfprintf+0x362>
    3fa8:	80 e2       	ldi	r24, 0x20	; 32
    3faa:	f7 fc       	sbrc	r15, 7
    3fac:	8d e2       	ldi	r24, 0x2D	; 45
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	b3 01       	movw	r22, r6
    3fb2:	0e 94 17 20 	call	0x402e	; 0x402e <fputc>
    3fb6:	06 c0       	rjmp	.+12     	; 0x3fc4 <vfprintf+0x37c>
    3fb8:	80 e3       	ldi	r24, 0x30	; 48
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	b3 01       	movw	r22, r6
    3fbe:	0e 94 17 20 	call	0x402e	; 0x402e <fputc>
    3fc2:	9a 94       	dec	r9
    3fc4:	d9 14       	cp	r13, r9
    3fc6:	c0 f3       	brcs	.-16     	; 0x3fb8 <vfprintf+0x370>
    3fc8:	da 94       	dec	r13
    3fca:	f1 01       	movw	r30, r2
    3fcc:	ed 0d       	add	r30, r13
    3fce:	f1 1d       	adc	r31, r1
    3fd0:	80 81       	ld	r24, Z
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	b3 01       	movw	r22, r6
    3fd6:	0e 94 17 20 	call	0x402e	; 0x402e <fputc>
    3fda:	dd 20       	and	r13, r13
    3fdc:	a9 f7       	brne	.-22     	; 0x3fc8 <vfprintf+0x380>
    3fde:	06 c0       	rjmp	.+12     	; 0x3fec <vfprintf+0x3a4>
    3fe0:	80 e2       	ldi	r24, 0x20	; 32
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	b3 01       	movw	r22, r6
    3fe6:	0e 94 17 20 	call	0x402e	; 0x402e <fputc>
    3fea:	ea 94       	dec	r14
    3fec:	ee 20       	and	r14, r14
    3fee:	c1 f7       	brne	.-16     	; 0x3fe0 <vfprintf+0x398>
    3ff0:	43 ce       	rjmp	.-890    	; 0x3c78 <vfprintf+0x30>
    3ff2:	f3 01       	movw	r30, r6
    3ff4:	66 81       	ldd	r22, Z+6	; 0x06
    3ff6:	77 81       	ldd	r23, Z+7	; 0x07
    3ff8:	cb 01       	movw	r24, r22
    3ffa:	2b 96       	adiw	r28, 0x0b	; 11
    3ffc:	e2 e1       	ldi	r30, 0x12	; 18
    3ffe:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__epilogue_restores__>

00004002 <strnlen_P>:
    4002:	fc 01       	movw	r30, r24
    4004:	05 90       	lpm	r0, Z+
    4006:	61 50       	subi	r22, 0x01	; 1
    4008:	70 40       	sbci	r23, 0x00	; 0
    400a:	01 10       	cpse	r0, r1
    400c:	d8 f7       	brcc	.-10     	; 0x4004 <strnlen_P+0x2>
    400e:	80 95       	com	r24
    4010:	90 95       	com	r25
    4012:	8e 0f       	add	r24, r30
    4014:	9f 1f       	adc	r25, r31
    4016:	08 95       	ret

00004018 <strnlen>:
    4018:	fc 01       	movw	r30, r24
    401a:	61 50       	subi	r22, 0x01	; 1
    401c:	70 40       	sbci	r23, 0x00	; 0
    401e:	01 90       	ld	r0, Z+
    4020:	01 10       	cpse	r0, r1
    4022:	d8 f7       	brcc	.-10     	; 0x401a <strnlen+0x2>
    4024:	80 95       	com	r24
    4026:	90 95       	com	r25
    4028:	8e 0f       	add	r24, r30
    402a:	9f 1f       	adc	r25, r31
    402c:	08 95       	ret

0000402e <fputc>:
    402e:	0f 93       	push	r16
    4030:	1f 93       	push	r17
    4032:	cf 93       	push	r28
    4034:	df 93       	push	r29
    4036:	8c 01       	movw	r16, r24
    4038:	eb 01       	movw	r28, r22
    403a:	8b 81       	ldd	r24, Y+3	; 0x03
    403c:	81 ff       	sbrs	r24, 1
    403e:	1b c0       	rjmp	.+54     	; 0x4076 <fputc+0x48>
    4040:	82 ff       	sbrs	r24, 2
    4042:	0d c0       	rjmp	.+26     	; 0x405e <fputc+0x30>
    4044:	2e 81       	ldd	r18, Y+6	; 0x06
    4046:	3f 81       	ldd	r19, Y+7	; 0x07
    4048:	8c 81       	ldd	r24, Y+4	; 0x04
    404a:	9d 81       	ldd	r25, Y+5	; 0x05
    404c:	28 17       	cp	r18, r24
    404e:	39 07       	cpc	r19, r25
    4050:	64 f4       	brge	.+24     	; 0x406a <fputc+0x3c>
    4052:	e8 81       	ld	r30, Y
    4054:	f9 81       	ldd	r31, Y+1	; 0x01
    4056:	01 93       	st	Z+, r16
    4058:	f9 83       	std	Y+1, r31	; 0x01
    405a:	e8 83       	st	Y, r30
    405c:	06 c0       	rjmp	.+12     	; 0x406a <fputc+0x3c>
    405e:	e8 85       	ldd	r30, Y+8	; 0x08
    4060:	f9 85       	ldd	r31, Y+9	; 0x09
    4062:	80 2f       	mov	r24, r16
    4064:	09 95       	icall
    4066:	89 2b       	or	r24, r25
    4068:	31 f4       	brne	.+12     	; 0x4076 <fputc+0x48>
    406a:	8e 81       	ldd	r24, Y+6	; 0x06
    406c:	9f 81       	ldd	r25, Y+7	; 0x07
    406e:	01 96       	adiw	r24, 0x01	; 1
    4070:	9f 83       	std	Y+7, r25	; 0x07
    4072:	8e 83       	std	Y+6, r24	; 0x06
    4074:	02 c0       	rjmp	.+4      	; 0x407a <fputc+0x4c>
    4076:	0f ef       	ldi	r16, 0xFF	; 255
    4078:	1f ef       	ldi	r17, 0xFF	; 255
    407a:	c8 01       	movw	r24, r16
    407c:	df 91       	pop	r29
    407e:	cf 91       	pop	r28
    4080:	1f 91       	pop	r17
    4082:	0f 91       	pop	r16
    4084:	08 95       	ret

00004086 <__ultoa_invert>:
    4086:	fa 01       	movw	r30, r20
    4088:	aa 27       	eor	r26, r26
    408a:	28 30       	cpi	r18, 0x08	; 8
    408c:	51 f1       	breq	.+84     	; 0x40e2 <__ultoa_invert+0x5c>
    408e:	20 31       	cpi	r18, 0x10	; 16
    4090:	81 f1       	breq	.+96     	; 0x40f2 <__ultoa_invert+0x6c>
    4092:	e8 94       	clt
    4094:	6f 93       	push	r22
    4096:	6e 7f       	andi	r22, 0xFE	; 254
    4098:	6e 5f       	subi	r22, 0xFE	; 254
    409a:	7f 4f       	sbci	r23, 0xFF	; 255
    409c:	8f 4f       	sbci	r24, 0xFF	; 255
    409e:	9f 4f       	sbci	r25, 0xFF	; 255
    40a0:	af 4f       	sbci	r26, 0xFF	; 255
    40a2:	b1 e0       	ldi	r27, 0x01	; 1
    40a4:	3e d0       	rcall	.+124    	; 0x4122 <__ultoa_invert+0x9c>
    40a6:	b4 e0       	ldi	r27, 0x04	; 4
    40a8:	3c d0       	rcall	.+120    	; 0x4122 <__ultoa_invert+0x9c>
    40aa:	67 0f       	add	r22, r23
    40ac:	78 1f       	adc	r23, r24
    40ae:	89 1f       	adc	r24, r25
    40b0:	9a 1f       	adc	r25, r26
    40b2:	a1 1d       	adc	r26, r1
    40b4:	68 0f       	add	r22, r24
    40b6:	79 1f       	adc	r23, r25
    40b8:	8a 1f       	adc	r24, r26
    40ba:	91 1d       	adc	r25, r1
    40bc:	a1 1d       	adc	r26, r1
    40be:	6a 0f       	add	r22, r26
    40c0:	71 1d       	adc	r23, r1
    40c2:	81 1d       	adc	r24, r1
    40c4:	91 1d       	adc	r25, r1
    40c6:	a1 1d       	adc	r26, r1
    40c8:	20 d0       	rcall	.+64     	; 0x410a <__ultoa_invert+0x84>
    40ca:	09 f4       	brne	.+2      	; 0x40ce <__ultoa_invert+0x48>
    40cc:	68 94       	set
    40ce:	3f 91       	pop	r19
    40d0:	2a e0       	ldi	r18, 0x0A	; 10
    40d2:	26 9f       	mul	r18, r22
    40d4:	11 24       	eor	r1, r1
    40d6:	30 19       	sub	r19, r0
    40d8:	30 5d       	subi	r19, 0xD0	; 208
    40da:	31 93       	st	Z+, r19
    40dc:	de f6       	brtc	.-74     	; 0x4094 <__ultoa_invert+0xe>
    40de:	cf 01       	movw	r24, r30
    40e0:	08 95       	ret
    40e2:	46 2f       	mov	r20, r22
    40e4:	47 70       	andi	r20, 0x07	; 7
    40e6:	40 5d       	subi	r20, 0xD0	; 208
    40e8:	41 93       	st	Z+, r20
    40ea:	b3 e0       	ldi	r27, 0x03	; 3
    40ec:	0f d0       	rcall	.+30     	; 0x410c <__ultoa_invert+0x86>
    40ee:	c9 f7       	brne	.-14     	; 0x40e2 <__ultoa_invert+0x5c>
    40f0:	f6 cf       	rjmp	.-20     	; 0x40de <__ultoa_invert+0x58>
    40f2:	46 2f       	mov	r20, r22
    40f4:	4f 70       	andi	r20, 0x0F	; 15
    40f6:	40 5d       	subi	r20, 0xD0	; 208
    40f8:	4a 33       	cpi	r20, 0x3A	; 58
    40fa:	18 f0       	brcs	.+6      	; 0x4102 <__ultoa_invert+0x7c>
    40fc:	49 5d       	subi	r20, 0xD9	; 217
    40fe:	31 fd       	sbrc	r19, 1
    4100:	40 52       	subi	r20, 0x20	; 32
    4102:	41 93       	st	Z+, r20
    4104:	02 d0       	rcall	.+4      	; 0x410a <__ultoa_invert+0x84>
    4106:	a9 f7       	brne	.-22     	; 0x40f2 <__ultoa_invert+0x6c>
    4108:	ea cf       	rjmp	.-44     	; 0x40de <__ultoa_invert+0x58>
    410a:	b4 e0       	ldi	r27, 0x04	; 4
    410c:	a6 95       	lsr	r26
    410e:	97 95       	ror	r25
    4110:	87 95       	ror	r24
    4112:	77 95       	ror	r23
    4114:	67 95       	ror	r22
    4116:	ba 95       	dec	r27
    4118:	c9 f7       	brne	.-14     	; 0x410c <__ultoa_invert+0x86>
    411a:	00 97       	sbiw	r24, 0x00	; 0
    411c:	61 05       	cpc	r22, r1
    411e:	71 05       	cpc	r23, r1
    4120:	08 95       	ret
    4122:	9b 01       	movw	r18, r22
    4124:	ac 01       	movw	r20, r24
    4126:	0a 2e       	mov	r0, r26
    4128:	06 94       	lsr	r0
    412a:	57 95       	ror	r21
    412c:	47 95       	ror	r20
    412e:	37 95       	ror	r19
    4130:	27 95       	ror	r18
    4132:	ba 95       	dec	r27
    4134:	c9 f7       	brne	.-14     	; 0x4128 <__ultoa_invert+0xa2>
    4136:	62 0f       	add	r22, r18
    4138:	73 1f       	adc	r23, r19
    413a:	84 1f       	adc	r24, r20
    413c:	95 1f       	adc	r25, r21
    413e:	a0 1d       	adc	r26, r0
    4140:	08 95       	ret

00004142 <_exit>:
    4142:	f8 94       	cli

00004144 <__stop_program>:
    4144:	ff cf       	rjmp	.-2      	; 0x4144 <__stop_program>
